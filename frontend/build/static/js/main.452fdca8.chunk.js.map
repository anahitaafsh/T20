{"version":3,"sources":["components/msal/authConfig.js","components/msal/idTokenClaims.jsx","components/entryForm.jsx","components/layout/welcomeHeader.jsx","components/layout/navigation.jsx","components/layout/result-table.jsx","ui.jsx","App.jsx","index.js"],"names":["b2cPolicies","signUpSignIn","forgotPassword","editProfile","authority","msalConfig","auth","clientId","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","IdTokenClaims","props","id","idTokenClaims","aud","iss","oid","preferred_username","axios","require","default","EntryForm","useState","age","setAge","systolicBP","setSystolicBP","diastolicBP","setDiastolicBP","bs","setBS","bodyTemp","setBodyTemp","heartRate","setHeartRate","anomaly_bodyTemp","anomaly_bs","anomaly_dbp","anomaly_hr","anomaly_sbp","riskLevel","apiResult","setApiResult","log","handleSubmit","e","preventDefault","post","BS","response","data","refresh","prev","onSubmit","className","type","value","required","onChange","isNaN","alert","target","handleAgeChange","handleSystolicBPChange","handleDiastolicBPChange","handleBSChange","handleBodyTempChange","handleHeartRateChange","WelcomeHeader","NavBar","ResultTable","results","setResults","useEffect","fetch","API_BASE","r","json","tbl","map","Row","PageLayout","setRefresh","IdTokenContent","accounts","useMsal","setIdTokenClaims","name","variant","onClick","MainContent","instance","callbackId","addEventCallback","event","eventType","EventType","LOGIN_FAILURE","errorMessage","indexOf","interactionType","InteractionType","Redirect","loginRedirect","Popup","loginPopup","catch","LOGIN_SUCCESS","payload","window","logout","removeEventCallback","App","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.452fdca8.chunk.js","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**tenant\n * Enter here the user flows and custom policies for your B2C application\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\n */\nexport const b2cPolicies = {\n    names: {\n        signUpSignIn: \"B2C_1_t20signupsignin\",\n        forgotPassword: \"b2c_1_reset\",\n        editProfile: \"b2c_1_edit_profile\"\n    },\n    authorities: {\n        signUpSignIn: {\n            authority: \"https://t20b2c.b2clogin.com/t20b2c.onmicrosoft.com/B2C_1_t20signupsignin\",\n        },\n        forgotPassword: {\n            authority: \"https://t20b2c.b2clogin.com/t20b2c.onmicrosoft.com/b2c_1_reset\",\n        },\n        editProfile: {\n            authority: \"https://t20b2c.b2clogin.com/t20b2c.onmicrosoft.com/b2c_1_edit_profile\"\n        }\n    },\n    authorityDomain: \"t20b2c.b2clogin.com\"\n}\n\n/**\n * Configuration object to be passed to MSAL instance on creation. \n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \n */\nexport const msalConfig = {\n    auth: {\n        clientId: \"dfc41c62-bb90-4d3b-adc2-b837b9569f71\", // This is the ONLY mandatory field that you need to supply.\n        authority: b2cPolicies.authorities.signUpSignIn.authority, // Use a sign-up/sign-in user-flow as a default authority\n        knownAuthorities: [b2cPolicies.authorityDomain], // Mark your B2C tenant's domain as trusted.\n        redirectUri: \"/\", // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n        postLogoutRedirectUri: \"/\", // Indicates the page to navigate after logout.\n        navigateToLoginRequestUrl: false, // If \"true\", will navigate back to the original request location before processing the auth code response.\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    },\n    system: {\t\n        loggerOptions: {\t\n            loggerCallback: (level, message, containsPii) => {\t\n                if (containsPii) {\t\t\n                    return;\t\t\n                }\t\t\n                switch (level) {\t\t\n                    case LogLevel.Error:\t\t\n                        console.error(message);\t\t\n                        return;\t\t\n                    case LogLevel.Info:\t\t\n                        console.info(message);\t\t\n                        return;\t\t\n                    case LogLevel.Verbose:\t\t\n                        console.debug(message);\t\t\n                        return;\t\t\n                    case LogLevel.Warning:\t\t\n                        console.warn(message);\t\t\n                        return;\t\t\n                }\t\n            }\t\n        }\t\n    }\n};\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit: \n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = {\n    scopes: []\n};\n\n/**\n * An optional silentRequest object can be used to achieve silent SSO\n * between applications by providing a \"login_hint\" property.\n */\nexport const silentRequest = {\n  scopes: [\"openid\", \"profile\"],\n  loginHint: \"example@domain.net\"\n};","import { useState } from \"react\";\n\nfunction IdTokenClaims(props) {\n    return (\n        <div id=\"token-div\">\n            <p><strong>Audience: </strong> {props.idTokenClaims.aud}</p>\n            <p><strong>Issuer: </strong> {props.idTokenClaims.iss}</p>\n            <p><strong>OID: </strong> {props.idTokenClaims.oid}</p>\n            <p><strong>UPN: </strong> {props.idTokenClaims.preferred_username}</p>\n        </div>\n    );\n}\n\nexport default IdTokenClaims;","import { useState } from \"react\";\nimport React from 'react';\nconst axios = require('axios').default;\nimport '../styles/entryForm.css';\nimport { useEffect } from \"react\";\nexport const breakline = '\\u000A';\n\nfunction EntryForm(props) {\n    //Variables for the form\n    const [age, setAge] = useState('');\n    const [systolicBP, setSystolicBP] = useState('');\n    const [diastolicBP, setDiastolicBP] = useState('');\n    const [bs, setBS] = useState('');\n    const [bodyTemp, setBodyTemp] = useState('');\n    const [heartRate, setHeartRate] = useState('');\n    const [apiResult, setApiResult] = useState({\n        anomaly_bodyTemp: null,\n        anomaly_bs: null,\n        anomaly_dbp: null,\n        anomaly_hr: null,\n        anomaly_sbp: null,\n        riskLevel: null,\n    });\n    console.log(apiResult);\n    // const [riskLevel, setRiskLevel] = useState('');\n\n\n\n    const handleAgeChange = (e) => {\n        if (isNaN(age)) {\n            alert('Please enter a numerical value');\n        } else {\n            setAge(e.target.value);\n        }\n    }\n\n    const handleSystolicBPChange = (e) => {\n        if (isNaN(systolicBP)) {\n            alert('Please enter a numerical value');\n        } else {\n            setSystolicBP(e.target.value);\n        }\n    }\n\n    const handleDiastolicBPChange = (e) => {\n        if (isNaN(diastolicBP)) {\n            alert('Please enter a numerical value');\n        } else {\n            setDiastolicBP(e.target.value);\n        }\n    }\n\n    const handleBSChange = (e) => {\n        if (isNaN(bs)) {\n            alert('Please enter a numerical value');\n        } else {\n            setBS(e.target.value);\n        }\n    }\n\n    const handleBodyTempChange = (e) => {\n        if (isNaN(bodyTemp)) {\n            alert('Please enter a numerical value');\n        } else {\n            setBodyTemp(e.target.value);\n        }\n    }\n\n    const handleHeartRateChange = (e) => {\n        if (isNaN(heartRate)) {\n            alert('Please enter a numerical value');\n        } else {\n            setHeartRate(e.target.value);\n        }\n    }\n\n    // const handleRiskLevelChange = (e) => {\n    //     if(isNaN(riskLevel)){\n    //         alert('Please enter a numerical value');\n    //     } else {\n    //         setRiskLevel(e.target.value);\n    //     }\n    // }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n        console.log('An entry was submitted with the Age: ' + age + ', SystolicBP: ' + systolicBP + ', DiastolicBP: ' +\n            diastolicBP + \", Blood Sugar: \" + bs + \", Body Temperature: \" + bodyTemp + \", Heart Rate: \" + heartRate);\n        const response = await axios.post('http://localhost:4000/predict',\n            {\n                age: age,\n                systolicBP,\n                diastolicBP,\n                BS: bs,\n                bodyTemp,\n                heartRate,\n                // riskLevel\n            });\n        console.log(response.data);\n        setApiResult(response.data);\n        props.refresh(prev=>!prev);\n    }\n\n    return (\n        <>\n            <form id=\"entryForm\" onSubmit={(e) => { handleSubmit(e) }}>\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <div className=\"input-group mb-2\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">Age </span>\n                            </div>\n                            <input type=\"text\" className=\"form-control\" value={age} required onChange={(e) => { handleAgeChange(e) }}  />\n                        </div>\n\n                        <div className=\"input-group mb-2\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">Systolic BP</span>\n                            </div>\n                            <input type=\"text\" className = \"form-control\" value={systolicBP} required onChange={(e) => { handleSystolicBPChange(e) }} />\n                        </div>\n\n                        <div className=\"input-group mb-2\">\n                            <div className=\"input-group-prepend \">\n                                <span className=\"input-group-text\">Diastolic BP</span>\n                            </div>\n                            <input type=\"text\" className = \"form-control\" value={diastolicBP} required onChange={(e) => { handleDiastolicBPChange(e) }} />\n                        </div>\n                    </div>\n\n                    <div className=\"col-6\">\n                        <div className=\"input-group mb-2\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">Blood Sugar</span>\n                            </div>\n                            <input type=\"text\" className = \"form-control\" value={bs} required onChange={(e) => { handleBSChange(e) }} />\n                        </div>\n\n                        <div className=\"input-group mb-2\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">Body Temperature</span>\n                            </div>\n                            <input type=\"text\" className = \"form-control\" value={bodyTemp} required onChange={(e) => { handleBodyTempChange(e) }} />\n                            {apiResult.anomaly_sbp == -1 && <div className=\"feedback-invalid\">!!</div>}\n                        </div>\n\n                        <div className=\"input-group mb-2\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">Heart Rate</span>\n                            </div>\n                            <input type=\"text\" className = \"form-control\" value={heartRate} required onChange={(e) => { handleHeartRateChange(e) }} />\n                        </div>\n\n                    </div>\n                </div>\n\n                <h6>Health Data Submission Form{breakline}</h6><br />\n\n                <br /><label>\n                    RiskLevel:\n                </label><br />\n                {apiResult.riskLevel}<br />\n\n\n                <br /><input id=\"submitBtn\" type=\"submit\" value=\"Submit\" />\n            </form>\n        </>\n    )\n}\n\nexport default EntryForm;","import { useState } from \"react\";\nimport React from 'react';\n\nfunction WelcomeHeader(props) {\n    return (\n        <>\n        <h5><center>Welcome to the 2022 Aspire T20 Project!</center></h5>\n            <br />\n                <div id=\"names\">\n                    <p>by </p>\n                    <p id=\"aayushi\">Aayushi</p>\n                    <p id=\"ana\">Anahita</p>\n                    <p id=\"ashwin\">Ashwin </p>\n                    <p id=\"mel\">Melody  </p>\n                    <p id=\"rachel\">Rachel </p>\n                    <p>and </p>\n                    <p id=\"zach\">Zach</p>\n                </div>\n        </>\n    )\n}\n\nexport default WelcomeHeader;","import { useState } from \"react\";\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { msalConfig, b2cPolicies } from \"../msal/authConfig\"\nimport React from 'react';\n\nfunction NavBar(props) {\n    const NavigationBar = () => {\n        /**\n         * useMsal is hook that returns the PublicClientApplication instance, \n         * an array of all accounts currently signed in and an inProgress value \n         * that tells you what msal is currently doing. For more, visit:\n         * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n         */\n        const { instance } = useMsal();\n        \n        const handleLogin = () => {\n            instance.loginPopup(loginRequest)\n                .catch((error) => console.log(error))\n        }\n    \n        return (\n            <>        \n                <AuthenticatedTemplate>\n                    <div className=\"navLinks\">\n                        <Button variant=\"secondary\" onClick=\"location.href='https://github.com/anahitaafsh/t20'\">Github</Button>\n                    </div>\n                    <div className=\"ml-auto\">\n                        <Button variant=\"info\" onClick={() => instance.loginPopup(b2cPolicies.authorities.editProfile)} className=\"ml-auto\">Edit Profile</Button>\n                        <DropdownButton variant=\"warning\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\n                            <Dropdown.Item as=\"button\" onClick={() => instance.logoutPopup({ postLogoutRedirectUri: \"/\", mainWindowRedirectUri: \"/\" })}>Sign out using Popup</Dropdown.Item>\n                            <Dropdown.Item as=\"button\" onClick={() => instance.logoutRedirect({ postLogoutRedirectUri: \"/\" })}>Sign out using Redirect</Dropdown.Item>\n                        </DropdownButton>\n                    </div>\n                </AuthenticatedTemplate>\n                <UnauthenticatedTemplate>\n                    <div className=\"navLinks\">\n                        <Button variant=\"secondary\" onClick=\"location.href='https://github.com/anahitaafsh/t20'\">Github</Button>\n                    </div>\n                    <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\n                        <Dropdown.Item as=\"button\" onClick={handleLogin}>Sign in using Popup</Dropdown.Item>\n                        <Dropdown.Item as=\"button\" onClick={() => instance.loginRedirect(loginRequest)}>Sign in using Redirect</Dropdown.Item>\n                    </DropdownButton>\n                </UnauthenticatedTemplate>\n            </>\n        );\n    };\n\n    return (\n        <>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <a className=\"navbar-brand\" href=\"/\">2022 Aspire T20 Project</a>\n                <Nav.Item><Nav.Link href = \"/\">Home</Nav.Link></Nav.Item>\n                <Nav.Item><Nav.Link href = \"https://github.com/anahitaafsh/t20\">GitHub</Nav.Link></Nav.Item>\n                {/* <NavigationBar /> */}\n            </Navbar>\n        </>\n    )\n}\n\nexport default NavBar;","import { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { API_BASE } from \"../../configs\";\n\n\nconst Row = (r)=>{\n    return <tr>\n        <td>{r.id}</td>\n        <td>{r.age}</td>\n        <td>{r.systolicBP}</td>\n        <td>{r.diastolicBP}</td>\n        <td>{r.BS}</td>\n        <td>{r.bodyTemp}</td>\n        <td>{r.heartRate}</td>\n    </tr>\n}\n\nconst ResultTable = (props)=>{\n    const [results, setResults] = useState([]);\n    const refresh = props.refresh\n    useEffect(async()=>{\n        const r = await fetch(API_BASE+'/maternal');\n        const tbl = await r.json();\n        setResults(tbl);\n    },[refresh]);\n\n    return <>\n    <div className=\"row p-4\">\n    <div className=\"col-12\">\n    <table className=\"table table-striped\">\n        <thead>\n            <th>ID</th>\n            <th>Age</th>\n            <th>Systolic Blood Pressure</th>\n            <th>Diastolic Blood Pressure</th>\n            <th>Blood Sugar</th>\n            <th>Body Temperature</th>\n            <th>Heart Rate</th>\n        </thead>\n        <tbody>\n            {results.map(r=>Row(r))}\n        </tbody>\n    </table>\n    </div>\n    </div>\n    </>\n}\n\nexport default ResultTable;","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport { Navbar, Button, Dropdown, DropdownButton, Nav} from \"react-bootstrap\";\nimport { useState } from \"react\";\n\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { loginRequest, b2cPolicies } from \"./components/msal/authConfig\";\nimport IdTokenClaims from \"./components/msal/idTokenClaims\";\n\nimport EntryForm from \"./components/entryForm\";\nimport WelcomeHeader from \"./components/layout/welcomeHeader\";\nimport NavBar from \"./components/layout/navigation\";\nimport ResultTable from \"./components/layout/result-table\";\n\nexport const PageLayout = (props) => {\n    console.log(props);\n    const [refresh, setRefresh]=useState(false);\n\n    return (\n        <>\n            <WelcomeHeader/>\n            <EntryForm refresh={setRefresh}/>\n            <ResultTable refresh={refresh}/>\n        </>\n    );\n};\n\n","import React, { useState, useEffect } from \"react\";\n\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\n\nimport { msalConfig, b2cPolicies } from \"./components/msal/authConfig\";\nimport { PageLayout } from \"./ui.jsx\";\nimport IdTokenClaims from \"./components//msal/idTokenClaims\";\n\nimport Button from \"react-bootstrap/Button\";\nimport \"./styles/App.css\";\n\nconst IdTokenContent = () => {\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { accounts } = useMsal();\n    const [idTokenClaims, setIdTokenClaims] = useState(null);\n\n    function GetIdTokenClaims() {\n        setIdTokenClaims(accounts[0].idTokenClaims)\n    }\n\n    return (\n        <>\n            <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\n            {idTokenClaims ?\n                <IdTokenClaims idTokenClaims={idTokenClaims} />\n                :\n                <Button variant=\"secondary\" onClick={GetIdTokenClaims}>View ID Token Claims</Button>\n            }\n        </>\n    );\n};\n\n/**\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \n * only render their children if a user is authenticated or unauthenticated, respectively.\n */\nconst MainContent = () => {\n\n    const { instance } = useMsal();\n\n    /**\n     * Using the event API, you can register an event callback that will do something when an event is emitted. \n     * When registering an event callback in a react component you will need to make sure you do 2 things.\n     * 1) The callback is registered only once\n     * 2) The callback is unregistered before the component unmounts.\n     * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n     */\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((event) => {\n            if (event.eventType === EventType.LOGIN_FAILURE) {\n                if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n                    if (event.interactionType === InteractionType.Redirect) {\n                        instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n                    } else if (event.interactionType === InteractionType.Popup) {\n                        instance.loginPopup(b2cPolicies.authorities.forgotPassword)\n                            .catch(e => {\n                                return;\n                            });\n                    }\n                }\n            }\n\n            if (event.eventType === EventType.LOGIN_SUCCESS) {\n                if (event?.payload) {\n                    /**\n                     * We need to reject id tokens that were not issued with the default sign-in policy.\n                     * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n                     * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n                     */\n                    if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n                        window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password\");\n                        return instance.logout();\n                    }\n                }\n            }\n        });\n\n        return () => {\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <AuthenticatedTemplate>\n                <IdTokenContent />\n            </AuthenticatedTemplate>\n\n            <UnauthenticatedTemplate>\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\n            </UnauthenticatedTemplate>\n        </div>\n    );\n};\n\n/**\n * msal-react is built on the React context API and all parts of your app that require authentication must be \n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport default function App({msalInstance}) {\n\n    return (\n        <MsalProvider instance={msalInstance}>\n            <PageLayout>\n                <MainContent />\n            </PageLayout>\n        </MsalProvider>\n    );\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nimport App from \"./App.jsx\";\nimport { msalConfig } from \"./components/msal/authConfig\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n\n/**\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\nReactDOM.render(\n    <React.StrictMode>\n        <App msalInstance={msalInstance}/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}