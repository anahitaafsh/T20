{"version":3,"sources":["authConfig.js","ui.jsx","components/user/component1.jsx","components/user/component2.jsx","App.jsx","index.js"],"names":["b2cPolicies","signUpSignIn","forgotPassword","editProfile","authority","msalConfig","auth","clientId","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","NavigationBar","instance","useMsal","class","Button","variant","onClick","className","loginPopup","DropdownButton","drop","title","Dropdown","Item","as","logoutPopup","mainWindowRedirectUri","logoutRedirect","catch","log","loginRedirect","PageLayout","props","Navbar","bg","href","id","children","type","IdTokenClaims","idTokenClaims","aud","iss","oid","preferred_username","Component1","Component2","state","data","default","fetch","then","res","json","setState","this","handleFetch","x","JSON","stringify","React","Component","IdTokenContent","accounts","useState","setIdTokenClaims","name","MainContent","useEffect","callbackId","addEventCallback","event","eventType","EventType","LOGIN_FAILURE","errorMessage","indexOf","interactionType","InteractionType","Redirect","Popup","e","LOGIN_SUCCESS","payload","window","alert","logout","removeEventCallback","App","msalInstance","y","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1a8bbce.chunk.js","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**tenant\n * Enter here the user flows and custom policies for your B2C application\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\n */\nexport const b2cPolicies = {\n    names: {\n        signUpSignIn: \"B2C_1_t20signupsignin\",\n        forgotPassword: \"b2c_1_reset\",\n        editProfile: \"b2c_1_edit_profile\"\n    },\n    authorities: {\n        signUpSignIn: {\n            authority: \"https://t20b2c.b2clogin.com/t20b2c.onmicrosoft.com/B2C_1_t20signupsignin\",\n        },\n        forgotPassword: {\n            authority: \"https://t20b2c.b2clogin.com/t20b2c.onmicrosoft.com/b2c_1_reset\",\n        },\n        editProfile: {\n            authority: \"https://t20b2c.b2clogin.com/t20b2c.onmicrosoft.com/b2c_1_edit_profile\"\n        }\n    },\n    authorityDomain: \"t20b2c.b2clogin.com\"\n}\n\n/**\n * Configuration object to be passed to MSAL instance on creation. \n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \n */\nexport const msalConfig = {\n    auth: {\n        clientId: \"dfc41c62-bb90-4d3b-adc2-b837b9569f71\", // This is the ONLY mandatory field that you need to supply.\n        authority: b2cPolicies.authorities.signUpSignIn.authority, // Use a sign-up/sign-in user-flow as a default authority\n        knownAuthorities: [b2cPolicies.authorityDomain], // Mark your B2C tenant's domain as trusted.\n        redirectUri: \"/\", // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n        postLogoutRedirectUri: \"/\", // Indicates the page to navigate after logout.\n        navigateToLoginRequestUrl: false, // If \"true\", will navigate back to the original request location before processing the auth code response.\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    },\n    system: {\t\n        loggerOptions: {\t\n            loggerCallback: (level, message, containsPii) => {\t\n                if (containsPii) {\t\t\n                    return;\t\t\n                }\t\t\n                switch (level) {\t\t\n                    case LogLevel.Error:\t\t\n                        console.error(message);\t\t\n                        return;\t\t\n                    case LogLevel.Info:\t\t\n                        console.info(message);\t\t\n                        return;\t\t\n                    case LogLevel.Verbose:\t\t\n                        console.debug(message);\t\t\n                        return;\t\t\n                    case LogLevel.Warning:\t\t\n                        console.warn(message);\t\t\n                        return;\t\t\n                }\t\n            }\t\n        }\t\n    }\n};\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit: \n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = {\n    scopes: []\n};\n\n/**\n * An optional silentRequest object can be used to achieve silent SSO\n * between applications by providing a \"login_hint\" property.\n */\nexport const silentRequest = {\n  scopes: [\"openid\", \"profile\"],\n  loginHint: \"example@domain.net\"\n};","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\n\nimport { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\n\nimport { Navbar, Button, Dropdown, DropdownButton} from \"react-bootstrap\";\n\nimport { loginRequest, b2cPolicies } from \"./authConfig\";\n\nconst NavigationBar = () => {\n\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { instance } = useMsal();\n    \n    const handleLogin = () => {\n        instance.loginPopup(loginRequest)\n            .catch((error) => console.log(error))\n    }\n\n    return (\n        <>\n            <AuthenticatedTemplate>\n                <div class=\"navLinks\">\n                    <Button variant=\"secondary\" onClick=\"location.href='https://github.com/anahitaafsh/t20'\">Github</Button>\n                </div>\n                <div className=\"ml-auto\">\n                    <Button variant=\"info\" onClick={() => instance.loginPopup(b2cPolicies.authorities.editProfile)} className=\"ml-auto\">Edit Profile</Button>\n                    <DropdownButton variant=\"warning\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\n                        <Dropdown.Item as=\"button\" onClick={() => instance.logoutPopup({ postLogoutRedirectUri: \"/\", mainWindowRedirectUri: \"/\" })}>Sign out using Popup</Dropdown.Item>\n                        <Dropdown.Item as=\"button\" onClick={() => instance.logoutRedirect({ postLogoutRedirectUri: \"/\" })}>Sign out using Redirect</Dropdown.Item>\n                    </DropdownButton>\n                </div>\n            </AuthenticatedTemplate>\n            <UnauthenticatedTemplate>\n                <div class=\"navLinks\">\n                    <Button variant=\"secondary\" onClick=\"location.href='https://github.com/anahitaafsh/t20'\">Github</Button>\n                </div>\n                <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\n                    <Dropdown.Item as=\"button\" onClick={handleLogin}>Sign in using Popup</Dropdown.Item>\n                    <Dropdown.Item as=\"button\" onClick={() => instance.loginRedirect(loginRequest)}>Sign in using Redirect</Dropdown.Item>\n                </DropdownButton>\n            </UnauthenticatedTemplate>\n        </>\n    );\n};\n\nexport const PageLayout = (props) => {\n    return (\n        <>\n            <Navbar bg=\"primary\" variant=\"dark\">\n                <a className=\"navbar-brand\" href=\"/\">2022 Aspire T20 Project</a>\n                <NavigationBar />\n            </Navbar>\n            <br />\n            <h5><center>Welcome to the 2022 Aspire T20 Project!</center></h5>\n            <br />\n            <div id=\"names\">\n                <p>by </p>\n                <p id=\"aayushi\">Aayushi</p>\n                <p id=\"ana\">Anahita</p>\n                <p id=\"ashwin\">Ashwin </p>\n                <p id=\"mel\">Melody  </p>\n                <p id=\"rachel\">Rachel </p>\n                <p>and </p>\n                <p id=\"zach\">Zach</p>\n            </div>\n            {props.children}\n            <br />\n            \n            <h6>Project Steps </h6>\n                <label class=\"container\" id=\"ana\">Deploy to App Service\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"mel\">Find Dataset\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"ashwin\">Create frontend\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"zach\">Authenticate users with Azure AD\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"rachel\">Clean and trim data\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"aayushi\">Connect to IoT\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"mel\">Connect to Database\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n                <label class=\"container\" id=\"ana\">Continuous Deployment with Github\n                    <input type=\"checkbox\"/><span class=\"checkmark\"></span>\n                </label>\n        </>\n    );\n};\n\nexport const IdTokenClaims = (props) => {\n    return (\n        <div id=\"token-div\">\n            <p><strong>Audience: </strong> {props.idTokenClaims.aud}</p>\n            <p><strong>Issuer: </strong> {props.idTokenClaims.iss}</p>\n            <p><strong>OID: </strong> {props.idTokenClaims.oid}</p>\n            <p><strong>UPN: </strong> {props.idTokenClaims.preferred_username}</p>\n        </div>\n    );\n}","import {useState} from 'react';\n\nfunction Component1(props) {\n    console.log(props);\n    const lat = '52.52';\n    const lng = '13.41';\n    let [data, setData] = useState({'default':1});\n    // fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lng}&hourly=temperature_2m`)\n    // .then( res=>res.json() )\n    // .then(obj=>{\n    //     //data=obj\n    //     setData(obj)\n    // });\n    \n\n    return(\n        <div>hello world, {props.x}\n        <pre>{JSON.stringify(data)}</pre>\n        </div>\n    )\n}\n\nexport default Component1;","import React from 'react'\n\nclass Component2 extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            data:{default:1}\n        };\n    }\n\n    handleFetch(){\n        fetch(`https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m`)\n    .then( res=>res.json() )\n    .then( data =>{\n        this.setState({data})\n    });\n    }\n\n    componentDidMount(){\n        console.log('didMount!')\n        this.handleFetch();\n    }\n\n    componentDidUpdate(){\n        \n    }\n\n    render(){\n        return(\n            <div>hello comp2, {this.props.x}\n            <pre>{JSON.stringify(this.state.data)}</pre>\n            </div>\n        )\n    }\n}\n\nexport default Component2","import React, { useState, useEffect } from \"react\";\n\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\n\nimport { msalConfig, b2cPolicies } from \"./authConfig\";\nimport { PageLayout, IdTokenClaims } from \"./ui.jsx\";\nimport Component1 from \"./components/user/component1.jsx\";\nimport Component2 from \"./components/user/component2.jsx\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./styles/App.css\";\n\nconst IdTokenContent = () => {\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { accounts } = useMsal();\n    const [idTokenClaims, setIdTokenClaims] = useState(null);\n\n    function GetIdTokenClaims() {\n        setIdTokenClaims(accounts[0].idTokenClaims)\n    }\n\n    return (\n        <>\n            <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\n            {idTokenClaims ?\n                <IdTokenClaims idTokenClaims={idTokenClaims} />\n                :\n                <Button variant=\"secondary\" onClick={GetIdTokenClaims}>View ID Token Claims</Button>\n            }\n        </>\n    );\n};\n\n/**\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \n * only render their children if a user is authenticated or unauthenticated, respectively.\n */\nconst MainContent = () => {\n\n    const { instance } = useMsal();\n\n    /**\n     * Using the event API, you can register an event callback that will do something when an event is emitted. \n     * When registering an event callback in a react component you will need to make sure you do 2 things.\n     * 1) The callback is registered only once\n     * 2) The callback is unregistered before the component unmounts.\n     * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n     */\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((event) => {\n            if (event.eventType === EventType.LOGIN_FAILURE) {\n                if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n                    if (event.interactionType === InteractionType.Redirect) {\n                        instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n                    } else if (event.interactionType === InteractionType.Popup) {\n                        instance.loginPopup(b2cPolicies.authorities.forgotPassword)\n                            .catch(e => {\n                                return;\n                            });\n                    }\n                }\n            }\n\n            if (event.eventType === EventType.LOGIN_SUCCESS) {\n                if (event?.payload) {\n                    /**\n                     * We need to reject id tokens that were not issued with the default sign-in policy.\n                     * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n                     * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n                     */\n                    if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n                        window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password\");\n                        return instance.logout();\n                    }\n                }\n            }\n        });\n\n        return () => {\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <AuthenticatedTemplate>\n                <IdTokenContent />\n            </AuthenticatedTemplate>\n\n            <UnauthenticatedTemplate>\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\n            </UnauthenticatedTemplate>\n        </div>\n    );\n};\n\n/**\n * msal-react is built on the React context API and all parts of your app that require authentication must be \n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport default function App({msalInstance}) {\n    let name = 'Microsoft';\n    let arr = ['Microsoft','Google','Apple'];\n\n\n    return (\n        <div>\n         \n        Hello from App.jsx\n        \n              <Component2 x={name} y=\"5\"/>  \n         \n         <MsalProvider instance={msalInstance}>\n            <PageLayout>\n                <MainContent />\n            </PageLayout>\n</MsalProvider>  \n        </div>\n\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nimport App from \"./App.jsx\";\nimport { msalConfig } from \"./authConfig\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n\n/**\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\nReactDOM.render(\n    <React.StrictMode>\n        <App msalInstance={msalInstance}/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}