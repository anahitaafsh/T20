{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { CredentialType, CacheType, Constants as Constants$1, Separators } from '../../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      oboAssertion: access token passed in as part of OBO request\r\n * }\r\n */\n\nvar CredentialEntity =\n/** @class */\nfunction () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n\n\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n\n\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n\n\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n\n\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n\n\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n\n      case CredentialType.ACCESS_TOKEN:\n        return CacheType.ACCESS_TOKEN;\n\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n\n      default:\n        {\n          throw ClientAuthError$1.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * helper function to return `CredentialType`\r\n   * @param key\r\n   */\n\n\n  CredentialEntity.getCredentialType = function (key) {\n    // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\n    if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\n      // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\n      if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\n        return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n      }\n\n      return CredentialType.ACCESS_TOKEN;\n    } else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\n      return CredentialType.ID_TOKEN;\n    } else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\n      return CredentialType.REFRESH_TOKEN;\n    }\n\n    return Constants$1.NOT_DEFINED;\n  };\n  /**\r\n   * generates credential key\r\n   */\n\n\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n\n\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n\n\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || \"\"];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n\n\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || \"\").toLowerCase();\n  };\n\n  return CredentialEntity;\n}();\n\nexport { CredentialEntity };","map":{"version":3,"mappings":"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","names":["CredentialEntity","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTargetForCacheKey","target","generateCredentialCacheKey","CredentialType","ID_TOKEN","CacheType","ACCESS_TOKEN","REFRESH_TOKEN","ClientAuthError","createUnexpectedCredentialTypeError","key","indexOf","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","Constants","NOT_DEFINED","credentialKey","join","Separators","CACHE_KEY_SEPARATOR","accountId","clientOrFamilyId","credentialId","scopes"],"sources":["../../../src/cache/entities/CredentialEntity.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Separators, CredentialType, CacheType, Constants } from \"../../utils/Constants\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\n\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      oboAssertion: access token passed in as part of OBO request\r\n * }\r\n */\r\nexport class CredentialEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    credentialType: CredentialType;\r\n    clientId: string;\r\n    secret: string;\r\n    familyId?: string;\r\n    realm?: string;\r\n    target?: string;\r\n    oboAssertion?: string;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    }\r\n\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    generateCredentialId(): string {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    generateTarget(): string {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    generateCredentialKey(): string {\r\n        return CredentialEntity.generateCredentialCacheKey(\r\n            this.homeAccountId,\r\n            this.environment,\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.target,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    generateType(): number {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * helper function to return `CredentialType`\r\n     * @param key\r\n     */\r\n    static getCredentialType(key: string): string {\r\n        // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\r\n        if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\r\n            // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\r\n            if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\r\n                return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            }\r\n            return CredentialType.ACCESS_TOKEN;\r\n        } else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\r\n            return CredentialType.ID_TOKEN;\r\n        } else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\r\n            return CredentialType.REFRESH_TOKEN;\r\n        }\r\n\r\n        return Constants.NOT_DEFINED;\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    static generateCredentialCacheKey(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        target?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n        ];\r\n\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    private static generateAccountIdForCacheKey(\r\n        homeAccountId: string,\r\n        environment: string\r\n    ): string {\r\n        const accountId: Array<string> = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    private static generateCredentialIdForCacheKey(\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const clientOrFamilyId =\r\n            credentialType === CredentialType.REFRESH_TOKEN\r\n                ? familyId || clientId\r\n                : clientId;\r\n        const credentialId: Array<string> = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || \"\",\r\n        ];\r\n\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    private static generateTargetForCacheKey(scopes?: string): string {\r\n        return (scopes || \"\").toLowerCase();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}