{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.js';\nimport { TimeUtils as TimeUtils$1 } from '../../utils/TimeUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar AuthorityMetadataEntity =\n/** @class */\nfunction () {\n  function AuthorityMetadataEntity() {\n    this.expiresAt = TimeUtils$1.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  }\n  /**\r\n   * Update the entity with new aliases, preferred_cache and preferred_network values\r\n   * @param metadata\r\n   * @param fromNetwork\r\n   */\n\n\n  AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {\n    this.aliases = metadata.aliases;\n    this.preferred_cache = metadata.preferred_cache;\n    this.preferred_network = metadata.preferred_network;\n    this.aliasesFromNetwork = fromNetwork;\n  };\n  /**\r\n   * Update the entity with new endpoints\r\n   * @param metadata\r\n   * @param fromNetwork\r\n   */\n\n\n  AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {\n    this.authorization_endpoint = metadata.authorization_endpoint;\n    this.token_endpoint = metadata.token_endpoint;\n    this.end_session_endpoint = metadata.end_session_endpoint;\n    this.issuer = metadata.issuer;\n    this.endpointsFromNetwork = fromNetwork;\n  };\n  /**\r\n   * Save the authority that was used to create this cache entry\r\n   * @param authority\r\n   */\n\n\n  AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {\n    this.canonical_authority = authority;\n  };\n  /**\r\n   * Reset the exiresAt value\r\n   */\n\n\n  AuthorityMetadataEntity.prototype.resetExpiresAt = function () {\n    this.expiresAt = TimeUtils$1.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\n  };\n  /**\r\n   * Returns whether or not the data needs to be refreshed\r\n   */\n\n\n  AuthorityMetadataEntity.prototype.isExpired = function () {\n    return this.expiresAt <= TimeUtils$1.nowSeconds();\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 && entity.hasOwnProperty(\"aliases\") && entity.hasOwnProperty(\"preferred_cache\") && entity.hasOwnProperty(\"preferred_network\") && entity.hasOwnProperty(\"canonical_authority\") && entity.hasOwnProperty(\"authorization_endpoint\") && entity.hasOwnProperty(\"token_endpoint\") && entity.hasOwnProperty(\"end_session_endpoint\") && entity.hasOwnProperty(\"issuer\") && entity.hasOwnProperty(\"aliasesFromNetwork\") && entity.hasOwnProperty(\"endpointsFromNetwork\") && entity.hasOwnProperty(\"expiresAt\");\n  };\n\n  return AuthorityMetadataEntity;\n}();\n\nexport { AuthorityMetadataEntity };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;EAuBI;IACI,KAAKA,SAAL,GAAiBC,WAAS,CAACC,UAAVD,KAAyBE,4BAA4B,CAACC,oBAAvE;EACH;;;;;;;;EAODC,2EAA6BC,QAA7B,EAA+DC,WAA/D,EAAmF;IAC/E,KAAKC,OAAL,GAAeF,QAAQ,CAACE,OAAxB;IACA,KAAKC,eAAL,GAAuBH,QAAQ,CAACG,eAAhC;IACA,KAAKC,iBAAL,GAAyBJ,QAAQ,CAACI,iBAAlC;IACA,KAAKC,kBAAL,GAA0BJ,WAA1B;EACH,CALD;;;;;;;;EAYAF,qEAAuBC,QAAvB,EAAuDC,WAAvD,EAA2E;IACvE,KAAKK,sBAAL,GAA8BN,QAAQ,CAACM,sBAAvC;IACA,KAAKC,cAAL,GAAsBP,QAAQ,CAACO,cAA/B;IACA,KAAKC,oBAAL,GAA4BR,QAAQ,CAACQ,oBAArC;IACA,KAAKC,MAAL,GAAcT,QAAQ,CAACS,MAAvB;IACA,KAAKC,oBAAL,GAA4BT,WAA5B;EACH,CAND;;;;;;;EAYAF,uEAAyBY,SAAzB,EAA0C;IACtC,KAAKC,mBAAL,GAA2BD,SAA3B;EACH,CAFD;;;;;;EAOAZ;IACI,KAAKL,SAAL,GAAiBC,WAAS,CAACC,UAAVD,KAAyBE,4BAA4B,CAACC,oBAAvE;EACH,CAFD;;;;;;EAOAC;IACI,OAAO,KAAKL,SAAL,IAAkBC,WAAS,CAACC,UAAVD,EAAzB;EACH,CAFD;;;;;;;EAQOI,oDAAP,UAAiCc,GAAjC,EAA8CC,MAA9C,EAA4D;IAExD,IAAI,CAACA,MAAL,EAAa;MACT,OAAO,KAAP;IACH;;IAED,OACID,GAAG,CAACE,OAAJ,CAAYlB,4BAA4B,CAACmB,SAAzC,MAAwD,CAAxD,IACAF,MAAM,CAACG,cAAP,CAAsB,SAAtB,CADA,IAEAH,MAAM,CAACG,cAAP,CAAsB,iBAAtB,CAFA,IAGAH,MAAM,CAACG,cAAP,CAAsB,mBAAtB,CAHA,IAIAH,MAAM,CAACG,cAAP,CAAsB,qBAAtB,CAJA,IAKAH,MAAM,CAACG,cAAP,CAAsB,wBAAtB,CALA,IAMAH,MAAM,CAACG,cAAP,CAAsB,gBAAtB,CANA,IAOAH,MAAM,CAACG,cAAP,CAAsB,sBAAtB,CAPA,IAQAH,MAAM,CAACG,cAAP,CAAsB,QAAtB,CARA,IASAH,MAAM,CAACG,cAAP,CAAsB,oBAAtB,CATA,IAUAH,MAAM,CAACG,cAAP,CAAsB,sBAAtB,CAVA,IAWAH,MAAM,CAACG,cAAP,CAAsB,WAAtB,CAZJ;EAcH,CApBM;;EAqBX;AAAC","names":["expiresAt","TimeUtils","nowSeconds","AUTHORITY_METADATA_CONSTANTS","REFRESH_TIME_SECONDS","AuthorityMetadataEntity","metadata","fromNetwork","aliases","preferred_cache","preferred_network","aliasesFromNetwork","authorization_endpoint","token_endpoint","end_session_endpoint","issuer","endpointsFromNetwork","authority","canonical_authority","key","entity","indexOf","CACHE_KEY","hasOwnProperty"],"sources":["../../../src/cache/entities/AuthorityMetadataEntity.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CloudDiscoveryMetadata } from \"../../authority/CloudDiscoveryMetadata\";\r\nimport { OpenIdConfigResponse } from \"../../authority/OpenIdConfigResponse\";\r\nimport { AUTHORITY_METADATA_CONSTANTS } from \"../../utils/Constants\";\r\nimport { TimeUtils } from \"../../utils/TimeUtils\";\r\n\r\nexport class AuthorityMetadataEntity {\r\n    aliases: Array<string>;\r\n    preferred_cache: string;\r\n    preferred_network: string;\r\n    canonical_authority: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    end_session_endpoint: string;\r\n    issuer: string;\r\n    aliasesFromNetwork: boolean;\r\n    endpointsFromNetwork: boolean;\r\n    expiresAt: number;\r\n\r\n    constructor() {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    }\r\n\r\n    /**\r\n     * Update the entity with new aliases, preferred_cache and preferred_network values\r\n     * @param metadata \r\n     * @param fromNetwork \r\n     */\r\n    updateCloudDiscoveryMetadata(metadata: CloudDiscoveryMetadata, fromNetwork: boolean): void {\r\n        this.aliases = metadata.aliases;\r\n        this.preferred_cache = metadata.preferred_cache;\r\n        this.preferred_network = metadata.preferred_network;\r\n        this.aliasesFromNetwork = fromNetwork;\r\n    }\r\n\r\n    /**\r\n     * Update the entity with new endpoints\r\n     * @param metadata \r\n     * @param fromNetwork \r\n     */\r\n    updateEndpointMetadata(metadata: OpenIdConfigResponse, fromNetwork: boolean): void {\r\n        this.authorization_endpoint = metadata.authorization_endpoint;\r\n        this.token_endpoint = metadata.token_endpoint;\r\n        this.end_session_endpoint = metadata.end_session_endpoint;\r\n        this.issuer = metadata.issuer;\r\n        this.endpointsFromNetwork = fromNetwork;\r\n    }\r\n\r\n    /**\r\n     * Save the authority that was used to create this cache entry\r\n     * @param authority \r\n     */\r\n    updateCanonicalAuthority(authority: string): void {\r\n        this.canonical_authority = authority;\r\n    }\r\n\r\n    /**\r\n     * Reset the exiresAt value\r\n     */\r\n    resetExpiresAt(): void {\r\n        this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the data needs to be refreshed\r\n     */\r\n    isExpired(): boolean {\r\n        return this.expiresAt <= TimeUtils.nowSeconds();\r\n    }\r\n\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAuthorityMetadataEntity(key: string, entity: object): boolean {\r\n\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n            entity.hasOwnProperty(\"aliases\") &&\r\n            entity.hasOwnProperty(\"preferred_cache\") &&\r\n            entity.hasOwnProperty(\"preferred_network\") &&\r\n            entity.hasOwnProperty(\"canonical_authority\") &&\r\n            entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n            entity.hasOwnProperty(\"token_endpoint\") &&\r\n            entity.hasOwnProperty(\"end_session_endpoint\") &&\r\n            entity.hasOwnProperty(\"issuer\") &&\r\n            entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n            entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n            entity.hasOwnProperty(\"expiresAt\")\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}