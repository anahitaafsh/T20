{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\n\nvar UsernamePasswordClient =\n/** @class */\nfunction (_super) {\n  __extends(UsernamePasswordClient, _super);\n\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2\n        /*return*/\n        , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return UsernamePasswordClient;\n}(BaseClient$1);\n\nexport { UsernamePasswordClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","UsernamePasswordClient","request","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","thumbprint","canonicalAuthority","scopes","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","claims","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["../../src/client/UsernamePasswordClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType } from \"../utils/Constants\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\n\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nexport class UsernamePasswordClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"in acquireToken call\");\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes\r\n        };\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\r\n            credential: request.username,\r\n            type: CcsCredentialType.UPN\r\n        });\r\n\r\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}