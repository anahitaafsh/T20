{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * @hidden\r\n */\n\nvar StringUtils =\n/** @class */\nfunction () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n\n\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError$1.createTokenNullOrEmptyError(authToken);\n    }\n\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError$1.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n\n\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n\n\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n\n    return true;\n  };\n\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n\n\n  StringUtils.queryStringToObject = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n\n    var decode = function (s) {\n      return decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\n    };\n\n    var obj = {};\n    match = search.exec(query);\n\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n\n\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n\n\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n\n\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n\n\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\n    return regex.test(input);\n  };\n\n  return StringUtils;\n}();\n\nexport { StringUtils };","map":{"version":3,"mappings":"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","names":["StringUtils","authToken","isEmpty","ClientAuthError","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","strObj","obj","parse","Object","keys","e","search","indexOf","lastIndexOf","query","match","pl","decode","s","decodeURIComponent","replace","arr","map","trim","filter","entry","pattern","input","regex","RegExp","test"],"sources":["../../src/utils/StringUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        const matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\r\n        }\r\n        const crackedToken: DecodedAuthToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    }\r\n\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    static isEmpty(str?: string): boolean {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    }\r\n\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj \r\n     */\r\n    static isEmptyObj(strObj?: string): boolean {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            } catch (e) {}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static startsWith(str: string, search: string): boolean {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n\r\n    static endsWith(str: string, search: string): boolean {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    }\r\n\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject<T>(query: string): T {\r\n        let match: Array<string> | null; // Regex for replacing addition symbol with a space\r\n        const pl = /\\+/g;\r\n        const search = /([^&=]+)=([^&]*)/g;\r\n        const decode = (s: string): string => decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\r\n        const obj: {} = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj as T;\r\n    }\r\n\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr: Array<string>): Array<string> {\r\n        return arr.map(entry => entry.trim());\r\n    }\r\n\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\r\n        return arr.filter(entry => {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper<T>(str: string): T | null {\r\n        try {\r\n            return JSON.parse(str) as T;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern: string, input: string): boolean {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        const regex: RegExp = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\r\n\r\n        return regex.test(input);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}