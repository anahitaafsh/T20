{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { DEFAULT_REQUEST, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { name, version } from '../packageMetadata.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.logger.verbose(\"loginRedirect called\");\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(request || DEFAULT_REQUEST)];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    this.logger.verbose(\"loginPopup called\");\n    return this.acquireTokenPopup(request || DEFAULT_REQUEST);\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || \"\",\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\n          response = this.acquireTokenSilentAsync(request, account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var silentRequest, browserRequestLogger, serverTelemetryManager, silentAuthClient, cachedToken, tokenRenewalResult, tokenRenewalError_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            silentRequest = __assign(__assign(__assign({}, request), this.initializeBaseRequest(request)), {\n              account: account,\n              forceRefresh: request.forceRefresh || false\n            });\n            browserRequestLogger = this.logger.clone(name, version, silentRequest.correlationId);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 4,, 9]);\n\n            serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);\n            return [4\n            /*yield*/\n            , this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.correlationId)];\n\n          case 2:\n            silentAuthClient = _a.sent();\n            browserRequestLogger.verbose(\"Silent auth client created\");\n            return [4\n            /*yield*/\n            , silentAuthClient.acquireCachedToken(silentRequest)];\n\n          case 3:\n            cachedToken = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\n            return [2\n            /*return*/\n            , cachedToken];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , this.acquireTokenByRefreshToken(silentRequest)];\n\n          case 6:\n            tokenRenewalResult = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\n            return [2\n            /*return*/\n            , tokenRenewalResult];\n\n          case 7:\n            tokenRenewalError_1 = _a.sent();\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError_1);\n            throw tokenRenewalError_1;\n\n          case 8:\n            return [3\n            /*break*/\n            , 9];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","_this","activeSilentTokenRequests","Map","PublicClientApplication","request","logger","verbose","acquireTokenRedirect","DEFAULT_REQUEST","acquireTokenPopup","preflightBrowserEnvironmentCheck","InteractionType","Silent","correlationId","account","getActiveAccount","BrowserAuthError","createNoAccountError","thumbprint","clientId","config","auth","authority","scopes","homeAccountIdentifier","homeAccountId","silentRequestKey","JSON","stringify","cachedResponse","get","response","acquireTokenSilentAsync","then","result","delete","catch","error","set","silentRequest","initializeBaseRequest","forceRefresh","browserRequestLogger","clone","name","version","eventHandler","emitEvent","EventType","ACQUIRE_TOKEN_START","serverTelemetryManager","initializeServerTelemetryManager","ApiId","acquireTokenSilent_silentFlow","createSilentFlowClient","silentAuthClient","_a","acquireCachedToken","cachedToken","ACQUIRE_TOKEN_SUCCESS","acquireTokenByRefreshToken","tokenRenewalResult","ACQUIRE_TOKEN_FAILURE","tokenRenewalError_1","ClientApplication"],"sources":["../../src/app/PublicClientApplication.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountInfo, AuthenticationResult, CommonSilentFlowRequest, RequestThumbprint } from \"@azure/msal-common\";\r\nimport { Configuration } from \"../config/Configuration\";\r\nimport { DEFAULT_REQUEST, ApiId, InteractionType } from \"../utils/BrowserConstants\";\r\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\r\nimport { RedirectRequest } from \"../request/RedirectRequest\";\r\nimport { PopupRequest } from \"../request/PopupRequest\";\r\nimport { ClientApplication } from \"./ClientApplication\";\r\nimport { SilentRequest } from \"../request/SilentRequest\";\r\nimport { EventType } from \"../event/EventType\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { version, name } from \"../packageMetadata\";\r\n\r\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\r\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\r\n\r\n    // Active requests\r\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\r\n\r\n    /**\r\n     * @constructor\r\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n     *\r\n     * Important attributes in the Configuration object for auth are:\r\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n     * - authority: the authority URL for your application.\r\n     * - redirect_uri: the uri of your application registered in the portal.\r\n     *\r\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n     *\r\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n     * Full B2C functionality will be available in this library in future versions.\r\n     *\r\n     * @param configuration object for the MSAL PublicClientApplication instance\r\n     */\r\n    constructor(configuration: Configuration) {\r\n        super(configuration);\r\n\r\n        this.activeSilentTokenRequests = new Map();\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n     * any code that follows this function will not execute.\r\n     *\r\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n     *\r\n     * @param request\r\n     */\r\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\r\n        this.logger.verbose(\"loginRedirect called\");\r\n        return this.acquireTokenRedirect(request || DEFAULT_REQUEST);\r\n    }\r\n\r\n    /**\r\n     * Use when initiating the login process via opening a popup window in the user's browser\r\n     *\r\n     * @param request\r\n     *\r\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n     */\r\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\r\n        this.logger.verbose(\"loginPopup called\");\r\n        return this.acquireTokenPopup(request || DEFAULT_REQUEST);\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n     *\r\n     * @param {@link (SilentRequest:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n     */\r\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\r\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\r\n        this.logger.verbose(\"acquireTokenSilent called\", request.correlationId);\r\n        const account = request.account || this.getActiveAccount();\r\n        if (!account) {\r\n            throw BrowserAuthError.createNoAccountError();\r\n        }\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.auth.clientId,\r\n            authority: request.authority || \"\",\r\n            scopes: request.scopes,\r\n            homeAccountIdentifier: account.homeAccountId\r\n        };\r\n        const silentRequestKey = JSON.stringify(thumbprint);\r\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\r\n        if (typeof cachedResponse === \"undefined\") {\r\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", request.correlationId);\r\n            const response = this.acquireTokenSilentAsync(request, account)\r\n                .then((result) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    return result;\r\n                })\r\n                .catch((error) => {\r\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\r\n                    throw error;\r\n                });\r\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\r\n            return response;\r\n        } else {\r\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", request.correlationId);\r\n            return cachedResponse;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n     * @param {@link (SilentRequest:type)}\r\n     * @param {@link (AccountInfo:type)}\r\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} \r\n     */\r\n    private async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\r\n        const silentRequest: CommonSilentFlowRequest = {\r\n            ...request,\r\n            ...this.initializeBaseRequest(request),\r\n            account: account,\r\n            forceRefresh: request.forceRefresh || false\r\n        };\r\n        const browserRequestLogger = this.logger.clone(name, version, silentRequest.correlationId);\r\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\r\n        try {\r\n            // Telemetry manager only used to increment cacheHits here\r\n            const serverTelemetryManager = this.initializeServerTelemetryManager(ApiId.acquireTokenSilent_silentFlow, silentRequest.correlationId);\r\n            const silentAuthClient = await this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.correlationId);\r\n            browserRequestLogger.verbose(\"Silent auth client created\");\r\n            const cachedToken = await silentAuthClient.acquireCachedToken(silentRequest);\r\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, cachedToken);\r\n            return cachedToken;\r\n        } catch (e) {\r\n            try {\r\n                const tokenRenewalResult = await this.acquireTokenByRefreshToken(silentRequest);\r\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, tokenRenewalResult);\r\n                return tokenRenewalResult;\r\n            } catch (tokenRenewalError) {\r\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\r\n                throw tokenRenewalError;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}