{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashwinse\\\\Desktop\\\\T20\\\\t20\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\nimport { msalConfig, b2cPolicies } from \"./authConfig\";\nimport { PageLayout, IdTokenClaims } from \"./ui.jsx\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst IdTokenContent = () => {\n  _s();\n\n  /**\r\n   * useMsal is hook that returns the PublicClientApplication instance, \r\n   * an array of all accounts currently signed in and an inProgress value \r\n   * that tells you what msal is currently doing. For more, visit:\r\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n   */\n  const {\n    accounts\n  } = useMsal();\n  const [idTokenClaims, setIdTokenClaims] = useState(null);\n\n  function GetIdTokenClaims() {\n    setIdTokenClaims(accounts[0].idTokenClaims);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"card-title\",\n      children: [\"Welcome \", accounts[0].name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), idTokenClaims ? /*#__PURE__*/_jsxDEV(IdTokenClaims, {\n      idTokenClaims: idTokenClaims\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"secondary\",\n      onClick: GetIdTokenClaims,\n      children: \"View ID Token Claims\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n/**\r\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \r\n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \r\n * only render their children if a user is authenticated or unauthenticated, respectively.\r\n */\n\n\n_s(IdTokenContent, \"iRr10LnD0rakgV06utXDc/DzlTE=\", false, function () {\n  return [useMsal];\n});\n\n_c = IdTokenContent;\n\nconst MainContent = () => {\n  _s2();\n\n  const {\n    instance\n  } = useMsal();\n  /**\r\n   * Using the event API, you can register an event callback that will do something when an event is emitted. \r\n   * When registering an event callback in a react component you will need to make sure you do 2 things.\r\n   * 1) The callback is registered only once\r\n   * 2) The callback is unregistered before the component unmounts.\r\n   * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\r\n   */\n\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(event => {\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n          if (event.interactionType === InteractionType.Redirect) {\n            instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n          } else if (event.interactionType === InteractionType.Popup) {\n            instance.loginPopup(b2cPolicies.authorities.forgotPassword).catch(e => {\n              return;\n            });\n          }\n        }\n      }\n\n      if (event.eventType === EventType.LOGIN_SUCCESS) {\n        if (event !== null && event !== void 0 && event.payload) {\n          /**\r\n           * We need to reject id tokens that were not issued with the default sign-in policy.\r\n           * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\r\n           * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\r\n           */\n          if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n            window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password\");\n            return instance.logout();\n          }\n        }\n      }\n    });\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(AuthenticatedTemplate, {\n      children: /*#__PURE__*/_jsxDEV(IdTokenContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UnauthenticatedTemplate, {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: \"Please sign-in to see your profile information.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n/**\r\n * msal-react is built on the React context API and all parts of your app that require authentication must be \r\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \r\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \r\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\r\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\n\n\n_s2(MainContent, \"CyAOT5TCyJmKIwhVlXYy8fh+2P8=\", false, function () {\n  return [useMsal];\n});\n\n_c2 = MainContent;\nexport default function App(_ref) {\n  let {\n    msalInstance\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(MsalProvider, {\n    instance: msalInstance,\n    children: /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: /*#__PURE__*/_jsxDEV(MainContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n_c3 = App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"IdTokenContent\");\n$RefreshReg$(_c2, \"MainContent\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","MsalProvider","AuthenticatedTemplate","UnauthenticatedTemplate","useMsal","EventType","InteractionType","msalConfig","b2cPolicies","PageLayout","IdTokenClaims","Button","IdTokenContent","accounts","idTokenClaims","setIdTokenClaims","GetIdTokenClaims","name","MainContent","instance","callbackId","addEventCallback","event","eventType","LOGIN_FAILURE","error","errorMessage","indexOf","interactionType","Redirect","loginRedirect","authorities","forgotPassword","Popup","loginPopup","catch","e","LOGIN_SUCCESS","payload","names","window","alert","logout","removeEventCallback","App","msalInstance"],"sources":["C:/Users/ashwinse/Desktop/T20/t20/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\r\n\r\nimport { msalConfig, b2cPolicies } from \"./authConfig\";\r\nimport { PageLayout, IdTokenClaims } from \"./ui.jsx\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./styles/App.css\";\r\n\r\nconst IdTokenContent = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { accounts } = useMsal();\r\n    const [idTokenClaims, setIdTokenClaims] = useState(null);\r\n\r\n    function GetIdTokenClaims() {\r\n        setIdTokenClaims(accounts[0].idTokenClaims)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\r\n            {idTokenClaims ?\r\n                <IdTokenClaims idTokenClaims={idTokenClaims} />\r\n                :\r\n                <Button variant=\"secondary\" onClick={GetIdTokenClaims}>View ID Token Claims</Button>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\n/**\r\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \r\n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \r\n * only render their children if a user is authenticated or unauthenticated, respectively.\r\n */\r\nconst MainContent = () => {\r\n\r\n    const { instance } = useMsal();\r\n\r\n    /**\r\n     * Using the event API, you can register an event callback that will do something when an event is emitted. \r\n     * When registering an event callback in a react component you will need to make sure you do 2 things.\r\n     * 1) The callback is registered only once\r\n     * 2) The callback is unregistered before the component unmounts.\r\n     * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\r\n     */\r\n    useEffect(() => {\r\n        const callbackId = instance.addEventCallback((event) => {\r\n            if (event.eventType === EventType.LOGIN_FAILURE) {\r\n                if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\r\n                    if (event.interactionType === InteractionType.Redirect) {\r\n                        instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\r\n                    } else if (event.interactionType === InteractionType.Popup) {\r\n                        instance.loginPopup(b2cPolicies.authorities.forgotPassword)\r\n                            .catch(e => {\r\n                                return;\r\n                            });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (event.eventType === EventType.LOGIN_SUCCESS) {\r\n                if (event?.payload) {\r\n                    /**\r\n                     * We need to reject id tokens that were not issued with the default sign-in policy.\r\n                     * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\r\n                     * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\r\n                     */\r\n                    if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\r\n                        window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password\");\r\n                        return instance.logout();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            if (callbackId) {\r\n                instance.removeEventCallback(callbackId);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AuthenticatedTemplate>\r\n                <IdTokenContent />\r\n            </AuthenticatedTemplate>\r\n\r\n            <UnauthenticatedTemplate>\r\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\r\n            </UnauthenticatedTemplate>\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * msal-react is built on the React context API and all parts of your app that require authentication must be \r\n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \r\n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \r\n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\r\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport default function App({msalInstance}) {\r\n\r\n    return (\r\n        <MsalProvider instance={msalInstance}>\r\n            <PageLayout>\r\n                <MainContent />\r\n            </PageLayout>\r\n        </MsalProvider>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}