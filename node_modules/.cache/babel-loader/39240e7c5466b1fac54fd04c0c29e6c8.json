{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CredentialType, GrantType, CacheOutcome } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 client credential grant\r\n */\n\nvar ClientCredentialClient =\n/** @class */\nfunction (_super) {\n  __extends(ClientCredentialClient, _super);\n\n  function ClientCredentialClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet$1(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n\n\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            if (TimeUtils$1.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler$1.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   * TODO: Move this call to cacheManager instead\r\n   */\n\n\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: \"\",\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n\n\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return ClientCredentialClient;\n}(BaseClient$1);\n\nexport { ClientCredentialClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","ClientCredentialClient","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","_b","CACHED_ACCESS_TOKEN_EXPIRED","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","_c","accessTokenFilter","homeAccountId","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","length","ClientAuthError","createMultipleMatchingTokensInCacheError","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","claims","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["../../src/client/ClientCredentialClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType , CredentialType, CacheOutcome } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\r\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nexport class ClientCredentialClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n        \r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n\r\n        if (!cachedAccessToken) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            return null;\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: null,\r\n                idToken: null,\r\n                accessToken: cachedAccessToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reads access token from the cache\r\n     * TODO: Move this call to cacheManager instead\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: \"\",\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase()\r\n        };\r\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        } else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}