{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\n\nvar RequestValidator =\n/** @class */\nfunction () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n\n\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils$1.isEmpty(redirectUri)) {\n      throw ClientConfigurationError$1.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n\n\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError$1.createInvalidPromptError(prompt);\n    }\n  };\n\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError$1.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils$1.isEmpty(codeChallenge) || StringUtils$1.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n\n\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    } // Remove any query parameters already included in SSO params\n\n\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    return eQParams;\n  };\n\n  return RequestValidator;\n}();\n\nexport { RequestValidator };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;AAUA;;;;;;;EAGA,6BAkFC;;;;;;;EA5EUA,uCAAP,UAA2BC,WAA3B,EAA8C;IAC1C,IAAIC,aAAW,CAACC,OAAZD,CAAoBD,WAApBC,CAAJ,EAAsC;MAClC,MAAME,0BAAwB,CAACC,2BAAzBD,EAAN;IACH;EACJ,CAJM;;;;;;;EAUAJ,kCAAP,UAAsBM,MAAtB,EAAoC;IAChC,IAAMC,YAAY,GAAG,EAArB;;IAEA,KAAK,IAAMC,KAAX,IAAoBC,WAApB,EAAiC;MAC7BF,YAAY,CAACG,IAAb,CAAkBD,WAAW,CAACD,KAAD,CAA7B;IACH;;IAED,IAAID,YAAY,CAACI,OAAb,CAAqBL,MAArB,IAA+B,CAAnC,EAAsC;MAClC,MAAMF,0BAAwB,CAACQ,wBAAzBR,CAAkDE,MAAlDF,CAAN;IACH;EACJ,CAVM;;EAYAJ,kCAAP,UAAsBa,MAAtB,EAAoC;IAChC,IAAI;MACAC,IAAI,CAACC,KAAL,CAAWF,MAAX;IACH,CAFD,CAEE,OAAMG,CAAN,EAAS;MACP,MAAMZ,0BAAwB,CAACa,+BAAzBb,EAAN;IACH;EACJ,CANM;;;;;;;;EAaAJ,+CAAP,UAAmCkB,aAAnC,EAA0DC,mBAA1D,EAAqF;IACjF,IAAIjB,aAAW,CAACC,OAAZD,CAAoBgB,aAApBhB,KAAsCA,aAAW,CAACC,OAAZD,CAAoBiB,mBAApBjB,CAA1C,EAAoF;MAChF,MAAME,0BAAwB,CAACgB,qCAAzBhB,EAAN;IACH,CAFD,MAEO;MACH,KAAKiB,2BAAL,CAAiCF,mBAAjC;IACH;EACJ,CANM;;;;;;;EAYAnB,+CAAP,UAAmCmB,mBAAnC,EAA8D;IAC1D,IACI,CACIG,yBAAyB,CAACC,KAD9B,EAEID,yBAAyB,CAACE,IAF9B,EAGEb,OAHF,CAGUQ,mBAHV,IAGiC,CAJrC,EAKE;MACE,MAAMf,0BAAwB,CAACqB,qCAAzBrB,EAAN;IACH;EACJ,CATM;;;;;;;EAeAJ,oCAAP,UAAwB0B,QAAxB,EAA8CC,WAA9C,EAA8E;IAC1E,IAAI,CAACD,QAAL,EAAe;MACX,OAAO,EAAP;IACH,CAHyE;;;IAM1EC,WAAW,CAACC,OAAZ,CAAoB,UAACpB,KAAD,EAAQqB,GAAR,EAAW;MAC3B,IAAIH,QAAQ,CAACG,GAAD,CAAZ,EAAmB;QACf,OAAOH,QAAQ,CAACG,GAAD,CAAf;MACH;IACJ,CAJD;IAMA,OAAOH,QAAP;EACH,CAbM;;EAcX;AAAC","names":["RequestValidator","redirectUri","StringUtils","isEmpty","ClientConfigurationError","createRedirectUriEmptyError","prompt","promptValues","value","PromptValue","push","indexOf","createInvalidPromptError","claims","JSON","parse","e","createInvalidClaimsRequestError","codeChallenge","codeChallengeMethod","createInvalidCodeChallengeParamsError","validateCodeChallengeMethod","CodeChallengeMethodValues","PLAIN","S256","createInvalidCodeChallengeMethodError","eQParams","queryParams","forEach","key"],"sources":["../../src/request/RequestValidator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\n\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nexport class RequestValidator {\r\n\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    static validateRedirectUri(redirectUri: string) : void {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    static validatePrompt(prompt: string) : void {\r\n        const promptValues = [];\r\n\r\n        for (const value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    }\r\n\r\n    static validateClaims(claims: string) : void {\r\n        try {\r\n            JSON.parse(claims);\r\n        } catch(e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        } else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\r\n        if (\r\n            [\r\n                CodeChallengeMethodValues.PLAIN,\r\n                CodeChallengeMethodValues.S256\r\n            ].indexOf(codeChallengeMethod) < 0\r\n        ) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach((value, key) => {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n\r\n        return eQParams;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}