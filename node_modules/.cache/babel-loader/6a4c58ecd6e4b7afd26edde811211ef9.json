{"ast":null,"code":"/*! @azure/msal-browser v2.29.0 2022-10-03 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants, ServerError, InteractionRequiredAuthError } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, CacheLookupPolicy, ApiId, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache,\n              accessTokenSize: result.accessToken.length,\n              idTokenSize: result.idToken.length,\n              isNativeBroker: result.fromNativeBroker,\n              cacheLookupPolicy: request.cacheLookupPolicy,\n              requestId: result.requestId\n            });\n            atsMeasurement.flushMeasurement();\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              errorCode: error.errorCode,\n              subErrorCode: error.subError,\n              success: false\n            });\n            atsMeasurement.flushMeasurement();\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n          atsMeasurement.endMeasurement({\n            success: true\n          }); // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n\n          atsMeasurement.discardMeasurement();\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var astsAsyncMeasurement, result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3\n            /*break*/\n            , 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt \n\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2\n                    /*return*/\n                    , silentIframeClient.acquireToken(request)];\n                  }\n\n                  throw e;\n                });\n              });\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 2:\n            silentRequest_1 = _a.sent();\n            requestWithCLP_1 = __assign(__assign({}, request), {\n              // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n              cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            });\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {\n              if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                throw cacheError;\n              } // block the reload if it occurred inside a hidden iframe\n\n\n              BrowserUtils.blockReloadInHiddenIframes();\n\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest_1);\n\n              return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {\n                var isServerError = refreshTokenError instanceof ServerError;\n                var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                var isInvalidGrantError = refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR;\n\n                if ((!isServerError || !isInvalidGrantError || isInteractionRequiredError || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken || requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken) && requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip) {\n                  throw refreshTokenError;\n                }\n\n                _this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n\n                return _this.acquireTokenBySilentIframe(silentRequest_1);\n              });\n            });\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , result.then(function (response) {\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n\n              astsAsyncMeasurement.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                accessTokenSize: response.accessToken.length,\n                idTokenSize: response.idToken.length,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n\n              astsAsyncMeasurement.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n              });\n              throw tokenRenewalError;\n            })];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","_this","activeSilentTokenRequests","Map","PublicClientApplication","request","correlationId","getRequestCorrelationId","logger","verbose","acquireTokenRedirect","__assign","DEFAULT_REQUEST","acquireTokenPopup","atsMeasurement","performanceClient","startMeasurement","PerformanceEvents","AcquireTokenSilent","preflightBrowserEnvironmentCheck","InteractionType","Silent","account","getActiveAccount","BrowserAuthError","createNoAccountError","thumbprint","clientId","config","auth","authority","Constants","EMPTY_STRING","scopes","homeAccountIdentifier","homeAccountId","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","silentRequestKey","JSON","stringify","cachedResponse","get","response","acquireTokenSilentAsync","then","result","delete","endMeasurement","success","fromCache","accessTokenSize","accessToken","length","idTokenSize","idToken","isNativeBroker","fromNativeBroker","cacheLookupPolicy","requestId","flushMeasurement","catch","error","errorCode","subErrorCode","subError","set","discardMeasurement","eventHandler","emitEvent","EventType","ACQUIRE_TOKEN_START","astsAsyncMeasurement","AcquireTokenSilentAsync","NativeMessageHandler","isNativeAvailable","nativeExtensionProvider","nativeAccountId","silentRequest","acquireTokenNative","ApiId","acquireTokenSilent_silentFlow","e","NativeAuthError","isFatal","undefined","silentIframeClient","createSilentIframeClient","acquireToken","silentCacheClient","createSilentCacheClient","initializeSilentRequest","silentRequest_1","_a","requestWithCLP_1","CacheLookupPolicy","Default","acquireTokenFromCache","cacheError","AccessToken","BrowserUtils","blockReloadInHiddenIframes","ACQUIRE_TOKEN_NETWORK_START","acquireTokenByRefreshToken","refreshTokenError","isServerError","ServerError","isInteractionRequiredError","InteractionRequiredAuthError","isInvalidGrantError","BrowserConstants","INVALID_GRANT_ERROR","AccessTokenAndRefreshToken","RefreshToken","Skip","acquireTokenBySilentIframe","ACQUIRE_TOKEN_SUCCESS","tokenRenewalError","ACQUIRE_TOKEN_FAILURE","ClientApplication"],"sources":["../../src/app/PublicClientApplication.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo, AuthenticationResult, Constants, RequestThumbprint, AuthError, PerformanceEvents, ServerError, InteractionRequiredAuthError } from \"@azure/msal-common\";\nimport { Configuration } from \"../config/Configuration\";\nimport { DEFAULT_REQUEST, InteractionType, ApiId, CacheLookupPolicy, BrowserConstants } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { ClientApplication } from \"./ClientApplication\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { EventType } from \"../event/EventType\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { NativeAuthError } from \"../error/NativeAuthError\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler\";\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication extends ClientApplication implements IPublicClientApplication {\n\n    // Active requests\n    private activeSilentTokenRequests: Map<string, Promise<AuthenticationResult>>;\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration object for the MSAL PublicClientApplication instance\n     */\n    constructor(configuration: Configuration) {\n        super(configuration);\n\n        this.activeSilentTokenRequests = new Map();\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    async loginRedirect(request?: RedirectRequest): Promise<void> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return this.acquireTokenRedirect({\n            correlationId,\n            ...(request || DEFAULT_REQUEST)\n        });\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(request?: PopupRequest): Promise<AuthenticationResult> {\n        const correlationId: string = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginPopup called\", correlationId);\n        return this.acquireTokenPopup({\n            correlationId,\n            ...(request || DEFAULT_REQUEST)\n        });\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\n     */\n    async acquireTokenSilent(request: SilentRequest): Promise<AuthenticationResult> {\n        const correlationId = this.getRequestCorrelationId(request);\n        const atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        \n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n\n        const account = request.account || this.getActiveAccount();\n        if (!account) {\n            throw BrowserAuthError.createNoAccountError();\n        }\n\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.auth.clientId,\n            authority: request.authority || Constants.EMPTY_STRING,\n            scopes: request.scopes,\n            homeAccountIdentifier: account.homeAccountId,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n        const silentRequestKey = JSON.stringify(thumbprint);\n\n        const cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n        if (typeof cachedResponse === \"undefined\") {\n            this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n\n            const response = this.acquireTokenSilentAsync({\n                ...request,\n                correlationId\n            }, account)\n                .then((result) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.endMeasurement({\n                        success: true,\n                        fromCache: result.fromCache,\n                        accessTokenSize: result.accessToken.length,\n                        idTokenSize: result.idToken.length,\n                        isNativeBroker: result.fromNativeBroker,\n                        cacheLookupPolicy: request.cacheLookupPolicy,\n                        requestId: result.requestId\n                    });\n                    atsMeasurement.flushMeasurement();\n                    return result;\n                })\n                .catch((error: AuthError) => {\n                    this.activeSilentTokenRequests.delete(silentRequestKey);\n                    atsMeasurement.endMeasurement({\n                        errorCode: error.errorCode,\n                        subErrorCode: error.subError,\n                        success: false\n                    });\n                    atsMeasurement.flushMeasurement();\n                    throw error;\n                });\n            this.activeSilentTokenRequests.set(silentRequestKey, response);\n            return response;\n        } else {\n            this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n            atsMeasurement.endMeasurement({\n                success: true\n            });\n            // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n            atsMeasurement.discardMeasurement();\n            return cachedResponse;\n        }\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\n     * @param {@link (SilentRequest:type)}\n     * @param {@link (AccountInfo:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} \n     */\n    protected async acquireTokenSilentAsync(request: SilentRequest, account: AccountInfo): Promise<AuthenticationResult>{\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n        const astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n\n        let result: Promise<AuthenticationResult>;\n        if (NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId) {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            const silentRequest: SilentRequest = {\n                ...request,\n                account\n            };\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(async (e: AuthError) => {\n                // If native token acquisition fails for availability reasons fallback to web flow\n                if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt \n\n                    // Cache will not contain tokens, given that previous WAM requests succeeded. Skip cache and RT renewal and go straight to iframe renewal\n                    const silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return silentIframeClient.acquireToken(request);\n                }\n                throw e;\n            });     \n        } else {\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n\n            const silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            const silentRequest = await silentCacheClient.initializeSilentRequest(request, account);\n            \n            const requestWithCLP = {\n                ...request,\n                // set the request's CacheLookupPolicy to Default if it was not optionally passed in\n                cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default\n            };\n\n            result = this.acquireTokenFromCache(silentCacheClient, silentRequest, requestWithCLP).catch((cacheError: AuthError) => {\n                if (requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {\n                    throw cacheError;\n                }\n\n                // block the reload if it occurred inside a hidden iframe\n                BrowserUtils.blockReloadInHiddenIframes();\n                this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_NETWORK_START, InteractionType.Silent, silentRequest);\n\n                return this.acquireTokenByRefreshToken(silentRequest, requestWithCLP).catch((refreshTokenError: AuthError) => {\n                    const isServerError = refreshTokenError instanceof ServerError;\n                    const isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;\n                    const isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);\n\n                    if ((!isServerError ||\n                        !isInvalidGrantError ||\n                        isInteractionRequiredError ||\n                        requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||\n                        requestWithCLP.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)\n                        && (requestWithCLP.cacheLookupPolicy !== CacheLookupPolicy.Skip)\n                    ) {\n                        throw refreshTokenError;\n                    }\n                        \n                    this.logger.verbose(\"Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.\", request.correlationId);\n                    return this.acquireTokenBySilentIframe(silentRequest);\n                });\n            });\n        }\n\n        return result.then((response) => {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n            astsAsyncMeasurement.endMeasurement({\n                success: true,\n                fromCache: response.fromCache,\n                accessTokenSize: response.accessToken.length,\n                idTokenSize: response.idToken.length,\n                isNativeBroker: response.fromNativeBroker,\n                requestId: response.requestId\n            });\n            return response;\n        }).catch((tokenRenewalError: AuthError) => {\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n            astsAsyncMeasurement.endMeasurement({\n                errorCode: tokenRenewalError.errorCode,\n                subErrorCode: tokenRenewalError.subError,\n                success: false\n            });\n            throw tokenRenewalError;\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}