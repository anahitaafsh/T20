{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\n\nvar BrowserStringUtils =\n/** @class */\nfunction () {\n  function BrowserStringUtils() {}\n  /**\r\n   * Converts string to Uint8Array\r\n   * @param sDOMStr\r\n   */\n\n\n  BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {\n    var nChr;\n    var nArrLen = 0;\n    var nStrLen = sDOMStr.length;\n    /* mapping... */\n\n    for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\n      nChr = sDOMStr.charCodeAt(nMapIdx);\n      nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\n    }\n\n    var aBytes = new Uint8Array(nArrLen);\n    /* transcription... */\n\n    for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\n      nChr = sDOMStr.charCodeAt(nChrIdx);\n\n      if (nChr < 128) {\n        /* one byte */\n        aBytes[nIdx++] = nChr;\n      } else if (nChr < 0x800) {\n        /* two bytes */\n        aBytes[nIdx++] = 192 + (nChr >>> 6);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x10000) {\n        /* three bytes */\n        aBytes[nIdx++] = 224 + (nChr >>> 12);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x200000) {\n        /* four bytes */\n        aBytes[nIdx++] = 240 + (nChr >>> 18);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x4000000) {\n        /* five bytes */\n        aBytes[nIdx++] = 248 + (nChr >>> 24);\n        aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else\n        /* if (nChr <= 0x7fffffff) */\n        {\n          /* six bytes */\n          aBytes[nIdx++] = 252 + (nChr >>> 30);\n          aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n          aBytes[nIdx++] = 128 + (nChr & 63);\n        }\n    }\n\n    return aBytes;\n  };\n  /**\r\n   * Converst string to ArrayBuffer\r\n   * @param dataString\r\n   */\n\n\n  BrowserStringUtils.stringToArrayBuffer = function (dataString) {\n    var data = new ArrayBuffer(dataString.length);\n    var dataView = new Uint8Array(data);\n\n    for (var i = 0; i < dataString.length; i++) {\n      dataView[i] = dataString.charCodeAt(i);\n    }\n\n    return data;\n  };\n  /**\r\n   * Converts Uint8Array to a string\r\n   * @param aBytes\r\n   */\n\n\n  BrowserStringUtils.utf8ArrToString = function (aBytes) {\n    var sView = \"\";\n\n    for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\n      nPart = aBytes[nIdx];\n      sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ?\n      /* six bytes */\n\n      /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n      (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ?\n      /* five bytes */\n      (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ?\n      /* four bytes */\n      (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ?\n      /* three bytes */\n      (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ?\n      /* two bytes */\n      (nPart - 192 << 6) + aBytes[++nIdx] - 128 :\n      /* nPart < 127 ? */\n\n      /* one byte */\n      nPart);\n    }\n\n    return sView;\n  };\n\n  return BrowserStringUtils;\n}();\n\nexport { BrowserStringUtils };","map":{"version":3,"mappings":"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","names":["BrowserStringUtils","sDOMStr","nChr","nArrLen","nStrLen","length","nMapIdx","charCodeAt","aBytes","Uint8Array","nIdx","nChrIdx","dataString","data","ArrayBuffer","dataView","i","sView","nPart","nLen","String","fromCharCode"],"sources":["../../src/utils/BrowserStringUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class BrowserStringUtils {\r\n\r\n    /**\r\n     * Converts string to Uint8Array\r\n     * @param sDOMStr \r\n     */\r\n    static stringToUtf8Arr (sDOMStr: string): Uint8Array {\r\n        let nChr;\r\n        let nArrLen = 0;\r\n        const nStrLen = sDOMStr.length;\r\n        /* mapping... */\r\n        for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nMapIdx);\r\n            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\r\n        }\r\n\r\n        const aBytes = new Uint8Array(nArrLen);\r\n\r\n        /* transcription... */\r\n\r\n        for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nChrIdx);\r\n            if (nChr < 128) {\r\n                /* one byte */\r\n                aBytes[nIdx++] = nChr;\r\n            } else if (nChr < 0x800) {\r\n                /* two bytes */\r\n                aBytes[nIdx++] = 192 + (nChr >>> 6);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x10000) {\r\n                /* three bytes */\r\n                aBytes[nIdx++] = 224 + (nChr >>> 12);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x200000) {\r\n                /* four bytes */\r\n                aBytes[nIdx++] = 240 + (nChr >>> 18);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x4000000) {\r\n                /* five bytes */\r\n                aBytes[nIdx++] = 248 + (nChr >>> 24);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else /* if (nChr <= 0x7fffffff) */ {\r\n                /* six bytes */\r\n                aBytes[nIdx++] = 252 + (nChr >>> 30);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            }\r\n        }\r\n\r\n        return aBytes;      \r\n    }\r\n\r\n    /**\r\n     * Converst string to ArrayBuffer\r\n     * @param dataString \r\n     */\r\n    static stringToArrayBuffer(dataString: string): ArrayBuffer {\r\n        const data = new ArrayBuffer(dataString.length);\r\n        const dataView = new Uint8Array(data);\r\n        for (let i: number = 0; i < dataString.length; i++) {\r\n            dataView[i] = dataString.charCodeAt(i);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Converts Uint8Array to a string\r\n     * @param aBytes \r\n     */\r\n    static utf8ArrToString (aBytes: Uint8Array): string {\r\n        let sView = \"\";\r\n        for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\r\n            nPart = aBytes[nIdx];\r\n            sView += String.fromCharCode(\r\n                nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\r\n                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\r\n                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\r\n                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\r\n                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\r\n                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\r\n                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128\r\n                                    : /* nPart < 127 ? */ /* one byte */\r\n                                    nPart\r\n            );\r\n        }\r\n        return sView;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}