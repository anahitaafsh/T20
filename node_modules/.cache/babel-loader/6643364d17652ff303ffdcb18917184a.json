{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, InteractionType } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupUtils =\n/** @class */\nfunction () {\n  function PopupUtils(storageImpl, logger) {\n    this.browserStorage = storageImpl;\n    this.logger = logger; // Properly sets this reference for the unload event.\n\n    this.unloadWindow = this.unloadWindow.bind(this);\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupUtils.prototype.openPopup = function (urlNavigate, popupName, popup) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popup) {\n        popupWindow = popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n\n  PopupUtils.openSizedPopup = function (urlNavigate, popupName) {\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var left = Math.max(0, width / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    var top = Math.max(0, height / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    return window.open(urlNavigate, popupName, \"width=\" + BrowserConstants.POPUP_WIDTH + \", height=\" + BrowserConstants.POPUP_HEIGHT + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupUtils.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupUtils.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   */\n\n\n  PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var intervalId = setInterval(function () {\n        if (popupWindow.closed) {\n          // Window is closed\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        clearInterval(intervalId);\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generatePopupName = function (clientId, request) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + request.scopes.join(\"-\") + \".\" + request.authority + \".\" + request.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generateLogoutPopupName = function (clientId, request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\n  };\n\n  return PopupUtils;\n}();\n\nexport { PopupUtils };","map":{"version":3,"mappings":"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","names":["storageImpl","logger","browserStorage","unloadWindow","bind","PopupUtils","urlNavigate","popupName","popup","popupWindow","verbosePii","location","assign","openSizedPopup","BrowserAuthError","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","e","error","message","removeItem","generateCacheKey","TemporaryCacheKeys","INTERACTION_STATUS_KEY","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","width","innerWidth","document","documentElement","clientWidth","body","height","innerHeight","clientHeight","left","Math","max","BrowserConstants","POPUP_WIDTH","top","POPUP_HEIGHT","open","cleanRequestByInteractionType","InteractionType","Popup","close","preventDefault","removeEventListener","Promise","resolve","reject","intervalId","setInterval","closed","_this","cleanPopup","clearInterval","createUserCancelledError","href","Constants","EMPTY_STRING","StringUtils","isEmpty","POLL_INTERVAL_MS","clientId","request","POPUP_NAME_PREFIX","scopes","join","authority","correlationId","homeAccountId","account"],"sources":["../../src/utils/PopupUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CommonEndSessionRequest, Constants, Logger, StringUtils } from \"@azure/msal-common\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConstants, InteractionType, TemporaryCacheKeys } from \"./BrowserConstants\";\r\n\r\nexport class PopupUtils {\r\n    private browserStorage: BrowserCacheManager;\r\n    private logger: Logger;\r\n    private currentWindow: Window|undefined;\r\n\r\n    constructor(storageImpl: BrowserCacheManager, logger: Logger) {\r\n        this.browserStorage = storageImpl;\r\n        this.logger = logger;\r\n\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    openPopup(urlNavigate: string, popupName: string, popup?: Window|null): Window {\r\n        try {\r\n            let popupWindow;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popup) {\r\n                popupWindow = popup;\r\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\r\n                popupWindow.location.assign(urlNavigate);\r\n            } else if (typeof popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\r\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\r\n            }\r\n\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n            throw BrowserAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    }\r\n\r\n    static openSizedPopup(urlNavigate: string, popupName: string): Window|null {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n        const left = Math.max(0, ((width / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        const top = Math.max(0, ((height / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n\r\n        return window.open(urlNavigate, popupName, `width=${BrowserConstants.POPUP_WIDTH}, height=${BrowserConstants.POPUP_HEIGHT}, top=${top}, left=${left}, scrollbars=yes`);\r\n    }\r\n\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    unloadWindow(e: Event): void {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    cleanPopup(popupWindow?: Window): void {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     */\r\n    monitorPopupForSameOrigin(popupWindow: Window): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const intervalId = setInterval(() => {\r\n                if (popupWindow.closed) {\r\n                    // Window is closed\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                clearInterval(intervalId);\r\n                resolve();\r\n            }, BrowserConstants.POLL_INTERVAL_MS);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    static generatePopupName(clientId: string, request: AuthorizationUrlRequest): string {\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${request.scopes.join(\"-\")}.${request.authority}.${request.correlationId}`;\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId \r\n     * @param request \r\n     */\r\n    static generateLogoutPopupName(clientId: string, request: CommonEndSessionRequest): string {\r\n        const homeAccountId = request.account && request.account.homeAccountId;\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${homeAccountId}.${request.correlationId}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}