{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\n\nvar AuthToken =\n/** @class */\nfunction () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils$1.isEmpty(rawToken)) {\n      throw ClientAuthError$1.createTokenNullOrEmptyError(rawToken);\n    }\n\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n\n\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils$1.decodeAuthToken(encodedToken); // token will be decoded to get the username\n\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload; // base64Decode() should throw an error if there is an issue\n\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError$1.createTokenParsingError(err);\n    }\n  };\n\n  return AuthToken;\n}();\n\nexport { AuthToken };","map":{"version":3,"mappings":";;;;;AAAA;;;;;AAWA;;;;;;;EASI,mBAAYA,QAAZ,EAA8BC,MAA9B,EAA6C;IACzC,IAAIC,aAAW,CAACC,OAAZD,CAAoBF,QAApBE,CAAJ,EAAmC;MAC/B,MAAME,iBAAe,CAACC,2BAAhBD,CAA4CJ,QAA5CI,CAAN;IACH;;IAED,KAAKJ,QAAL,GAAgBA,QAAhB;IACA,KAAKM,MAAL,GAAcC,SAAS,CAACC,kBAAV,CAA6BR,QAA7B,EAAuCC,MAAvC,CAAd;EACH;;;;;;;;EAOMM,+BAAP,UAA0BE,YAA1B,EAAgDR,MAAhD,EAA+D;IAE3D,IAAMS,YAAY,GAAqBR,aAAW,CAACS,eAAZT,CAA4BO,YAA5BP,CAAvC,CAF2D;;IAK3D,IAAI;MACA,IAAMU,kBAAkB,GAAGF,YAAY,CAACG,UAAxC,CADA;;MAIA,IAAMC,aAAa,GAAGb,MAAM,CAACc,YAAP,CAAoBH,kBAApB,CAAtB;MACA,OAAOI,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAP;IACH,CAND,CAME,OAAOI,GAAP,EAAY;MACV,MAAMd,iBAAe,CAACe,uBAAhBf,CAAwCc,GAAxCd,CAAN;IACH;EACJ,CAdM;;EAeX;AAAC","names":["rawToken","crypto","StringUtils","isEmpty","ClientAuthError","createTokenNullOrEmptyError","claims","AuthToken","extractTokenClaims","encodedToken","decodedToken","decodeAuthToken","base64TokenPayload","JWSPayload","base64Decoded","base64Decode","JSON","parse","err","createTokenParsingError"],"sources":["../../src/account/AuthToken.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { TokenClaims } from \"./TokenClaims\";\r\nimport { DecodedAuthToken } from \"./DecodedAuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\n\r\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\r\nexport class AuthToken {\r\n\r\n    // Raw Token string\r\n    rawToken: string;\r\n    // Claims inside token\r\n    claims: TokenClaims;\r\n    constructor(rawToken: string, crypto: ICrypto) {\r\n        if (StringUtils.isEmpty(rawToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\r\n        }\r\n\r\n        this.rawToken = rawToken;\r\n        this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\r\n    }\r\n\r\n    /**\r\n     * Extract token by decoding the rawToken\r\n     *\r\n     * @param encodedToken\r\n     */\r\n    static extractTokenClaims(encodedToken: string, crypto: ICrypto): TokenClaims {\r\n\r\n        const decodedToken: DecodedAuthToken = StringUtils.decodeAuthToken(encodedToken);\r\n\r\n        // token will be decoded to get the username\r\n        try {\r\n            const base64TokenPayload = decodedToken.JWSPayload;\r\n\r\n            // base64Decode() should throw an error if there is an issue\r\n            const base64Decoded = crypto.base64Decode(base64TokenPayload);\r\n            return JSON.parse(base64Decoded) as TokenClaims;\r\n        } catch (err) {\r\n            throw ClientAuthError.createTokenParsingError(err);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}