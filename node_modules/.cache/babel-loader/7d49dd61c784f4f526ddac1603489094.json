{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants as Constants$1 } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * On-Behalf-Of client\r\n */\n\nvar OnBehalfOfClient =\n/** @class */\nfunction (_super) {\n  __extends(OnBehalfOfClient, _super);\n\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet$1(request.scopes || []);\n            if (!request.skipCache) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.getCachedAuthenticationResult(request)];\n\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3\n            /*break*/\n            , 4];\n            return [2\n            /*return*/\n            , cachedAuthenticationResult];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n\n            if (!cachedAccessToken || TimeUtils$1.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Update the server telemetry outcome\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2\n              /*return*/\n              , null];\n            }\n\n            cachedIdToken = this.readIdTokenFromCache(request);\n            cachedAccount = null;\n\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken$1(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants$1.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n              };\n              cachedAccount = this.readAccountFromCache(accountInfo);\n            }\n\n            return [4\n            /*yield*/\n            , ResponseHandler$1.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read access token from cache TODO: CacheManager API should be used here\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * read idtoken from cache TODO: CacheManager API should be used here instead\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\n    var idTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      oboAssertion: request.oboAssertion\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    }); // When acquiring a token on behalf of an application, there might not be an id token in the cache\n\n    if (idTokens.length < 1) {\n      return null;\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * read account from cache, TODO: CacheManager API should be used here instead\r\n   * @param account\r\n   */\n\n\n  OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\n    return this.cacheManager.readAccountFromCache(account);\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4\n            /*yield*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n\n          case 2:\n            tokenResponse = _a.sent();\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n\n\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return OnBehalfOfClient;\n}(BaseClient$1);\n\nexport { OnBehalfOfClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","OnBehalfOfClient","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","serverTelemetryManager","setCacheOutcome","CacheOutcome","CACHED_ACCESS_TOKEN_EXPIRED","NO_CACHED_ACCESS_TOKEN","cachedIdToken","readIdTokenFromCache","cachedAccount","idTokenObject","AuthToken","secret","cryptoInterface","localAccountId","claims","oid","sub","accountInfo","homeAccountId","environment","tenantId","realm","username","Constants","EMPTY_STRING","readAccountFromCache","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","accessToken","idToken","refreshToken","appMetadata","_b","accessTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","numAccessTokens","length","ClientAuthError","createMultipleMatchingTokensInCacheError","idTokenFilter","ID_TOKEN","oboAssertion","idTokens","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","AADServerParamKeys","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","createQueryString","BaseClient"],"sources":["../../src/client/OnBehalfOfClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType, AADServerParamKeys , CredentialType, Constants, CacheOutcome } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\r\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\n\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nexport class OnBehalfOfClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * look up cache for tokens\r\n     * @param request\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n        if (!cachedAccessToken ||\r\n            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n\r\n            // Update the server telemetry outcome\r\n            this.serverTelemetryManager?.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n\r\n            return null;\r\n        }\r\n\r\n        const cachedIdToken = this.readIdTokenFromCache(request);\r\n        let idTokenObject: AuthToken | undefined;\r\n        let cachedAccount: AccountEntity | null = null;\r\n        if (cachedIdToken) {\r\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n            const accountInfo: AccountInfo = {\r\n                homeAccountId: cachedIdToken.homeAccountId,\r\n                environment: cachedIdToken.environment,\r\n                tenantId: cachedIdToken.realm,\r\n                username: Constants.EMPTY_STRING,\r\n                localAccountId: localAccountId || \"\"\r\n            };\r\n\r\n            cachedAccount = this.readAccountFromCache(accountInfo);\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: cachedAccount,\r\n                accessToken: cachedAccessToken,\r\n                idToken: cachedIdToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request,\r\n            idTokenObject);\r\n    }\r\n\r\n    /**\r\n     * read access token from cache TODO: CacheManager API should be used here\r\n     * @param request\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase(),\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * read idtoken from cache TODO: CacheManager API should be used here instead\r\n     * @param request\r\n     */\r\n    private readIdTokenFromCache(request: CommonOnBehalfOfRequest): IdTokenEntity | null {\r\n        const idTokenFilter: CredentialFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            oboAssertion: request.oboAssertion\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\r\n        const idTokens = Object.keys(credentialCache.idTokens).map(key => credentialCache.idTokens[key]);\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0] as IdTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * read account from cache, TODO: CacheManager API should be used here instead\r\n     * @param account\r\n     */\r\n    private readAccountFromCache(account: AccountInfo): AccountEntity | null {\r\n        return this.cacheManager.readAccountFromCache(account);\r\n    }\r\n\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}