{"ast":null,"code":"/*! @azure/msal-common v7.5.0 2022-10-03 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, requestId, responseHandler;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _c.sent();\n            requestId = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\n              var _a;\n\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true,\n                refreshTokenSize: ((_a = response.body.refresh_token) === null || _a === void 0 ? void 0 : _a.length) || 0\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n                refreshTokenSize: undefined\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, refreshToken, refreshTokenRequest;\n      return __generator(this, function (_b) {\n        atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        if (!refreshToken) {\n          atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        } // attach cached RT size to the current measurement\n\n\n        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n          success: true\n        });\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _b.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            reqCnfData = _b.sent(); // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n\n            _b.label = 3;\n\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient);\n\nexport { RefreshTokenClient };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGG;;AA0BH;;AAEG;;AACH;AAAA;AAAA;EAAwCA,SAAU,4BAAV;;EACpC,SAAYC,kBAAZ,CAAYC,aAAZ,EAAgDC,iBAAhD,EAAsF;WAClFC,MAAM,KAAN,CAAM,IAAN,EAAMF,aAAN,EAAqBC,iBAArB,KAAuC;EAE1C;;EACYF,kBAAY,UAAZ,CAAYI,YAAZ,GAAb,UAA0BC,OAA1B,EAA4D;;;;;;;;;;;YAClDC,cAAc,GAAG,WAAKJ,iBAAL,MAAsB,IAAtB,IAAsBK,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,gBAAF,CAAmBC,iBAAiB,CAACC,8BAArC,EAAqEL,OAAO,CAACM,aAA7E,CAAvC;YACN,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,uCAApB,EAA6DR,OAAO,CAACM,aAArE;YACMG,YAAY,GAAGC,SAAS,CAACC,UAAV,EAAf;YACW,OAAM;YAAA;YAAA,OAAKC,mBAAL,CAAyBZ,OAAzB,EAAkC,KAAKa,SAAvC,EAAN;;;YAAXC,QAAQ,GAAGC,EAAuD,KAAvD,EAAX;YAGAC,SAAS,SAAGF,QAAQ,CAACG,OAAZ,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmB,MAAnB,GAAmBA,GAAGC,WAAW,CAACC,eAAf,CAA5B;YAEAC,eAAe,GAAG,IAAIC,eAAJ,CACpB,KAAKC,MAAL,CAAYC,WAAZ,CAAwBC,QADJ,EAEpB,KAAKC,YAFe,EAGpB,KAAKC,WAHe,EAIpB,KAAKpB,MAJe,EAKpB,KAAKgB,MAAL,CAAYK,iBALQ,EAMpB,KAAKL,MAAL,CAAYM,iBANQ,CAAlB;YASNR,eAAe,CAACS,qBAAhB,CAAsChB,QAAQ,CAACiB,IAA/C;YAEA;YAAA;YAAA,EAAOV,eAAe,CAACW,yBAAhB,CACHlB,QAAQ,CAACiB,IADN,EAEH,KAAKlB,SAFF,EAGHJ,YAHG,EAIHT,OAJG,EAKHiC,SALG,EAMHA,SANG,EAOH,IAPG,EAQHjC,OAAO,CAACkC,UARL,EASHlB,SATG,EAULmB,IAVK,CAUA,UAACC,MAAD,EAA6B;;;cAChCnC,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEoC,cAAhB,CAA+B;gBAC3BC,OAAO,EAAE,IADkB;gBAE3BC,gBAAgB,EAAE,eAAQ,CAACR,IAAT,CAAcS,aAAd,MAA2B,IAA3B,IAA2BtC,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEuC,MAA7B,KAAuC;cAF9B,CAA/B;cAIA,OAAOL,MAAP;YACH,CAhBM,EAiBFM,KAjBE,CAiBI,UAACC,KAAD,EAAM;cACTC,KAAI,CAACrC,MAAL,CAAYC,OAAZ,CAAoB,iCAApB,EAAuDR,OAAO,CAACM,aAA/D;;cACAL,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEoC,cAAhB,CAA+B;gBAC3BQ,SAAS,EAAEF,KAAK,CAACE,SADU;gBAE3BC,YAAY,EAAEH,KAAK,CAACI,QAFO;gBAG3BT,OAAO,EAAE,KAHkB;gBAI3BC,gBAAgB,EAAEN;cAJS,CAA/B;cAMA,MAAMU,KAAN;YACH,CA1BE,CAAP;;;;EA2BH,CA/CY;EAiDb;;;AAGG;;;EACUhD,kBAA0B,UAA1B,CAA0BqD,0BAA1B,GAAb,UAAwChD,OAAxC,EAAwE;;;;;QAEpE,IAAI,CAACA,OAAL,EAAc;UACV,MAAMiD,wBAAwB,CAACC,4BAAzB,EAAN;QACH;;;QAGD,IAAI,CAAClD,OAAO,CAACmD,OAAb,EAAsB;UAClB,MAAMC,eAAe,CAACC,mCAAhB,EAAN;QACH;;QAGKC,MAAM,GAAG,KAAK5B,YAAL,CAAkB6B,iBAAlB,CAAoCvD,OAAO,CAACmD,OAAR,CAAgBK,WAApD,EAAiE,KAAKjC,MAAL,CAAYC,WAAZ,CAAwBC,QAAzF,CAAT;;QAGN,IAAI6B,MAAJ,EAAY;UACR,IAAI;YACA,OAAO;YAAA;YAAA,OAAKG,kCAAL,CAAwCzD,OAAxC,EAAiD,IAAjD,EAAP;UACH,CAFD,CAEE,OAAO0D,CAAP,EAAU;YACFC,iBAAiB,GAAGD,CAAC,YAAYE,4BAAb,IAA6CF,CAAC,CAACb,SAAF,KAAgBgB,mCAAmC,CAACC,kBAApC,CAAuDC,IAAxI;YACAC,+BAA+B,GAAGN,CAAC,YAAYO,WAAb,IAA4BP,CAAC,CAACb,SAAF,KAAgBqB,MAAM,CAACC,mBAAnD,IAA0ET,CAAC,CAACX,QAAF,KAAemB,MAAM,CAACE,qBAAlI,CAFE;;YAKR,IAAIT,iBAAiB,IAAIK,+BAAzB,EAA0D;cACtD,OAAO;cAAA;cAAA,OAAKP,kCAAL,CAAwCzD,OAAxC,EAAiD,KAAjD,EAAP,CADsD;YAGzD,CAHD,MAGO;cACH,MAAM0D,CAAN;YACH;UACJ;QACJ;;;QAED,OAAO;QAAA;QAAA,OAAKD,kCAAL,CAAwCzD,OAAxC,EAAiD,KAAjD,EAAP;;;EAEH,CAlCY;EAoCb;;;AAGG;;;EACWL,kEAAd,UAAiDK,OAAjD,EAAmFqE,IAAnF,EAAgG;;;;;;QAGtFpE,cAAc,GAAG,WAAKJ,iBAAL,MAAsB,IAAtB,IAAsBK,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,gBAAF,CAAmBC,iBAAiB,CAACkE,oDAArC,EAA2FtE,OAAO,CAACM,aAAnG,CAAvC;QACN,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,6DAApB,EAAmFR,OAAO,CAACM,aAA3F;QACMiE,YAAY,GAAG,KAAK7C,YAAL,CAAkB8C,yBAAlB,CAA4C,KAAKjD,MAAL,CAAYC,WAAZ,CAAwBC,QAApE,EAA8EzB,OAAO,CAACmD,OAAtF,EAA+FkB,IAA/F,CAAf;;QAEN,IAAI,CAACE,YAAL,EAAmB;UACftE,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEwE,kBAAhB;UACA,MAAMb,4BAA4B,CAACc,wBAA7B,EAAN;QACH;;;QAEDzE,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEoC,cAAhB,CAA+B;UAC3BC,OAAO,EAAE;QADkB,CAA/B;QAIMqC,mBAAmB,yBAClB3E,OADkB,GAErB;UAAAuE,YAAY,EAAEA,YAAY,CAACK,MAA3B;UACAC,oBAAoB,EAAE7E,OAAO,CAAC6E,oBAAR,IAAgCC,oBAAoB,CAACC,MAD3E;UAEAC,aAAa,EAAE;YACXC,UAAU,EAAEjF,OAAO,CAACmD,OAAR,CAAgB+B,aADjB;YAEXC,IAAI,EAAEC,iBAAiB,CAACC;UAFb;QAFf,CAFqB,CAAnB;QAUN;QAAA;QAAA,EAAO,KAAKtF,YAAL,CAAkB4E,mBAAlB,CAAP;;;EACH,CA3Ba;EA6Bd;;;;AAIG;;;EACWhF,mDAAd,UAAkCK,OAAlC,EAAsEa,SAAtE,EAA0F;;;;;;;;YAEhFyE,uBAAuB,GAAG,WAAKzF,iBAAL,MAAsB,IAAtB,IAAsBK,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,gBAAF,CAAmBC,iBAAiB,CAACmF,qCAArC,EAA4EvF,OAAO,CAACM,aAApF,CAAhD;YACc;YAAA;YAAA,EAAM,KAAKkF,sBAAL,CAA4BxF,OAA5B,CAAN;;;YAAdyF,WAAW,GAAGvE,EAA0C,KAA1C,EAAd;YACAwE,eAAe,GAAG,KAAKC,0BAAL,CAAgC3F,OAAhC,CAAlB;YACAiB,OAAO,GAA2B,KAAK2E,yBAAL,CAA+B5F,OAAO,CAACgF,aAAvC,CAAlC;YACAa,UAAU,GAAsB;cAClCpE,QAAQ,EAAE,KAAKF,MAAL,CAAYC,WAAZ,CAAwBC,QADA;cAElCZ,SAAS,EAAEA,SAAS,CAACiF,kBAFa;cAGlCC,MAAM,EAAE/F,OAAO,CAAC+F,MAHkB;cAIlCC,MAAM,EAAEhG,OAAO,CAACgG,MAJkB;cAKlCnB,oBAAoB,EAAE7E,OAAO,CAAC6E,oBALI;cAMlCoB,qBAAqB,EAAEjG,OAAO,CAACiG,qBANG;cAOlCC,kBAAkB,EAAElG,OAAO,CAACkG,kBAPM;cAQlCC,SAAS,EAAEnG,OAAO,CAACmG,SARe;cASlCC,MAAM,EAAEpG,OAAO,CAACoG;YATkB,CAAhC;YAYAC,QAAQ,GAAGC,SAAS,CAACC,iBAAV,CAA4B1F,SAAS,CAAC2F,aAAtC,EAAqDd,eAArD,CAAX;YACN,OAAO;YAAA;YAAA,OAAKe,0BAAL,CAAgCJ,QAAhC,EAA0CZ,WAA1C,EAAuDxE,OAAvD,EAAgE4E,UAAhE,EACF1D,IADE,CACG,UAACC,MAAD,EAAO;cACTkD,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAEjD,cAAzB,CAAwC;gBACpCC,OAAO,EAAE;cAD2B,CAAxC;cAGA,OAAOF,MAAP;YACH,CANE,EAOFM,KAPE,CAOI,UAACC,KAAD,EAAM;cACT2C,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAEjD,cAAzB,CAAwC;gBACpCC,OAAO,EAAE;cAD2B,CAAxC;cAGA,MAAMK,KAAN;YACH,CAZE,EAAP;;;;EAaH,CAhCa;EAkCd;;;AAGG;;;EACKhD,kBAA0B,UAA1B,CAA0BgG,0BAA1B,GAAR,UAAmC3F,OAAnC,EAAqE;IACjE,IAAM0G,gBAAgB,GAAG,IAAIC,uBAAJ,EAAzB;;IAEA,IAAI3G,OAAO,CAAC4G,oBAAZ,EAAkC;MAC9BF,gBAAgB,CAACG,uBAAjB,CAAyC7G,OAAO,CAAC4G,oBAAjD;IACH;;IAED,OAAOF,gBAAgB,CAACI,iBAAjB,EAAP;EACH,CARO;EAUR;;;AAGG;;;EACWnH,kBAAsB,UAAtB,CAAsB6F,sBAAtB,GAAd,UAAqCxF,OAArC,EAAuE;;;;;;;;YAC7DM,aAAa,GAAGN,OAAO,CAACM,aAAxB;YACAgF,uBAAuB,GAAG,WAAKzF,iBAAL,MAAwB,IAAxB,IAAwBK,aAAxB,GAAwB,MAAxB,GAAwBA,oBAAiBE,iBAAiB,CAAC2G,mCAAnC,EAAwEzG,aAAxE,CAAlD;YACAoG,gBAAgB,GAAG,IAAIC,uBAAJ,EAAnB;YAEND,gBAAgB,CAACM,WAAjB,CAA6B,KAAKzF,MAAL,CAAYC,WAAZ,CAAwBC,QAArD;YAEAiF,gBAAgB,CAACO,SAAjB,CAA2BjH,OAAO,CAAC+F,MAAnC;YAEAW,gBAAgB,CAACQ,YAAjB,CAA8BC,SAAS,CAACC,mBAAxC;YAEAV,gBAAgB,CAACW,aAAjB;YAEAX,gBAAgB,CAACY,cAAjB,CAAgC,KAAK/F,MAAL,CAAYgG,WAA5C;YACAb,gBAAgB,CAACc,uBAAjB,CAAyC,KAAKjG,MAAL,CAAYkG,SAAZ,CAAsBC,WAA/D;YACAhB,gBAAgB,CAACiB,aAAjB;;YAEA,IAAI,KAAKC,sBAAT,EAAiC;cAC7BlB,gBAAgB,CAACmB,kBAAjB,CAAoC,KAAKD,sBAAzC;YACH;;YAEDlB,gBAAgB,CAACoB,gBAAjB,CAAkCxH,aAAlC;YAEAoG,gBAAgB,CAACqB,eAAjB,CAAiC/H,OAAO,CAACuE,YAAzC;;YAEA,IAAI,KAAKhD,MAAL,CAAYyG,iBAAZ,CAA8BC,YAAlC,EAAgD;cAC5CvB,gBAAgB,CAACwB,eAAjB,CAAiC,KAAK3G,MAAL,CAAYyG,iBAAZ,CAA8BC,YAA/D;YACH;;YAED,IAAI,KAAK1G,MAAL,CAAYyG,iBAAZ,CAA8BG,eAAlC,EAAmD;cACzCA,eAAe,GAAG,KAAK5G,MAAL,CAAYyG,iBAAZ,CAA8BG,eAAhD;cACNzB,gBAAgB,CAAC0B,kBAAjB,CAAoCD,eAAe,CAACE,SAApD;cACA3B,gBAAgB,CAAC4B,sBAAjB,CAAwCH,eAAe,CAACI,aAAxD;YACH;;kBAEGvI,OAAO,CAAC6E,oBAAR,KAAiCC,oBAAoB,CAAC0D,MAAtD,OAAyD;YAAA;YAAA,IAAzD;YACMC,iBAAiB,GAAG,IAAIC,iBAAJ,CAAsB,KAAK/G,WAA3B,CAApB;YACa;YAAA;YAAA,EAAM8G,iBAAiB,CAACE,WAAlB,CAA8B3I,OAA9B,CAAN;;;YAAb4I,UAAU,GAAG1H,EAA4C,KAA5C,EAAb;;YAENwF,gBAAgB,CAACmC,WAAjB,CAA6BD,UAAU,CAACE,YAAxC;;;;;;YACG,IAAI9I,OAAO,CAAC6E,oBAAR,KAAiCC,oBAAoB,CAACiE,GAA1D,EAA+D;cAClE,IAAI/I,OAAO,CAACgJ,MAAZ,EAAoB;gBAChBtC,gBAAgB,CAACuC,SAAjB,CAA2BjJ,OAAO,CAACgJ,MAAnC;cACH,CAFD,MAEO;gBACH1D,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAEjD,cAAzB,CAAwC;kBACpCC,OAAO,EAAE;gBAD2B,CAAxC;gBAGA,MAAMW,wBAAwB,CAACiG,wBAAzB,EAAN;cACH;YACJ;;;;;YAED,IAAI,CAACC,WAAW,CAACC,UAAZ,CAAuBpJ,OAAO,CAACgG,MAA/B,CAAD,IAA2C,KAAKzE,MAAL,CAAYC,WAAZ,CAAwB6H,kBAAxB,IAA8C,KAAK9H,MAAL,CAAYC,WAAZ,CAAwB6H,kBAAxB,CAA2C5G,MAA3C,GAAoD,CAAjJ,EAAoJ;cAChJiE,gBAAgB,CAAC4C,SAAjB,CAA2BtJ,OAAO,CAACgG,MAAnC,EAA2C,KAAKzE,MAAL,CAAYC,WAAZ,CAAwB6H,kBAAnE;YACH;;YAED,IAAI,KAAK9H,MAAL,CAAYgI,aAAZ,CAA0BC,oBAA1B,IAAkDxJ,OAAO,CAACgF,aAA9D,EAA6E;cACzE,QAAQhF,OAAO,CAACgF,aAAR,CAAsBG,IAA9B;gBACI,KAAKC,iBAAiB,CAACC,eAAvB;kBACI,IAAI;oBACMoE,UAAU,GAAGC,gCAAgC,CAAC1J,OAAO,CAACgF,aAAR,CAAsBC,UAAvB,CAA7C;oBACNyB,gBAAgB,CAACiD,SAAjB,CAA2BF,UAA3B;kBACH,CAHD,CAGE,OAAO/F,CAAP,EAAU;oBACR,KAAKnD,MAAL,CAAYC,OAAZ,CAAoB,qDAAqDkD,CAAzE;kBACH;;kBACD;;gBACJ,KAAK0B,iBAAiB,CAACwE,GAAvB;kBACIlD,gBAAgB,CAACmD,SAAjB,CAA2B7J,OAAO,CAACgF,aAAR,CAAsBC,UAAjD;kBACA;cAXR;YAaH;;YACDK,uBAAuB,SAAvB,2BAAuB,WAAvB,GAAuB,MAAvB,0BAAuB,CAAEjD,cAAzB,CAAwC;cACpCC,OAAO,EAAE;YAD2B,CAAxC;YAGA;YAAA;YAAA,EAAOoE,gBAAgB,CAACI,iBAAjB,EAAP;;;;EACH,CA1Ea;;EA2ElB,OAACnH,kBAAD;AAnQA,EAAwCmK,UAAxC","names":["__extends","RefreshTokenClient","configuration","performanceClient","_super","acquireToken","request","atsMeasurement","_a","startMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","logger","verbose","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_c","requestId","headers","_b","HeaderNames","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","forceCache","then","result","endMeasurement","success","refreshTokenSize","refresh_token","length","catch","error","_this","errorCode","subErrorCode","subError","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","RefreshTokenClientAcquireTokenWithCachedRefreshToken","refreshToken","readRefreshTokenFromCache","discardMeasurement","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireTokenMeasurement","RefreshTokenClientExecuteTokenRequest","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","endpoint","UrlString","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","BaseClientCreateTokenRequestHeaders","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","BaseClient"],"sources":["../../src/client/RefreshTokenClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\nimport { BaseClient } from \"./BaseClient\";\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\nimport { Authority } from \"../authority/Authority\";\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\nimport { GrantType, AuthenticationScheme, Errors, HeaderNames } from \"../utils/Constants\";\nimport { ResponseHandler } from \"../response/ResponseHandler\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\nimport { StringUtils } from \"../utils/StringUtils\";\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\nimport { NetworkResponse } from \"../network/NetworkManager\";\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { ClientAuthError } from \"../error/ClientAuthError\";\nimport { ServerError } from \"../error/ServerError\";\nimport { TimeUtils } from \"../utils/TimeUtils\";\nimport { UrlString } from \"../url/UrlString\";\nimport { CcsCredentialType } from \"../account/CcsCredential\";\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\n/**\n * OAuth2.0 refresh token client\n */\nexport class RefreshTokenClient extends BaseClient {\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\n        super(configuration, performanceClient);\n\n    }\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult> {\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n        const reqTimestamp = TimeUtils.nowSeconds();\n        const response = await this.executeTokenRequest(request, this.authority);\n\n        // Retrieve requestId from response headers\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\n\n        const responseHandler = new ResponseHandler(\n            this.config.authOptions.clientId,\n            this.cacheManager,\n            this.cryptoUtils,\n            this.logger,\n            this.config.serializableCache,\n            this.config.persistencePlugin\n        );\n\n        responseHandler.validateTokenResponse(response.body);\n\n        return responseHandler.handleServerTokenResponse(\n            response.body,\n            this.authority,\n            reqTimestamp,\n            request,\n            undefined,\n            undefined,\n            true,\n            request.forceCache,\n            requestId\n        ).then((result: AuthenticationResult) => {\n            atsMeasurement?.endMeasurement({\n                success: true,\n                refreshTokenSize: response.body.refresh_token?.length || 0\n            });\n            return result;\n        })\n            .catch((error) => {\n                this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n                atsMeasurement?.endMeasurement({\n                    errorCode: error.errorCode,\n                    subErrorCode: error.subError,\n                    success: false,\n                    refreshTokenSize: undefined\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\n     * @param request\n     */\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n            throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n            throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n\n        // try checking if FOCI is enabled for the given application\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n            try {\n                return this.acquireTokenWithCachedRefreshToken(request, true);\n            } catch (e) {\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\n                    // throw in all other cases\n                } else {\n                    throw e;\n                }\n            }\n        }\n        // fall back to application refresh token acquisition\n        return this.acquireTokenWithCachedRefreshToken(request, false);\n\n    }\n\n    /**\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\n     * @param request\n     */\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\n        // fetches family RT or application RT based on FOCI value\n\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n\n        if (!refreshToken) {\n            atsMeasurement?.discardMeasurement();\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement?.endMeasurement({\n            success: true\n        });\n\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\n            ...request,\n            refreshToken: refreshToken.secret,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            ccsCredential: {\n                credential: request.account.homeAccountId,\n                type: CcsCredentialType.HOME_ACCOUNT_ID\n            }\n        };\n\n        return this.acquireToken(refreshTokenRequest);\n    }\n\n    /**\n     * Constructs the network message and makes a NW call to the underlying secure token service\n     * @param request\n     * @param authority\n     */\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n        const requestBody = await this.createTokenRequestBody(request);\n        const queryParameters = this.createTokenQueryParameters(request);\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\n        const thumbprint: RequestThumbprint = {\n            clientId: this.config.authOptions.clientId,\n            authority: authority.canonicalAuthority,\n            scopes: request.scopes,\n            claims: request.claims,\n            authenticationScheme: request.authenticationScheme,\n            resourceRequestMethod: request.resourceRequestMethod,\n            resourceRequestUri: request.resourceRequestUri,\n            shrClaims: request.shrClaims,\n            sshKid: request.sshKid\n        };\n\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\n            .then((result) => {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: true\n                });\n                return result;\n            })\n            .catch((error) => {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw error;\n            });\n    }\n\n    /**\n     * Creates query string for the /token request\n     * @param request\n     */\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\n        const parameterBuilder = new RequestParameterBuilder();\n\n        if (request.tokenQueryParameters) {\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n        }\n\n        return parameterBuilder.createQueryString();\n    }\n\n    /**\n     * Helper function to create the token request body\n     * @param request\n     */\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\n        const correlationId = request.correlationId;\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n        const parameterBuilder = new RequestParameterBuilder();\n\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\n\n        parameterBuilder.addScopes(request.scopes);\n\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n\n        parameterBuilder.addClientInfo();\n\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n        parameterBuilder.addThrottling();\n\n        if (this.serverTelemetryManager) {\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n        }\n\n        parameterBuilder.addCorrelationId(correlationId);\n\n        parameterBuilder.addRefreshToken(request.refreshToken);\n\n        if (this.config.clientCredentials.clientSecret) {\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n        }\n\n        if (this.config.clientCredentials.clientAssertion) {\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n        }\n\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\n            if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n            } else {\n                acquireTokenMeasurement?.endMeasurement({\n                    success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n            }\n        }\n\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n        }\n\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n            switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                    try {\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                        parameterBuilder.addCcsOid(clientInfo);\n                    } catch (e) {\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                    }\n                    break;\n                case CcsCredentialType.UPN:\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                    break;\n            }\n        }\n        acquireTokenMeasurement?.endMeasurement({\n            success: true\n        });\n        return parameterBuilder.createQueryString();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}