{"ast":null,"code":"import _slicedToArray from\"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import{MsalProvider,AuthenticatedTemplate,UnauthenticatedTemplate,useMsal}from\"@azure/msal-react\";import{EventType,InteractionType}from\"@azure/msal-browser\";import{msalConfig,b2cPolicies}from\"./authConfig\";import{PageLayout,IdTokenClaims}from\"./ui.jsx\";import Component1 from\"./components/user/component1.jsx\";import Component2 from\"./components/user/component2.jsx\";import Button from\"react-bootstrap/Button\";import\"./styles/App.css\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var IdTokenContent=function IdTokenContent(){/**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */var _useMsal=useMsal(),accounts=_useMsal.accounts;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),idTokenClaims=_useState2[0],setIdTokenClaims=_useState2[1];function GetIdTokenClaims(){setIdTokenClaims(accounts[0].idTokenClaims);}return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h5\",{className:\"card-title\",children:[\"Welcome \",accounts[0].name]}),idTokenClaims?/*#__PURE__*/_jsx(IdTokenClaims,{idTokenClaims:idTokenClaims}):/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:GetIdTokenClaims,children:\"View ID Token Claims\"})]});};/**\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \n * only render their children if a user is authenticated or unauthenticated, respectively.\n */var MainContent=function MainContent(){var _useMsal2=useMsal(),instance=_useMsal2.instance;/**\n     * Using the event API, you can register an event callback that will do something when an event is emitted. \n     * When registering an event callback in a react component you will need to make sure you do 2 things.\n     * 1) The callback is registered only once\n     * 2) The callback is unregistered before the component unmounts.\n     * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n     */useEffect(function(){var callbackId=instance.addEventCallback(function(event){if(event.eventType===EventType.LOGIN_FAILURE){if(event.error&&event.error.errorMessage.indexOf(\"AADB2C90118\")>-1){if(event.interactionType===InteractionType.Redirect){instance.loginRedirect(b2cPolicies.authorities.forgotPassword);}else if(event.interactionType===InteractionType.Popup){instance.loginPopup(b2cPolicies.authorities.forgotPassword).catch(function(e){return;});}}}if(event.eventType===EventType.LOGIN_SUCCESS){if(event!==null&&event!==void 0&&event.payload){/**\n                     * We need to reject id tokens that were not issued with the default sign-in policy.\n                     * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n                     * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n                     */if(event.payload.idTokenClaims[\"acr\"]===b2cPolicies.names.forgotPassword){window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password\");return instance.logout();}}}});return function(){if(callbackId){instance.removeEventCallback(callbackId);}};},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(AuthenticatedTemplate,{children:/*#__PURE__*/_jsx(IdTokenContent,{})}),/*#__PURE__*/_jsx(UnauthenticatedTemplate,{children:/*#__PURE__*/_jsx(\"h5\",{className:\"card-title\",children:\"Please sign-in to see your profile information.\"})})]});};/**\n * msal-react is built on the React context API and all parts of your app that require authentication must be \n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */export default function App(_ref){var msalInstance=_ref.msalInstance;var name='Microsoft';var arr=['Microsoft','Google','Apple'];return/*#__PURE__*/_jsxs(\"div\",{children:[\"Hello from App.jsx\",/*#__PURE__*/_jsx(Component2,{x:name,y:\"5\"}),/*#__PURE__*/_jsx(MsalProvider,{instance:msalInstance,children:/*#__PURE__*/_jsx(PageLayout,{children:/*#__PURE__*/_jsx(MainContent,{})})})]});}","map":{"version":3,"names":["React","useState","useEffect","MsalProvider","AuthenticatedTemplate","UnauthenticatedTemplate","useMsal","EventType","InteractionType","msalConfig","b2cPolicies","PageLayout","IdTokenClaims","Component1","Component2","Button","IdTokenContent","accounts","idTokenClaims","setIdTokenClaims","GetIdTokenClaims","name","MainContent","instance","callbackId","addEventCallback","event","eventType","LOGIN_FAILURE","error","errorMessage","indexOf","interactionType","Redirect","loginRedirect","authorities","forgotPassword","Popup","loginPopup","catch","e","LOGIN_SUCCESS","payload","names","window","alert","logout","removeEventCallback","App","msalInstance","arr"],"sources":["/Users/aafshari/t20/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { MsalProvider, AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\n\nimport { msalConfig, b2cPolicies } from \"./authConfig\";\nimport { PageLayout, IdTokenClaims } from \"./ui.jsx\";\nimport Component1 from \"./components/user/component1.jsx\";\nimport Component2 from \"./components/user/component2.jsx\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./styles/App.css\";\n\nconst IdTokenContent = () => {\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { accounts } = useMsal();\n    const [idTokenClaims, setIdTokenClaims] = useState(null);\n\n    function GetIdTokenClaims() {\n        setIdTokenClaims(accounts[0].idTokenClaims)\n    }\n\n    return (\n        <>\n            <h5 className=\"card-title\">Welcome {accounts[0].name}</h5>\n            {idTokenClaims ?\n                <IdTokenClaims idTokenClaims={idTokenClaims} />\n                :\n                <Button variant=\"secondary\" onClick={GetIdTokenClaims}>View ID Token Claims</Button>\n            }\n        </>\n    );\n};\n\n/**\n * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \n * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \n * only render their children if a user is authenticated or unauthenticated, respectively.\n */\nconst MainContent = () => {\n\n    const { instance } = useMsal();\n\n    /**\n     * Using the event API, you can register an event callback that will do something when an event is emitted. \n     * When registering an event callback in a react component you will need to make sure you do 2 things.\n     * 1) The callback is registered only once\n     * 2) The callback is unregistered before the component unmounts.\n     * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n     */\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((event) => {\n            if (event.eventType === EventType.LOGIN_FAILURE) {\n                if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n                    if (event.interactionType === InteractionType.Redirect) {\n                        instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n                    } else if (event.interactionType === InteractionType.Popup) {\n                        instance.loginPopup(b2cPolicies.authorities.forgotPassword)\n                            .catch(e => {\n                                return;\n                            });\n                    }\n                }\n            }\n\n            if (event.eventType === EventType.LOGIN_SUCCESS) {\n                if (event?.payload) {\n                    /**\n                     * We need to reject id tokens that were not issued with the default sign-in policy.\n                     * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n                     * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n                     */\n                    if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n                        window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password\");\n                        return instance.logout();\n                    }\n                }\n            }\n        });\n\n        return () => {\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <AuthenticatedTemplate>\n                <IdTokenContent />\n            </AuthenticatedTemplate>\n\n            <UnauthenticatedTemplate>\n                <h5 className=\"card-title\">Please sign-in to see your profile information.</h5>\n            </UnauthenticatedTemplate>\n        </div>\n    );\n};\n\n/**\n * msal-react is built on the React context API and all parts of your app that require authentication must be \n * wrapped in the MsalProvider component. You will first need to initialize an instance of PublicClientApplication \n * then pass this to MsalProvider as a prop. All components underneath MsalProvider will have access to the \n * PublicClientApplication instance via context as well as all hooks and components provided by msal-react. For more,\n * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport default function App({msalInstance}) {\n    let name = 'Microsoft';\n    let arr = ['Microsoft','Google','Apple'];\n\n\n    return (\n        <div>\n         \n        Hello from App.jsx\n        \n              <Component2 x={name} y=\"5\"/>  \n         \n         <MsalProvider instance={msalInstance}>\n            <PageLayout>\n                <MainContent />\n            </PageLayout>\n</MsalProvider>  \n        </div>\n\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}