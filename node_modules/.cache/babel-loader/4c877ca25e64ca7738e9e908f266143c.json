{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\n\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n  /**\r\n   * XhrClient for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  XhrClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];\n      });\n    });\n  };\n  /**\r\n   * XhrClient for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  XhrClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];\n      });\n    });\n  };\n  /**\r\n   * Helper for XhrClient requests.\r\n   * @param url\r\n   * @param method\r\n   * @param options\r\n   */\n\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /* async: */\n      true);\n\n      _this.setXhrHeaders(xhr, options);\n\n      xhr.onload = function () {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        }\n\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n          var networkResponse = {\n            headers: _this.getHeaderDict(xhr),\n            body: jsonResponse,\n            status: xhr.status\n          };\n          resolve(networkResponse);\n        } catch (e) {\n          reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\n        }\n      };\n\n      xhr.onerror = function () {\n        if (window.navigator.onLine) {\n          if (method === HTTP_REQUEST_TYPE.POST) {\n            reject(BrowserAuthError.createPostRequestFailedError(\"Failed with status \" + xhr.status, url));\n          } else {\n            reject(BrowserAuthError.createGetRequestFailedError(\"Failed with status \" + xhr.status, url));\n          }\n        } else {\n          reject(BrowserAuthError.createNoNetworkConnectivityError());\n        }\n      };\n\n      if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\n        xhr.send(options.body);\n      } else if (method === HTTP_REQUEST_TYPE.GET) {\n        xhr.send();\n      } else {\n        throw BrowserAuthError.createHttpMethodNotImplementedError(method);\n      }\n    });\n  };\n  /**\r\n   * Helper to set XHR headers for request.\r\n   * @param xhr\r\n   * @param options\r\n   */\n\n\n  XhrClient.prototype.setXhrHeaders = function (xhr, options) {\n    if (options && options.headers) {\n      var headers_1 = options.headers;\n      Object.keys(headers_1).forEach(function (key) {\n        xhr.setRequestHeader(key, headers_1[key]);\n      });\n    }\n  };\n  /**\r\n   * Gets a string map of the headers received in the response.\r\n   *\r\n   * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n   * @param xhr\r\n   */\n\n\n  XhrClient.prototype.getHeaderDict = function (xhr) {\n    var headerString = xhr.getAllResponseHeaders();\n    var headerArr = headerString.trim().split(/[\\r\\n]+/);\n    var headerDict = {};\n    headerArr.forEach(function (value) {\n      var parts = value.split(\": \");\n      var headerName = parts.shift();\n      var headerVal = parts.join(\": \");\n\n      if (headerName && headerVal) {\n        headerDict[headerName] = headerVal;\n      }\n    });\n    return headerDict;\n  };\n\n  return XhrClient;\n}();\n\nexport { XhrClient };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;AASA;;;;;;;EAGA,sBA+GC;;;;;;;;;EAvGSA,0CAAN,UAA6BC,GAA7B,EAA0CC,OAA1C,EAAyE;;;QACrE;QAAA;QAAA,EAAO,KAAKC,gBAAL,CAAsBF,GAAtB,EAA2BG,iBAAiB,CAACC,GAA7C,EAAkDH,OAAlD,CAAP;;;EACH,CAFK;;;;;;;;;EAUAF,2CAAN,UAA8BC,GAA9B,EAA2CC,OAA3C,EAA0E;;;QACtE;QAAA;QAAA,EAAO,KAAKC,gBAAL,CAAsBF,GAAtB,EAA2BG,iBAAiB,CAACE,IAA7C,EAAmDJ,OAAnD,CAAP;;;EACH,CAFK;;;;;;;;;EAUEF,uCAAR,UAA4BC,GAA5B,EAAyCM,MAAzC,EAAoEL,OAApE,EAAmG;IAAnG;;IACI,OAAO,IAAIM,OAAJ,CAAgC,UAACC,OAAD,EAAUC,MAAV,EAAgB;MACnD,IAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;MACAD,GAAG,CAACE,IAAJ,CAASN,MAAT,EAAiBN,GAAjB;MAAoB;MAAe,IAAnC;;MACAa,KAAI,CAACC,aAAL,CAAmBJ,GAAnB,EAAwBT,OAAxB;;MACAS,GAAG,CAACK,MAAJ,GAAa;QACT,IAAIL,GAAG,CAACM,MAAJ,GAAa,GAAb,IAAoBN,GAAG,CAACM,MAAJ,IAAc,GAAtC,EAA2C;UACvC,IAAIV,MAAM,KAAKH,iBAAiB,CAACE,IAAjC,EAAuC;YACnCI,MAAM,CAACQ,gBAAgB,CAACC,4BAAjB,CAA8C,wBAAsBR,GAAG,CAACM,MAAxE,EAAkFhB,GAAlF,CAAD,CAAN;UACH,CAFD,MAEO;YACHS,MAAM,CAACQ,gBAAgB,CAACE,2BAAjB,CAA6C,wBAAsBT,GAAG,CAACM,MAAvE,EAAiFhB,GAAjF,CAAD,CAAN;UACH;QACJ;;QACD,IAAI;UACA,IAAMoB,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACa,YAAf,CAArB;UACA,IAAMC,eAAe,GAAuB;YACxCC,OAAO,EAAEZ,KAAI,CAACa,aAAL,CAAmBhB,GAAnB,CAD+B;YAExCiB,IAAI,EAAEP,YAFkC;YAGxCJ,MAAM,EAAEN,GAAG,CAACM;UAH4B,CAA5C;UAKAR,OAAO,CAACgB,eAAD,CAAP;QACH,CARD,CAQE,OAAOI,CAAP,EAAU;UACRnB,MAAM,CAACQ,gBAAgB,CAACY,uCAAjB,CAAyD7B,GAAzD,CAAD,CAAN;QACH;MACJ,CAnBD;;MAqBAU,GAAG,CAACoB,OAAJ,GAAc;QACV,IAAIC,MAAM,CAACC,SAAP,CAAiBC,MAArB,EAA6B;UACzB,IAAI3B,MAAM,KAAKH,iBAAiB,CAACE,IAAjC,EAAuC;YACnCI,MAAM,CAACQ,gBAAgB,CAACC,4BAAjB,CAA8C,wBAAsBR,GAAG,CAACM,MAAxE,EAAkFhB,GAAlF,CAAD,CAAN;UACH,CAFD,MAEO;YACHS,MAAM,CAACQ,gBAAgB,CAACE,2BAAjB,CAA6C,wBAAsBT,GAAG,CAACM,MAAvE,EAAiFhB,GAAjF,CAAD,CAAN;UACH;QACJ,CAND,MAMO;UACHS,MAAM,CAACQ,gBAAgB,CAACiB,gCAAjB,EAAD,CAAN;QACH;MACJ,CAVD;;MAYA,IAAI5B,MAAM,KAAKH,iBAAiB,CAACE,IAA7B,IAAqCJ,OAArC,IAAgDA,OAAO,CAAC0B,IAA5D,EAAkE;QAC9DjB,GAAG,CAACyB,IAAJ,CAASlC,OAAO,CAAC0B,IAAjB;MACH,CAFD,MAEO,IAAIrB,MAAM,KAAKH,iBAAiB,CAACC,GAAjC,EAAsC;QACzCM,GAAG,CAACyB,IAAJ;MACH,CAFM,MAEA;QACH,MAAMlB,gBAAgB,CAACmB,mCAAjB,CAAqD9B,MAArD,CAAN;MACH;IACJ,CA5CM,CAAP;EA6CH,CA9CO;;;;;;;;EAqDAP,oCAAR,UAAsBW,GAAtB,EAA2CT,OAA3C,EAA0E;IACtE,IAAIA,OAAO,IAAIA,OAAO,CAACwB,OAAvB,EAAgC;MAC5B,IAAMY,SAAO,GAAGpC,OAAO,CAACwB,OAAxB;MACAa,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAqBG,OAArB,CAA6B,UAACC,GAAD,EAAY;QACrC/B,GAAG,CAACgC,gBAAJ,CAAqBD,GAArB,EAA0BJ,SAAO,CAACI,GAAD,CAAjC;MACH,CAFD;IAGH;EACJ,CAPO;;;;;;;;;EAeA1C,oCAAR,UAAsBW,GAAtB,EAAyC;IACrC,IAAMiC,YAAY,GAAGjC,GAAG,CAACkC,qBAAJ,EAArB;IACA,IAAMC,SAAS,GAAGF,YAAY,CAACG,IAAb,GAAoBC,KAApB,CAA0B,SAA1B,CAAlB;IACA,IAAMC,UAAU,GAA2B,EAA3C;IACAH,SAAS,CAACL,OAAV,CAAkB,UAACS,KAAD,EAAc;MAC5B,IAAMC,KAAK,GAAGD,KAAK,CAACF,KAAN,CAAY,IAAZ,CAAd;MACA,IAAMI,UAAU,GAAGD,KAAK,CAACE,KAAN,EAAnB;MACA,IAAMC,SAAS,GAAGH,KAAK,CAACI,IAAN,CAAW,IAAX,CAAlB;;MACA,IAAIH,UAAU,IAAIE,SAAlB,EAA6B;QACzBL,UAAU,CAACG,UAAD,CAAV,GAAyBE,SAAzB;MACH;IACJ,CAPD;IASA,OAAOL,UAAP;EACH,CAdO;;EAeZ;AAAC","names":["XhrClient","url","options","sendRequestAsync","HTTP_REQUEST_TYPE","GET","POST","method","Promise","resolve","reject","xhr","XMLHttpRequest","open","_this","setXhrHeaders","onload","status","BrowserAuthError","createPostRequestFailedError","createGetRequestFailedError","jsonResponse","JSON","parse","responseText","networkResponse","headers","getHeaderDict","body","e","createFailedToParseNetworkResponseError","onerror","window","navigator","onLine","createNoNetworkConnectivityError","send","createHttpMethodNotImplementedError","headers_1","Object","keys","forEach","key","setRequestHeader","headerString","getAllResponseHeaders","headerArr","trim","split","headerDict","value","parts","headerName","shift","headerVal","join"],"sources":["../../src/network/XhrClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This client implements the XMLHttpRequest class to send GET and POST requests.\r\n */\r\nexport class XhrClient implements INetworkModule {\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options);\r\n    }\r\n\r\n    /**\r\n     * XhrClient for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options);\r\n    }\r\n\r\n    /**\r\n     * Helper for XhrClient requests.\r\n     * @param url \r\n     * @param method \r\n     * @param options \r\n     */\r\n    private sendRequestAsync<T>(url: string, method: HTTP_REQUEST_TYPE, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        return new Promise<NetworkResponse<T>>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /* async: */ true);\r\n            this.setXhrHeaders(xhr, options);\r\n            xhr.onload = (): void => {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    } else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    }\r\n                }\r\n                try {\r\n                    const jsonResponse = JSON.parse(xhr.responseText) as T;\r\n                    const networkResponse: NetworkResponse<T> = {\r\n                        headers: this.getHeaderDict(xhr),\r\n                        body: jsonResponse,\r\n                        status: xhr.status\r\n                    };\r\n                    resolve(networkResponse);\r\n                } catch (e) {\r\n                    reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = (): void => {\r\n                if (window.navigator.onLine) {\r\n                    if (method === HTTP_REQUEST_TYPE.POST) {\r\n                        reject(BrowserAuthError.createPostRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    } else {\r\n                        reject(BrowserAuthError.createGetRequestFailedError(`Failed with status ${xhr.status}`, url));\r\n                    }\r\n                } else {\r\n                    reject(BrowserAuthError.createNoNetworkConnectivityError());\r\n                }\r\n            };\r\n\r\n            if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {\r\n                xhr.send(options.body);\r\n            } else if (method === HTTP_REQUEST_TYPE.GET) {\r\n                xhr.send();\r\n            } else {\r\n                throw BrowserAuthError.createHttpMethodNotImplementedError(method);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Helper to set XHR headers for request.\r\n     * @param xhr \r\n     * @param options \r\n     */\r\n    private setXhrHeaders(xhr: XMLHttpRequest, options?: NetworkRequestOptions): void {\r\n        if (options && options.headers) {\r\n            const headers = options.headers;\r\n            Object.keys(headers).forEach((key: string) => {\r\n                xhr.setRequestHeader(key, headers[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string map of the headers received in the response.\r\n     * \r\n     * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\r\n     * @param xhr \r\n     */\r\n    private getHeaderDict(xhr: XMLHttpRequest): Record<string, string> {\r\n        const headerString = xhr.getAllResponseHeaders();\r\n        const headerArr = headerString.trim().split(/[\\r\\n]+/);\r\n        const headerDict: Record<string, string> = {};\r\n        headerArr.forEach((value: string) => {\r\n            const parts = value.split(\": \");\r\n            const headerName = parts.shift();\r\n            const headerVal = parts.join(\": \");\r\n            if (headerName && headerVal) {\r\n                headerDict[headerName] = headerVal;\r\n            }\r\n        });\r\n\r\n        return headerDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}