{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { OIDC_SCOPES } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\n\nvar ScopeSet =\n/** @class */\nfunction () {\n  function ScopeSet(inputScopes) {\n    var _this = this; // Filter empty string and null/undefined array items\n\n\n    var scopeArr = inputScopes ? StringUtils$1.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils$1.removeEmptyStringsFromArray(scopeArr) : []; // Validate and filter scopes (validate function throws if validation fails)\n\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n\n\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || \"\";\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n\n\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError$1.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes); // compare lowercase scopes\n\n    return !StringUtils$1.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n\n\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n\n\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n\n\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils$1.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n\n\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError$1.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n\n\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils$1.isEmpty(scope)) {\n      throw ClientAuthError$1.createRemoveEmptyScopeFromSetError(scope);\n    }\n\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n\n\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError$1.createEmptyInputScopeSetError();\n    }\n\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n\n\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError$1.createEmptyInputScopeSetError();\n    } // Do not allow OIDC scopes to be the only intersecting scopes\n\n\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n\n\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n\n\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n\n\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n\n    return \"\";\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n\n\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n\n  return ScopeSet;\n}();\n\nexport { ScopeSet };","map":{"version":3,"mappings":"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","names":["inputScopes","scopeArr","StringUtils","trimArrayEntries","__spreadArrays","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","add","scope","ScopeSet","inputScopeString","scopeString","split","length","ClientConfigurationError","createEmptyScopesArrayError","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","scopeSet","size","asArray","every","containsScope","defaultScopeCount","OIDC_SCOPES","defaultScope","_this","newScope","trim","newScopes","appendScope","e","ClientAuthError","createAppendScopeSetError","createRemoveEmptyScopeFromSetError","delete","otherScopes","createEmptyInputScopeSetError","unionScopes","containsOnlyOIDCScopes","removeOIDCScopes","unionScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","push","val","join","printScopes"],"sources":["../../src/request/ScopeSet.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { OIDC_SCOPES } from \"../utils/Constants\";\r\n\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nexport class ScopeSet {\r\n    // Scopes as a Set of strings\r\n    private scopes: Set<string>;\r\n\r\n    constructor(inputScopes: Array<string>) {\r\n        // Filter empty string and null/undefined array items\r\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\r\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n\r\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(scope => this.scopes.add(scope));\r\n    }\r\n\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    static fromString(inputScopeString: string): ScopeSet {\r\n        const scopeString = inputScopeString || \"\";\r\n        const inputScopes: Array<string> = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    }\r\n\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    private validateInputScopes(inputScopes: Array<string>): void {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    containsScope(scope: string): boolean {\r\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    }\r\n\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    containsScopeSet(scopeSet: ScopeSet): boolean {\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\r\n    }\r\n\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    containsOnlyOIDCScopes(): boolean {\r\n        let defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach((defaultScope: string) => {\r\n            if (this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n\r\n        return this.scopes.size === defaultScopeCount;\r\n    }\r\n\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    appendScope(newScope: string): void {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    appendScopes(newScopes: Array<string>): void {\r\n        try {\r\n            newScopes.forEach(newScope => this.appendScope(newScope));\r\n        } catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    removeScope(scope: string): void {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    }\r\n\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    removeOIDCScopes(): void {\r\n        OIDC_SCOPES.forEach((defaultScope: string) => {\r\n            this.scopes.delete(defaultScope);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\r\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\r\n        return unionScopes;\r\n    }\r\n\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        \r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        const unionScopes = this.unionScopeSets(otherScopes);\r\n        const sizeOtherScopes = otherScopes.getScopeCount();\r\n        const sizeThisScopes = this.getScopeCount();\r\n        const sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    }\r\n\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    getScopeCount(): number {\r\n        return this.scopes.size;\r\n    }\r\n\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    asArray(): Array<string> {\r\n        const array: Array<string> = [];\r\n        this.scopes.forEach(val => array.push(val));\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    printScopes(): string {\r\n        if (this.scopes) {\r\n            const scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    printScopesLowerCase(): string {\r\n        return this.printScopes().toLowerCase();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}