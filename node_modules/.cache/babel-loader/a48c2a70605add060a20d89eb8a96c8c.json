{"ast":null,"code":"import _regeneratorRuntime from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/Users/aafshari/t20/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport React__default, { createContext, useEffect, useMemo, useReducer, useContext, useState, useRef, useCallback } from 'react';\nimport { stubbedPublicClientApplication, InteractionStatus, Logger, WrapperSKU, EventMessageUtils, AccountEntity, AuthError, InteractionType, InteractionRequiredAuthError, EventType, OIDC_DEFAULT_SCOPES } from '@azure/msal-browser';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */\n\nvar defaultMsalContext = {\n  instance: stubbedPublicClientApplication,\n  inProgress: InteractionStatus.None,\n  accounts: [],\n  logger: /*#__PURE__*/new Logger({})\n};\nvar MsalContext = /*#__PURE__*/createContext(defaultMsalContext);\nvar MsalConsumer = MsalContext.Consumer;\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction getChildrenOrFunction(children, args) {\n  if (typeof children === \"function\") {\n    return children(args);\n  }\n\n  return children;\n}\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA\r\n * @param arrayB\r\n */\n\n\nfunction accountArraysAreEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  var comparisonArray = _toConsumableArray(arrayB);\n\n  return arrayA.every(function (elementA) {\n    var elementB = comparisonArray.shift();\n\n    if (!elementA || !elementB) {\n      return false;\n    }\n\n    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n  });\n}\n\nfunction getAccountByIdentifiers(allAccounts, accountIdentifiers) {\n  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n    var matchedAccounts = allAccounts.filter(function (accountObj) {\n      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n        return false;\n      }\n\n      return true;\n    });\n    return matchedAccounts[0] || null;\n  } else {\n    return null;\n  }\n}\n/* eslint-disable header/header */\n\n\nvar name = \"@azure/msal-react\";\nvar version = \"1.4.8\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar MsalProviderActionType;\n\n(function (MsalProviderActionType) {\n  MsalProviderActionType[\"UNBLOCK_INPROGRESS\"] = \"UNBLOCK_INPROGRESS\";\n  MsalProviderActionType[\"EVENT\"] = \"EVENT\";\n})(MsalProviderActionType || (MsalProviderActionType = {}));\n/**\r\n * Returns the next inProgress and accounts state based on event message\r\n * @param previousState\r\n * @param action\r\n */\n\n\nvar reducer = function reducer(previousState, action) {\n  var type = action.type,\n      payload = action.payload;\n  var newInProgress = previousState.inProgress;\n\n  switch (type) {\n    case MsalProviderActionType.UNBLOCK_INPROGRESS:\n      if (previousState.inProgress === InteractionStatus.Startup) {\n        newInProgress = InteractionStatus.None;\n        payload.logger.info(\"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\");\n      }\n\n      break;\n\n    case MsalProviderActionType.EVENT:\n      var message = payload.message;\n      var status = EventMessageUtils.getInteractionStatusFromEvent(message, previousState.inProgress);\n\n      if (status) {\n        payload.logger.info(\"MsalProvider - \".concat(message.eventType, \" results in setting inProgress from \").concat(previousState.inProgress, \" to \").concat(status));\n        newInProgress = status;\n      }\n\n      break;\n\n    default:\n      throw new Error(\"Unknown action type: \".concat(type));\n  }\n\n  var currentAccounts = payload.instance.getAllAccounts();\n\n  if (newInProgress !== previousState.inProgress && !accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n    // Both inProgress and accounts changed\n    return _objectSpread(_objectSpread({}, previousState), {}, {\n      inProgress: newInProgress,\n      accounts: currentAccounts\n    });\n  } else if (newInProgress !== previousState.inProgress) {\n    // Only only inProgress changed\n    return _objectSpread(_objectSpread({}, previousState), {}, {\n      inProgress: newInProgress\n    });\n  } else if (!accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n    // Only accounts changed\n    return _objectSpread(_objectSpread({}, previousState), {}, {\n      accounts: currentAccounts\n    });\n  } else {\n    // Nothing changed\n    return previousState;\n  }\n};\n/**\r\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\r\n */\n\n\nfunction MsalProvider(_ref) {\n  var instance = _ref.instance,\n      children = _ref.children;\n  useEffect(function () {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]); // Create a logger instance for msal-react with the same options as PublicClientApplication\n\n  var logger = useMemo(function () {\n    return instance.getLogger().clone(name, version);\n  }, [instance]);\n\n  var _useReducer = useReducer(reducer, undefined, function () {\n    // Lazy initialization of the initial state\n    return {\n      inProgress: InteractionStatus.Startup,\n      accounts: instance.getAllAccounts()\n    };\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      updateState = _useReducer2[1];\n\n  useEffect(function () {\n    var callbackId = instance.addEventCallback(function (message) {\n      updateState({\n        payload: {\n          instance: instance,\n          logger: logger,\n          message: message\n        },\n        type: MsalProviderActionType.EVENT\n      });\n    });\n    logger.verbose(\"MsalProvider - Registered event callback with id: \".concat(callbackId));\n    instance.initialize().then(function () {\n      instance.handleRedirectPromise().catch(function () {\n        // Errors should be handled by listening to the LOGIN_FAILURE event\n        return;\n      }).finally(function () {\n        /*\r\n         * If handleRedirectPromise returns a cached promise the necessary events may not be fired\r\n         * This is a fallback to prevent inProgress from getting stuck in 'startup'\r\n         */\n        updateState({\n          payload: {\n            instance: instance,\n            logger: logger\n          },\n          type: MsalProviderActionType.UNBLOCK_INPROGRESS\n        });\n      });\n    });\n    return function () {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(\"MsalProvider - Removing event callback \".concat(callbackId));\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  var contextValue = {\n    instance: instance,\n    inProgress: state.inProgress,\n    accounts: state.accounts,\n    logger: logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Returns Msal Context values\r\n */\n\n\nvar useMsal = function useMsal() {\n  return useContext(MsalContext);\n};\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction isAuthenticated(allAccounts, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!getAccountByIdentifiers(allAccounts, matchAccount);\n  }\n\n  return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\n\n\nfunction useIsAuthenticated(matchAccount) {\n  var _useMsal = useMsal(),\n      allAccounts = _useMsal.accounts;\n\n  var _useState = useState(function () {\n    return isAuthenticated(allAccounts, matchAccount);\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasAuthenticated = _useState2[0],\n      setHasAuthenticated = _useState2[1];\n\n  useEffect(function () {\n    setHasAuthenticated(isAuthenticated(allAccounts, matchAccount));\n  }, [allAccounts, matchAccount]);\n  return hasAuthenticated;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is authenticated\r\n * @param props\r\n */\n\n\nfunction AuthenticatedTemplate(_ref) {\n  var username = _ref.username,\n      homeAccountId = _ref.homeAccountId,\n      localAccountId = _ref.localAccountId,\n      children = _ref.children;\n  var context = useMsal();\n  var accountIdentifier = useMemo(function () {\n    return {\n      username: username,\n      homeAccountId: homeAccountId,\n      localAccountId: localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  var isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is unauthenticated\r\n * @param props\r\n */\n\n\nfunction UnauthenticatedTemplate(_ref) {\n  var username = _ref.username,\n      homeAccountId = _ref.homeAccountId,\n      localAccountId = _ref.localAccountId,\n      children = _ref.children;\n  var context = useMsal();\n  var accountIdentifier = useMemo(function () {\n    return {\n      username: username,\n      homeAccountId: homeAccountId,\n      localAccountId: localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  var isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction getAccount(instance, accountIdentifiers) {\n  if (!accountIdentifiers || !accountIdentifiers.homeAccountId && !accountIdentifiers.localAccountId && !accountIdentifiers.username) {\n    // If no account identifiers are provided, return active account\n    return instance.getActiveAccount();\n  }\n\n  return getAccountByIdentifiers(instance.getAllAccounts(), accountIdentifiers);\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useAccount(accountIdentifiers) {\n  var _useMsal2 = useMsal(),\n      instance = _useMsal2.instance,\n      inProgress = _useMsal2.inProgress,\n      logger = _useMsal2.logger;\n\n  var _useState3 = useState(function () {\n    return getAccount(instance, accountIdentifiers);\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      account = _useState4[0],\n      setAccount = _useState4[1];\n\n  useEffect(function () {\n    setAccount(function (currentAccount) {\n      var nextAccount = getAccount(instance, accountIdentifiers);\n\n      if (!AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n        logger.info(\"useAccount - Updating account\");\n        return nextAccount;\n      }\n\n      return currentAccount;\n    });\n  }, [inProgress, accountIdentifiers, instance, logger]);\n  return account;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nvar ReactAuthErrorMessage = {\n  invalidInteractionType: {\n    code: \"invalid_interaction_type\",\n    desc: \"The provided interaction type is invalid.\"\n  },\n  unableToFallbackToInteraction: {\n    code: \"unable_to_fallback_to_interaction\",\n    desc: \"Interaction is required but another interaction is already in progress. Please try again when the current interaction is complete.\"\n  }\n};\n\nvar ReactAuthError = /*#__PURE__*/function (_AuthError) {\n  _inherits(ReactAuthError, _AuthError);\n\n  var _super = _createSuper(ReactAuthError);\n\n  function ReactAuthError(errorCode, errorMessage) {\n    var _this;\n\n    _classCallCheck(this, ReactAuthError);\n\n    _this = _super.call(this, errorCode, errorMessage);\n    Object.setPrototypeOf(_assertThisInitialized(_this), ReactAuthError.prototype);\n    _this.name = \"ReactAuthError\";\n    return _this;\n  }\n\n  _createClass(ReactAuthError, null, [{\n    key: \"createInvalidInteractionTypeError\",\n    value: function createInvalidInteractionTypeError() {\n      return new ReactAuthError(ReactAuthErrorMessage.invalidInteractionType.code, ReactAuthErrorMessage.invalidInteractionType.desc);\n    }\n  }, {\n    key: \"createUnableToFallbackToInteractionError\",\n    value: function createUnableToFallbackToInteractionError() {\n      return new ReactAuthError(ReactAuthErrorMessage.unableToFallbackToInteraction.code, ReactAuthErrorMessage.unableToFallbackToInteraction.desc);\n    }\n  }]);\n\n  return ReactAuthError;\n}(AuthError);\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * If a user is not currently signed in this hook invokes a login. Failed logins can be retried using the login callback returned.\r\n * If a user is currently signed in this hook attempts to acquire a token. Subsequent token requests can use the acquireToken callback returned.\r\n * Optionally provide a request object to be used in the login/acquireToken call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType\r\n * @param authenticationRequest\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n  var _useMsal3 = useMsal(),\n      instance = _useMsal3.instance,\n      inProgress = _useMsal3.inProgress,\n      logger = _useMsal3.logger;\n\n  var isAuthenticated = useIsAuthenticated(accountIdentifiers);\n  var account = useAccount(accountIdentifiers);\n\n  var _useState5 = useState([null, null]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      _useState6$ = _slicedToArray(_useState6[0], 2),\n      result = _useState6$[0],\n      error = _useState6$[1],\n      setResponse = _useState6[1]; // Boolean used to check if interaction is in progress in acquireTokenSilent fallback. Use Ref instead of state to prevent acquireToken function from being regenerated on each change to interactionInProgress value\n\n\n  var interactionInProgress = useRef(inProgress !== InteractionStatus.None);\n  useEffect(function () {\n    interactionInProgress.current = inProgress !== InteractionStatus.None;\n  }, [inProgress]); // Flag used to control when the hook calls login/acquireToken\n\n  var shouldAcquireToken = useRef(true);\n  useEffect(function () {\n    if (!!error) {\n      // Errors should be handled by consuming component\n      shouldAcquireToken.current = false;\n      return;\n    }\n\n    if (!!result) {\n      // Token has already been acquired, consuming component/application is responsible for renewing\n      shouldAcquireToken.current = false;\n      return;\n    }\n  }, [error, result]);\n  var login = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callbackInteractionType, callbackRequest) {\n      var loginType, loginRequest;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              loginType = callbackInteractionType || interactionType;\n              loginRequest = callbackRequest || authenticationRequest;\n              _context.t0 = loginType;\n              _context.next = _context.t0 === InteractionType.Popup ? 5 : _context.t0 === InteractionType.Redirect ? 7 : _context.t0 === InteractionType.Silent ? 9 : 11;\n              break;\n\n            case 5:\n              logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n              return _context.abrupt(\"return\", instance.loginPopup(loginRequest));\n\n            case 7:\n              // This promise is not expected to resolve due to full frame redirect\n              logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n              return _context.abrupt(\"return\", instance.loginRedirect(loginRequest).then(null));\n\n            case 9:\n              logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n              return _context.abrupt(\"return\", instance.ssoSilent(loginRequest));\n\n            case 11:\n              throw ReactAuthError.createInvalidInteractionTypeError();\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [instance, interactionType, authenticationRequest, logger]);\n  var acquireToken = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(callbackInteractionType, callbackRequest) {\n      var fallbackInteractionType, tokenRequest, getToken;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              fallbackInteractionType = callbackInteractionType || interactionType;\n\n              if (callbackRequest) {\n                logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the callback\");\n                tokenRequest = _objectSpread({}, callbackRequest);\n              } else if (authenticationRequest) {\n                logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the hook\");\n                tokenRequest = _objectSpread(_objectSpread({}, authenticationRequest), {}, {\n                  scopes: authenticationRequest.scopes || OIDC_DEFAULT_SCOPES\n                });\n              } else {\n                logger.trace(\"useMsalAuthentication - acquireToken - No request object provided, using default request.\");\n                tokenRequest = {\n                  scopes: OIDC_DEFAULT_SCOPES\n                };\n              }\n\n              if (!tokenRequest.account && account) {\n                logger.trace(\"useMsalAuthentication - acquireToken - Attaching account to request\");\n                tokenRequest.account = account;\n              }\n\n              getToken = /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          logger.verbose(\"useMsalAuthentication - Calling acquireTokenSilent\");\n                          return _context3.abrupt(\"return\", instance.acquireTokenSilent(tokenRequest).catch( /*#__PURE__*/function () {\n                            var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {\n                              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                                while (1) {\n                                  switch (_context2.prev = _context2.next) {\n                                    case 0:\n                                      if (!(e instanceof InteractionRequiredAuthError)) {\n                                        _context2.next = 8;\n                                        break;\n                                      }\n\n                                      if (interactionInProgress.current) {\n                                        _context2.next = 6;\n                                        break;\n                                      }\n\n                                      logger.error(\"useMsalAuthentication - Interaction required, falling back to interaction\");\n                                      return _context2.abrupt(\"return\", login(fallbackInteractionType, tokenRequest));\n\n                                    case 6:\n                                      logger.error(\"useMsalAuthentication - Interaction required but is already in progress. Please try again, if needed, after interaction completes.\");\n                                      throw ReactAuthError.createUnableToFallbackToInteractionError();\n\n                                    case 8:\n                                      throw e;\n\n                                    case 9:\n                                    case \"end\":\n                                      return _context2.stop();\n                                  }\n                                }\n                              }, _callee2);\n                            }));\n\n                            return function (_x5) {\n                              return _ref5.apply(this, arguments);\n                            };\n                          }()));\n\n                        case 2:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function getToken() {\n                  return _ref4.apply(this, arguments);\n                };\n              }();\n\n              return _context4.abrupt(\"return\", getToken().then(function (response) {\n                setResponse([response, null]);\n                return response;\n              }).catch(function (e) {\n                setResponse([null, e]);\n                throw e;\n              }));\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [instance, interactionType, authenticationRequest, logger, account, login]);\n  useEffect(function () {\n    var callbackId = instance.addEventCallback(function (message) {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n          if (message.payload) {\n            setResponse([message.payload, null]);\n          }\n\n          break;\n\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n          if (message.error) {\n            setResponse([null, message.error]);\n          }\n\n          break;\n      }\n    });\n    logger.verbose(\"useMsalAuthentication - Registered event callback with id: \".concat(callbackId));\n    return function () {\n      if (callbackId) {\n        logger.verbose(\"useMsalAuthentication - Removing event callback \".concat(callbackId));\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  useEffect(function () {\n    if (shouldAcquireToken.current && inProgress === InteractionStatus.None) {\n      shouldAcquireToken.current = false;\n\n      if (!isAuthenticated) {\n        logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n        login().catch(function () {\n          // Errors are saved in state above\n          return;\n        });\n      } else if (account) {\n        logger.info(\"useMsalAuthentication - User is authenticated, attempting to acquire token\");\n        acquireToken().catch(function () {\n          // Errors are saved in state above\n          return;\n        });\n      }\n    }\n  }, [isAuthenticated, account, inProgress, login, acquireToken, logger]);\n  return {\n    login: login,\n    acquireToken: acquireToken,\n    result: result,\n    error: error\n  };\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */\n\n\nfunction MsalAuthenticationTemplate(_ref) {\n  var interactionType = _ref.interactionType,\n      username = _ref.username,\n      homeAccountId = _ref.homeAccountId,\n      localAccountId = _ref.localAccountId,\n      authenticationRequest = _ref.authenticationRequest,\n      LoadingComponent = _ref.loadingComponent,\n      ErrorComponent = _ref.errorComponent,\n      children = _ref.children;\n  var accountIdentifier = useMemo(function () {\n    return {\n      username: username,\n      homeAccountId: homeAccountId,\n      localAccountId: localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  var context = useMsal();\n  var msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n  var isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n    if (!!ErrorComponent) {\n      return React__default.createElement(ErrorComponent, Object.assign({}, msalAuthResult));\n    }\n\n    throw msalAuthResult.error;\n  }\n\n  if (isAuthenticated) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, msalAuthResult));\n  }\n\n  if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n    return React__default.createElement(LoadingComponent, Object.assign({}, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\r\n * @param Component\r\n */\n\n\nvar withMsal = function withMsal(Component) {\n  var ComponentWithMsal = function ComponentWithMsal(props) {\n    var msal = useMsal();\n    return React__default.createElement(Component, Object.assign({}, props, {\n      msalContext: msal\n    }));\n  };\n\n  var componentName = Component.displayName || Component.name || \"Component\";\n  ComponentWithMsal.displayName = \"withMsal(\".concat(componentName, \")\");\n  return ComponentWithMsal;\n};\n\nexport { AuthenticatedTemplate, MsalAuthenticationTemplate, MsalConsumer, MsalContext, MsalProvider, UnauthenticatedTemplate, useAccount, useIsAuthenticated, useMsal, useMsalAuthentication, version, withMsal };","map":{"version":3,"mappings":"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","names":["defaultMsalContext","instance","stubbedPublicClientApplication","inProgress","InteractionStatus","None","accounts","logger","Logger","MsalContext","React","MsalConsumer","Consumer","getChildrenOrFunction","children","args","accountArraysAreEqual","arrayA","arrayB","length","comparisonArray","every","elementA","elementB","shift","homeAccountId","localAccountId","username","getAccountByIdentifiers","allAccounts","accountIdentifiers","matchedAccounts","filter","accountObj","toLowerCase","name","version","MsalProviderActionType","reducer","previousState","action","type","payload","newInProgress","UNBLOCK_INPROGRESS","Startup","info","EVENT","message","status","EventMessageUtils","getInteractionStatusFromEvent","eventType","Error","currentAccounts","getAllAccounts","MsalProvider","_ref","useEffect","initializeWrapperLibrary","WrapperSKU","useMemo","getLogger","clone","SKU","useReducer","undefined","state","updateState","callbackId","addEventCallback","verbose","initialize","then","handleRedirectPromise","catch","finally","removeEventCallback","contextValue","Provider","value","useMsal","useContext","isAuthenticated","matchAccount","useIsAuthenticated","useState","hasAuthenticated","setHasAuthenticated","AuthenticatedTemplate","context","accountIdentifier","Fragment","UnauthenticatedTemplate","HandleRedirect","getAccount","getActiveAccount","useAccount","account","setAccount","currentAccount","nextAccount","AccountEntity","accountInfoIsEqual","ReactAuthErrorMessage","invalidInteractionType","code","desc","unableToFallbackToInteraction","ReactAuthError","constructor","errorCode","errorMessage","Object","setPrototypeOf","prototype","AuthError","useMsalAuthentication","interactionType","authenticationRequest","result","error","setResponse","interactionInProgress","useRef","current","shouldAcquireToken","login","useCallback","callbackInteractionType","callbackRequest","loginType","loginRequest","InteractionType","Popup","Redirect","Silent","loginPopup","loginRedirect","ssoSilent","createInvalidInteractionTypeError","acquireToken","fallbackInteractionType","trace","tokenRequest","scopes","OIDC_DEFAULT_SCOPES","getToken","acquireTokenSilent","e","InteractionRequiredAuthError","createUnableToFallbackToInteractionError","response","EventType","LOGIN_SUCCESS","SSO_SILENT_SUCCESS","LOGIN_FAILURE","SSO_SILENT_FAILURE","MsalAuthenticationTemplate","LoadingComponent","loadingComponent","ErrorComponent","errorComponent","msalAuthResult","withMsal","Component","ComponentWithMsal","props","msal","msalContext","componentName","displayName"],"sources":["../src/MsalContext.ts","../src/utils/utilities.ts","../src/packageMetadata.ts","../src/MsalProvider.tsx","../src/hooks/useMsal.ts","../src/hooks/useIsAuthenticated.ts","../src/components/AuthenticatedTemplate.tsx","../src/components/UnauthenticatedTemplate.tsx","../src/hooks/useAccount.ts","../src/error/ReactAuthError.ts","../src/hooks/useMsalAuthentication.ts","../src/components/MsalAuthenticationTemplate.tsx","../src/components/withMsal.tsx"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport { IPublicClientApplication, stubbedPublicClientApplication, Logger, InteractionStatus, AccountInfo } from \"@azure/msal-browser\";\n\nexport interface IMsalContext {\n    instance: IPublicClientApplication;\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n    logger: Logger;\n}\n\n/*\n * Stubbed context implementation\n * Only used when there is no provider, which is an unsupported scenario\n */\nconst defaultMsalContext: IMsalContext = {\n    instance: stubbedPublicClientApplication,\n    inProgress: InteractionStatus.None,\n    accounts: [],\n    logger: new Logger({})\n};\n\nexport const MsalContext = React.createContext<IMsalContext>(\n    defaultMsalContext\n);\nexport const MsalConsumer = MsalContext.Consumer;\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { AccountInfo } from \"@azure/msal-browser\";\n\ntype FaaCFunction = <T>(args: T) => React.ReactNode;\n\nexport function getChildrenOrFunction<T>(\n    children: React.ReactNode | FaaCFunction,\n    args: T\n): React.ReactNode {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n\n/*\n * Utility types\n * Reference: https://github.com/piotrwitek/utility-types\n */\ntype SetDifference<A, B> = A extends B ? never : A;\ntype SetComplement<A, A1 extends A> = SetDifference<A, A1>;\nexport type Subtract<T extends T1, T1 extends object> = Pick<T,SetComplement<keyof T, keyof T1>>;\n\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA \n * @param arrayB \n */\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n\n    const comparisonArray = [...arrayB];\n\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n\n        return (elementA.homeAccountId === elementB.homeAccountId) && \n               (elementA.localAccountId === elementB.localAccountId) &&\n               (elementA.username === elementB.username);\n    });\n}\n\nexport function getAccountByIdentifiers(allAccounts: AccountInfo[], accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter(accountObj => {\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n\n            return true;\n        });\n\n        return matchedAccounts[0] || null;\n    } else {\n        return null;\n    }\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"1.4.8\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useEffect, useReducer, PropsWithChildren, useMemo} from \"react\";\nimport {\n    IPublicClientApplication,\n    EventMessage,\n    EventMessageUtils,\n    InteractionStatus,\n    Logger,\n    WrapperSKU,\n    AccountInfo\n} from \"@azure/msal-browser\";\nimport { MsalContext, IMsalContext } from \"./MsalContext\";\nimport { accountArraysAreEqual } from \"./utils/utilities\";\nimport { name as SKU, version } from \"./packageMetadata\";\n\nexport type MsalProviderProps = PropsWithChildren<{\n    instance: IPublicClientApplication;\n}>;\n\ntype MsalState = {\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n};\n\nenum MsalProviderActionType {\n    UNBLOCK_INPROGRESS = \"UNBLOCK_INPROGRESS\",\n    EVENT = \"EVENT\"\n}\n\ntype MsalProviderReducerAction = {\n    type: MsalProviderActionType,\n    payload: {\n        logger: Logger;\n        instance: IPublicClientApplication;\n        message?: EventMessage;\n    };\n};\n\n/**\n * Returns the next inProgress and accounts state based on event message\n * @param previousState \n * @param action \n */\nconst reducer = (previousState: MsalState, action: MsalProviderReducerAction): MsalState => {\n    const { type, payload } = action;\n    let newInProgress = previousState.inProgress;\n\n    switch (type) {\n        case MsalProviderActionType.UNBLOCK_INPROGRESS:\n            if (previousState.inProgress === InteractionStatus.Startup){\n                newInProgress = InteractionStatus.None;\n                payload.logger.info(\"MsalProvider - handleRedirectPromise resolved, setting inProgress to 'none'\");\n            }\n            break;\n        case MsalProviderActionType.EVENT:\n            const message = payload.message as EventMessage;\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message, previousState.inProgress);\n            if (status) {\n                payload.logger.info(`MsalProvider - ${message.eventType} results in setting inProgress from ${previousState.inProgress} to ${status}`);\n                newInProgress = status;\n            }\n            break;\n        default:\n            throw new Error(`Unknown action type: ${type}`);\n    }\n    \n    const currentAccounts = payload.instance.getAllAccounts();\n    if (newInProgress !== previousState.inProgress && \n        !accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n        // Both inProgress and accounts changed\n        return {\n            ...previousState,\n            inProgress: newInProgress,\n            accounts: currentAccounts\n        };\n    } else if (newInProgress !== previousState.inProgress) {\n        // Only only inProgress changed\n        return {\n            ...previousState,\n            inProgress: newInProgress\n        };\n    } else if (!accountArraysAreEqual(currentAccounts, previousState.accounts)) {\n        // Only accounts changed\n        return {\n            ...previousState,\n            accounts: currentAccounts\n        };\n    } else {\n        // Nothing changed\n        return previousState;\n    }\n};\n\n/**\n * MSAL context provider component. This must be rendered above any other components that use MSAL.\n */\nexport function MsalProvider({instance, children}: MsalProviderProps): React.ReactElement {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n\n    const [state, updateState] = useReducer(reducer, undefined, () => {\n        // Lazy initialization of the initial state\n        return {\n            inProgress: InteractionStatus.Startup,\n            accounts: instance.getAllAccounts()\n        };\n    });\n    \n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            updateState({\n                payload: {\n                    instance,\n                    logger,\n                    message\n                }, \n                type: MsalProviderActionType.EVENT\n            });\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        instance.initialize().then(() => {\n            instance.handleRedirectPromise().catch(() => {\n                // Errors should be handled by listening to the LOGIN_FAILURE event\n                return;\n            }).finally(() => {\n                /*\n                 * If handleRedirectPromise returns a cached promise the necessary events may not be fired\n                 * This is a fallback to prevent inProgress from getting stuck in 'startup'\n                 */\n                updateState({\n                    payload: {\n                        instance,\n                        logger\n                    },\n                    type: MsalProviderActionType.UNBLOCK_INPROGRESS \n                });\n            });\n        });\n\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    const contextValue: IMsalContext = {\n        instance,\n        inProgress: state.inProgress,\n        accounts: state.accounts,\n        logger\n    };\n\n    return (\n        <MsalContext.Provider value={contextValue}>\n            {children}\n        </MsalContext.Provider>\n    );\n}\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useContext } from \"react\";\nimport { IMsalContext, MsalContext } from \"../MsalContext\";\n\n/**\n * Returns Msal Context values\n */\nexport const useMsal = (): IMsalContext => useContext(MsalContext);\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { AccountInfo } from \"@azure/msal-browser\";\nimport { getAccountByIdentifiers } from \"../utils/utilities\";\n\nfunction isAuthenticated(allAccounts: AccountInfo[], matchAccount?: AccountIdentifiers): boolean {\n    if(matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n        return !!getAccountByIdentifiers(allAccounts, matchAccount);\n    }   \n\n    return allAccounts.length > 0;\n}\n\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount \n */\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\n    const { accounts: allAccounts } = useMsal();\n\n    const [hasAuthenticated, setHasAuthenticated] = useState<boolean>(() => isAuthenticated(allAccounts, matchAccount));\n\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, matchAccount));\n    }, [allAccounts, matchAccount]);\n\n    return hasAuthenticated;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is authenticated\n * @param props \n */\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }: AuthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type UnauthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is unauthenticated\n * @param props \n */\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }: UnauthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { AccountInfo, IPublicClientApplication, AccountEntity } from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getAccountByIdentifiers } from \"../utils/utilities\";\n\nfunction getAccount(instance: IPublicClientApplication, accountIdentifiers?: AccountIdentifiers): AccountInfo | null {\n    if (!accountIdentifiers || (!accountIdentifiers.homeAccountId && !accountIdentifiers.localAccountId && !accountIdentifiers.username)) {\n        // If no account identifiers are provided, return active account\n        return instance.getActiveAccount();\n    }\n\n    return getAccountByIdentifiers(instance.getAllAccounts(), accountIdentifiers);\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers \n */\nexport function useAccount(accountIdentifiers?: AccountIdentifiers): AccountInfo | null {\n    const { instance, inProgress, logger } = useMsal();\n\n    const [account, setAccount] = useState<AccountInfo|null>(() => getAccount(instance, accountIdentifiers));\n\n    useEffect(() => {\n        setAccount((currentAccount: AccountInfo | null) => {\n            const nextAccount = getAccount(instance, accountIdentifiers);\n            if (!AccountEntity.accountInfoIsEqual(currentAccount, nextAccount, true)) {\n                logger.info(\"useAccount - Updating account\");\n                return nextAccount;\n            }\n\n            return currentAccount;\n        });\n    }, [inProgress, accountIdentifiers, instance, logger]);\n\n    return account;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-browser\";\n\nexport const ReactAuthErrorMessage = {\n    invalidInteractionType: {\n        code: \"invalid_interaction_type\",\n        desc: \"The provided interaction type is invalid.\"\n    },\n    unableToFallbackToInteraction: {\n        code: \"unable_to_fallback_to_interaction\",\n        desc: \"Interaction is required but another interaction is already in progress. Please try again when the current interaction is complete.\"\n    }\n};\n\nexport class ReactAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, ReactAuthError.prototype);\n        this.name = \"ReactAuthError\";\n    }\n\n    static createInvalidInteractionTypeError(): ReactAuthError {\n        return new ReactAuthError(ReactAuthErrorMessage.invalidInteractionType.code, ReactAuthErrorMessage.invalidInteractionType.desc);\n    }\n\n    static createUnableToFallbackToInteractionError(): ReactAuthError {\n        return new ReactAuthError(ReactAuthErrorMessage.unableToFallbackToInteraction.code, ReactAuthErrorMessage.unableToFallbackToInteraction.desc);\n    }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport { PopupRequest, RedirectRequest, SsoSilentRequest, InteractionType, AuthenticationResult, AuthError, EventMessage, EventType, InteractionStatus, SilentRequest, InteractionRequiredAuthError, OIDC_DEFAULT_SCOPES } from \"@azure/msal-browser\";\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useMsal } from \"./useMsal\";\nimport { useAccount } from \"./useAccount\";\nimport { ReactAuthError } from \"../error/ReactAuthError\";\n\nexport type MsalAuthenticationResult = {\n    login: (callbackInteractionType?: InteractionType | undefined, callbackRequest?: PopupRequest | RedirectRequest | SilentRequest) => Promise<AuthenticationResult | null>; \n    acquireToken: (callbackInteractionType?: InteractionType | undefined, callbackRequest?: SilentRequest | undefined) => Promise<AuthenticationResult | null>;\n    result: AuthenticationResult|null;\n    error: AuthError|null;\n};\n\n/**\n * If a user is not currently signed in this hook invokes a login. Failed logins can be retried using the login callback returned.\n * If a user is currently signed in this hook attempts to acquire a token. Subsequent token requests can use the acquireToken callback returned.\n * Optionally provide a request object to be used in the login/acquireToken call.\n * Optionally provide a specific user that should be logged in.\n * @param interactionType \n * @param authenticationRequest \n * @param accountIdentifiers \n */\nexport function useMsalAuthentication(\n    interactionType: InteractionType, \n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest, \n    accountIdentifiers?: AccountIdentifiers\n): MsalAuthenticationResult {\n    const { instance, inProgress, logger } = useMsal();\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n    const account = useAccount(accountIdentifiers);\n    const [[result, error], setResponse] = useState<[AuthenticationResult|null, AuthError|null]>([null, null]);\n\n    // Boolean used to check if interaction is in progress in acquireTokenSilent fallback. Use Ref instead of state to prevent acquireToken function from being regenerated on each change to interactionInProgress value\n    const interactionInProgress = useRef(inProgress !== InteractionStatus.None);\n    useEffect(() => {\n        interactionInProgress.current = inProgress !== InteractionStatus.None;\n    }, [inProgress]);\n\n    // Flag used to control when the hook calls login/acquireToken\n    const shouldAcquireToken = useRef(true);\n    useEffect(() => {\n        if (!!error) {\n            // Errors should be handled by consuming component\n            shouldAcquireToken.current = false;\n            return;\n        }\n\n        if (!!result) {\n            // Token has already been acquired, consuming component/application is responsible for renewing\n            shouldAcquireToken.current = false;\n            return;\n        }\n    }, [error, result]);\n\n    const login = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: PopupRequest|RedirectRequest|SsoSilentRequest): Promise<AuthenticationResult|null> => {\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch (loginType) {\n            case InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest as PopupRequest);\n            case InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance.loginRedirect(loginRequest as RedirectRequest).then(null);\n            case InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest as SsoSilentRequest);\n            default:\n                throw ReactAuthError.createInvalidInteractionTypeError();\n        }\n    }, [instance, interactionType, authenticationRequest, logger]);\n\n    const acquireToken = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: SilentRequest): Promise<AuthenticationResult|null> => {\n        const fallbackInteractionType = callbackInteractionType || interactionType;\n\n        let tokenRequest: SilentRequest;\n\n        if (callbackRequest) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the callback\");\n            tokenRequest = {\n                ...callbackRequest\n            };\n        } else if (authenticationRequest) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Using request provided in the hook\");\n            tokenRequest = {\n                ...authenticationRequest,\n                scopes: authenticationRequest.scopes || OIDC_DEFAULT_SCOPES\n            };\n        } else {\n            logger.trace(\"useMsalAuthentication - acquireToken - No request object provided, using default request.\");\n            tokenRequest = {\n                scopes: OIDC_DEFAULT_SCOPES\n            };\n        }\n        \n        if (!tokenRequest.account && account) {\n            logger.trace(\"useMsalAuthentication - acquireToken - Attaching account to request\");\n            tokenRequest.account = account;\n        }\n\n        const getToken = async (): Promise<AuthenticationResult|null> => {\n            logger.verbose(\"useMsalAuthentication - Calling acquireTokenSilent\");\n            return instance.acquireTokenSilent(tokenRequest).catch(async (e: AuthError) => {\n                if (e instanceof InteractionRequiredAuthError) {\n                    if (!interactionInProgress.current) {\n                        logger.error(\"useMsalAuthentication - Interaction required, falling back to interaction\");\n                        return login(fallbackInteractionType, tokenRequest);\n                    } else {\n                        logger.error(\"useMsalAuthentication - Interaction required but is already in progress. Please try again, if needed, after interaction completes.\");\n                        throw ReactAuthError.createUnableToFallbackToInteractionError();\n                    }\n                }\n\n                throw e;\n            });\n        };\n\n        return getToken().then((response: AuthenticationResult|null) => {\n            setResponse([response, null]);\n            return response;\n        }).catch((e: AuthError) => {\n            setResponse([null, e]);\n            throw e;\n        });\n    }, [instance, interactionType, authenticationRequest, logger, account, login]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch(message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([message.payload as AuthenticationResult, null]);\n                    }\n                    break;\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([null, message.error as AuthError]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    useEffect(() => {\n        if (shouldAcquireToken.current && inProgress === InteractionStatus.None) {\n            shouldAcquireToken.current = false;\n            if (!isAuthenticated) {\n                logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n                login().catch(() => {\n                    // Errors are saved in state above\n                    return;\n                });\n            } else if (account) {\n                logger.info(\"useMsalAuthentication - User is authenticated, attempting to acquire token\");\n                acquireToken().catch(() => {\n                    // Errors are saved in state above\n                    return;\n                });\n            }\n        }\n    }, [isAuthenticated, account, inProgress, login, acquireToken, logger]);\n\n    return { \n        login, \n        acquireToken, \n        result, \n        error\n    };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { MsalAuthenticationResult, useMsalAuthentication } from \"../hooks/useMsalAuthentication\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionType, PopupRequest, RedirectRequest, SsoSilentRequest, InteractionStatus } from \"@azure/msal-browser\";\nimport { IMsalContext } from \"../MsalContext\";\n\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\n    interactionType: InteractionType;\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest;\n    loadingComponent?: React.ElementType<IMsalContext>;\n    errorComponent?: React.ElementType<MsalAuthenticationResult>;\n}>;\n\n/**\n * Attempts to authenticate user if not already authenticated, then renders child components\n * @param props\n */\nexport function MsalAuthenticationTemplate({ \n    interactionType, \n    username, \n    homeAccountId, \n    localAccountId,\n    authenticationRequest, \n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    children \n}: MsalAuthenticationProps): React.ReactElement|null {\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const context = useMsal();\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return <ErrorComponent {...msalAuthResult} />;\n        }\n\n        throw msalAuthResult.error;\n    }\n    \n    if (isAuthenticated) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, msalAuthResult)}\n            </React.Fragment>\n        );\n    } \n    \n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n        return <LoadingComponent {...context} />;\n    }\n\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport { IMsalContext } from \"../MsalContext\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { Subtract } from \"../utils/utilities\";\n\nexport type WithMsalProps = {\n    msalContext: IMsalContext;\n};\n\n/**\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props \n * @param Component \n */\nexport const withMsal = <P extends WithMsalProps>(Component: React.ComponentType<P>): React.FunctionComponent<Subtract<P,WithMsalProps>> => {\n    const ComponentWithMsal: React.FunctionComponent<Subtract<P,WithMsalProps>> = props => {\n        const msal = useMsal();\n        return <Component {...(props as P)} msalContext={msal} />;\n    };\n\n    const componentName =\n        Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n\n    return ComponentWithMsal;\n};\n"]},"metadata":{},"sourceType":"module"}