{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { Constants as Constants$1 } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Log message level.\r\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n  LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\n\n\nvar Logger =\n/** @class */\nfunction () {\n  function Logger(loggerOptions, packageName, packageVersion) {\n    // Current log level, defaults to info.\n    this.level = LogLevel.Info;\n\n    var defaultLoggerCallback = function () {};\n\n    this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\n    this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\n    this.level = loggerOptions.logLevel || LogLevel.Info;\n    this.correlationId = loggerOptions.correlationId || \"\";\n    this.packageName = packageName || Constants$1.EMPTY_STRING;\n    this.packageVersion = packageVersion || Constants$1.EMPTY_STRING;\n  }\n  /**\r\n   * Create new Logger with existing configurations.\r\n   */\n\n\n  Logger.prototype.clone = function (packageName, packageVersion, correlationId) {\n    return new Logger({\n      loggerCallback: this.localCallback,\n      piiLoggingEnabled: this.piiLoggingEnabled,\n      logLevel: this.level,\n      correlationId: correlationId || this.correlationId\n    }, packageName, packageVersion);\n  };\n  /**\r\n   * Log message with required options.\r\n   */\n\n\n  Logger.prototype.logMessage = function (logMessage, options) {\n    if (options.logLevel > this.level || !this.piiLoggingEnabled && options.containsPii) {\n      return;\n    }\n\n    var timestamp = new Date().toUTCString(); // Add correlationId to logs if set, correlationId provided on log messages take precedence\n\n    var logHeader;\n\n    if (!StringUtils$1.isEmpty(options.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + options.correlationId + \"]\";\n    } else if (!StringUtils$1.isEmpty(this.correlationId)) {\n      logHeader = \"[\" + timestamp + \"] : [\" + this.correlationId + \"]\";\n    } else {\n      logHeader = \"[\" + timestamp + \"]\";\n    }\n\n    var log = logHeader + \" : \" + this.packageName + \"@\" + this.packageVersion + \" : \" + LogLevel[options.logLevel] + \" - \" + logMessage; // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\n\n    this.executeCallback(options.logLevel, log, options.containsPii || false);\n  };\n  /**\r\n   * Execute callback with message.\r\n   */\n\n\n  Logger.prototype.executeCallback = function (level, message, containsPii) {\n    if (this.localCallback) {\n      this.localCallback(level, message, containsPii);\n    }\n  };\n  /**\r\n   * Logs error messages.\r\n   */\n\n\n  Logger.prototype.error = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs error messages with PII.\r\n   */\n\n\n  Logger.prototype.errorPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Error,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs warning messages.\r\n   */\n\n\n  Logger.prototype.warning = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs warning messages with PII.\r\n   */\n\n\n  Logger.prototype.warningPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Warning,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs info messages.\r\n   */\n\n\n  Logger.prototype.info = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs info messages with PII.\r\n   */\n\n\n  Logger.prototype.infoPii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Info,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs verbose messages.\r\n   */\n\n\n  Logger.prototype.verbose = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs verbose messages with PII.\r\n   */\n\n\n  Logger.prototype.verbosePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Verbose,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs trace messages.\r\n   */\n\n\n  Logger.prototype.trace = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: false,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Logs trace messages with PII.\r\n   */\n\n\n  Logger.prototype.tracePii = function (message, correlationId) {\n    this.logMessage(message, {\n      logLevel: LogLevel.Trace,\n      containsPii: true,\n      correlationId: correlationId || \"\"\n    });\n  };\n  /**\r\n   * Returns whether PII Logging is enabled or not.\r\n   */\n\n\n  Logger.prototype.isPiiLoggingEnabled = function () {\n    return this.piiLoggingEnabled || false;\n  };\n\n  return Logger;\n}();\n\nexport { LogLevel, Logger };","map":{"version":3,"mappings":"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","names":["LogLevel","loggerOptions","packageName","packageVersion","Info","defaultLoggerCallback","localCallback","loggerCallback","piiLoggingEnabled","level","logLevel","correlationId","Constants","EMPTY_STRING","Logger","logMessage","options","containsPii","timestamp","Date","toUTCString","logHeader","StringUtils","isEmpty","log","executeCallback","message","Error","Warning","Verbose","Trace"],"sources":["../../src/logger/Logger.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { LoggerOptions } from \"../config/ClientConfiguration\";\r\nimport { Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Options for logger messages.\r\n */\r\nexport type LoggerMessageOptions = {\r\n    logLevel: LogLevel,\r\n    containsPii?: boolean,\r\n    context?: string,\r\n    correlationId?: string\r\n};\r\n\r\n/**\r\n * Log message level.\r\n */\r\nexport enum LogLevel {\r\n    Error,\r\n    Warning,\r\n    Info,\r\n    Verbose,\r\n    Trace\r\n}\r\n\r\n/**\r\n * Callback to send the messages to.\r\n */\r\nexport interface ILoggerCallback {\r\n    (level: LogLevel, message: string, containsPii: boolean): void;\r\n}\r\n\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nexport class Logger {\r\n\r\n    // Correlation ID for request, usually set by user.\r\n    private correlationId: string;\r\n\r\n    // Current log level, defaults to info.\r\n    private level: LogLevel = LogLevel.Info;\r\n\r\n    // Boolean describing whether PII logging is allowed.\r\n    private piiLoggingEnabled: boolean;\r\n\r\n    // Callback to send messages to.\r\n    private localCallback: ILoggerCallback;\r\n\r\n    // Package name implementing this logger\r\n    private packageName: string;\r\n\r\n    // Package version implementing this logger\r\n    private packageVersion: string;\r\n\r\n    constructor(loggerOptions: LoggerOptions, packageName?: string, packageVersion?: string) {\r\n        const defaultLoggerCallback = () => {};\r\n        this.localCallback = loggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = loggerOptions.piiLoggingEnabled || false;\r\n        this.level = loggerOptions.logLevel || LogLevel.Info;\r\n        this.correlationId = loggerOptions.correlationId || \"\";\r\n\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    public clone(packageName: string, packageVersion: string, correlationId?: string): Logger {\r\n        return new Logger({loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId}, packageName, packageVersion);\r\n    }\r\n\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    private logMessage(logMessage: string, options: LoggerMessageOptions): void {\r\n        if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        let logHeader: string;\r\n        if (!StringUtils.isEmpty(options.correlationId)) {\r\n            logHeader = `[${timestamp}] : [${options.correlationId}]`;\r\n        } else if (!StringUtils.isEmpty(this.correlationId)) {\r\n            logHeader = `[${timestamp}] : [${this.correlationId}]`;\r\n        } else {\r\n            logHeader = `[${timestamp}]`;\r\n        }\r\n\r\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": \"\"}${options.context ? `:${options.context}` : \"\"}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    }\r\n\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    executeCallback(level: LogLevel, message: string, containsPii: boolean): void {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    error(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    errorPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    warning(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    warningPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    info(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    infoPii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    verbose(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    verbosePii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    trace(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    tracePii(message: string, correlationId?: string): void {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || \"\"\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    isPiiLoggingEnabled(): boolean {\r\n        return this.piiLoggingEnabled || false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}