{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler =\n/** @class */\nfunction () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.browserRequestLogger = browserRequestLogger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"mappings":"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","names":["authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","nonceKey","generateNonceKey","cachedNonce","code","cloud_instance_host_name","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","e","logger","error","errorPii"],"sources":["../../src/interaction_handler/InteractionHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger } from \"@azure/msal-common\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\n\r\nexport type InteractionParams = {};\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport abstract class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeClient;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\r\n    protected browserRequestLogger: Logger;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.browserRequestLogger = browserRequestLogger;\r\n    }\r\n\r\n    /**\r\n     * Function to enable user interaction.\r\n     * @param requestUrl\r\n     */\r\n    abstract initiateAuthRequest(requestUrl: string, params: InteractionParams): Window | Promise<HTMLIFrameElement> | Promise<void>;\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    async handleCodeResponse(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        authCodeResponse.nonce = cachedNonce || undefined;\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname \r\n     * @param authority \r\n     * @param networkModule \r\n     */\r\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\r\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\r\n        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n    }\r\n\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    protected checkCcsCredentials(): CcsCredential | null {\r\n        // Look up ccs credential in temp cache\r\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred) as CcsCredential;\r\n            } catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}