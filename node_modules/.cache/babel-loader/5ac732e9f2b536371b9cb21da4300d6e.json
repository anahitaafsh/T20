{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { Constants as Constants$1, CredentialType, CacheSchemaType, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from '../utils/Constants.js';\nimport { AuthError as AuthError$1 } from '../error/AuthError.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { CredentialEntity as CredentialEntity$1 } from './entities/CredentialEntity.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { AccountEntity as AccountEntity$1 } from './entities/AccountEntity.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\n\nvar CacheManager =\n/** @class */\nfunction () {\n  function CacheManager(clientId, cryptoImpl) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n  }\n  /**\r\n   * Returns all accounts in cache\r\n   */\n\n\n  CacheManager.prototype.getAllAccounts = function () {\n    var _this = this;\n\n    var currentAccounts = this.getAccountsFilteredBy();\n    var accountValues = Object.keys(currentAccounts).map(function (accountKey) {\n      return currentAccounts[accountKey];\n    });\n    var numAccounts = accountValues.length;\n\n    if (numAccounts < 1) {\n      return [];\n    } else {\n      var allAccounts = accountValues.map(function (value) {\n        var accountEntity = CacheManager.toObject(new AccountEntity$1(), value);\n        var accountInfo = accountEntity.getAccountInfo();\n\n        var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);\n\n        if (idToken && !accountInfo.idTokenClaims) {\n          accountInfo.idTokenClaims = new AuthToken$1(idToken.secret, _this.cryptoImpl).claims;\n        }\n\n        return accountInfo;\n      });\n      return allAccounts;\n    }\n  };\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord\r\n   */\n\n\n  CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\n    if (!cacheRecord) {\n      throw ClientAuthError$1.createNullOrUndefinedCacheRecord();\n    }\n\n    if (!!cacheRecord.account) {\n      this.setAccount(cacheRecord.account);\n    }\n\n    if (!!cacheRecord.idToken) {\n      this.setIdTokenCredential(cacheRecord.idToken);\n    }\n\n    if (!!cacheRecord.accessToken) {\n      this.saveAccessToken(cacheRecord.accessToken);\n    }\n\n    if (!!cacheRecord.refreshToken) {\n      this.setRefreshTokenCredential(cacheRecord.refreshToken);\n    }\n\n    if (!!cacheRecord.appMetadata) {\n      this.setAppMetadata(cacheRecord.appMetadata);\n    }\n  };\n  /**\r\n   * saves access token credential\r\n   * @param credential\r\n   */\n\n\n  CacheManager.prototype.saveAccessToken = function (credential) {\n    var _this = this;\n\n    var currentTokenCache = this.getCredentialsFilteredBy({\n      clientId: credential.clientId,\n      credentialType: credential.credentialType,\n      environment: credential.environment,\n      homeAccountId: credential.homeAccountId,\n      realm: credential.realm\n    });\n    var currentScopes = ScopeSet$1.fromString(credential.target);\n    var currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) {\n      return currentTokenCache.accessTokens[key];\n    });\n\n    if (currentAccessTokens) {\n      currentAccessTokens.forEach(function (tokenEntity) {\n        var tokenScopeSet = ScopeSet$1.fromString(tokenEntity.target);\n\n        if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n          _this.removeCredential(tokenEntity);\n        }\n      });\n    }\n\n    this.setAccessTokenCredential(credential);\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\n    return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : \"\", accountFilter ? accountFilter.environment : \"\", accountFilter ? accountFilter.realm : \"\");\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingAccounts = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      var entity = _this.getAccount(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!realm && !_this.matchRealm(entity, realm)) {\n        return;\n      }\n\n      matchingAccounts[cacheKey] = entity;\n    });\n    return matchingAccounts;\n  };\n  /**\r\n   * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param credentialType\r\n   * @param clientId\r\n   * @param realm\r\n   * @param target\r\n   */\n\n\n  CacheManager.prototype.getCredentialsFilteredBy = function (filter) {\n    return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion);\n  };\n  /**\r\n   * Support function to help match credentials\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param credentialType\r\n   * @param clientId\r\n   * @param realm\r\n   * @param target\r\n   */\n\n\n  CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingCredentials = {\n      idTokens: {},\n      accessTokens: {},\n      refreshTokens: {}\n    };\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-credential type cache entities\n      var credType = CredentialEntity$1.getCredentialType(cacheKey);\n\n      if (credType === Constants$1.NOT_DEFINED) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getSpecificCredential(cacheKey, credType);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {\n        return;\n      }\n\n      if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!realm && !_this.matchRealm(entity, realm)) {\n        return;\n      }\n\n      if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {\n        return;\n      }\n\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n\n      if (!!familyId && !_this.matchFamilyId(entity, familyId)) {\n        return;\n      }\n      /*\r\n       * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n       * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n       */\n\n\n      if (!!target && !_this.matchTarget(entity, target)) {\n        return;\n      }\n\n      switch (credType) {\n        case CredentialType.ID_TOKEN:\n          matchingCredentials.idTokens[cacheKey] = entity;\n          break;\n\n        case CredentialType.ACCESS_TOKEN:\n        case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n          matchingCredentials.accessTokens[cacheKey] = entity;\n          break;\n\n        case CredentialType.REFRESH_TOKEN:\n          matchingCredentials.refreshTokens[cacheKey] = entity;\n          break;\n      }\n    });\n    return matchingCredentials;\n  };\n  /**\r\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  };\n  /**\r\n   * Support function to help match appMetadata\r\n   * @param environment\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var matchingAppMetadata = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-appMetadata type cache entities\n      if (!_this.isAppMetadata(cacheKey)) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getAppMetadata(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  };\n  /**\r\n   * retrieve authorityMetadata that contains a matching alias\r\n   * @param filter\r\n   */\n\n\n  CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\n    var _this = this;\n\n    var allCacheKeys = this.getAuthorityMetadataKeys();\n    var matchedEntity = null;\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\n        return;\n      } // Attempt retrieval\n\n\n      var entity = _this.getAuthorityMetadata(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  };\n  /**\r\n   * Removes all accounts and related tokens from cache.\r\n   */\n\n\n  CacheManager.prototype.removeAllAccounts = function () {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      var entity = _this.getAccount(cacheKey);\n\n      if (!entity) {\n        return;\n      }\n\n      _this.removeAccount(cacheKey);\n    });\n    return true;\n  };\n  /**\r\n   * returns a boolean if the given account is removed\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.removeAccount = function (accountKey) {\n    var account = this.getAccount(accountKey);\n\n    if (!account) {\n      throw ClientAuthError$1.createNoAccountFoundError();\n    }\n\n    return this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT);\n  };\n  /**\r\n   * returns a boolean if the given account is removed\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.removeAccountContext = function (account) {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    var accountId = account.generateAccountId();\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-credential type cache entities\n      var credType = CredentialEntity$1.getCredentialType(cacheKey);\n\n      if (credType === Constants$1.NOT_DEFINED) {\n        return;\n      }\n\n      var cacheEntity = _this.getSpecificCredential(cacheKey, credType);\n\n      if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\n        _this.removeCredential(cacheEntity);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * returns a boolean if the given credential is removed\r\n   * @param credential\r\n   */\n\n\n  CacheManager.prototype.removeCredential = function (credential) {\n    var key = credential.generateCredentialKey();\n    return this.removeItem(key, CacheSchemaType.CREDENTIAL);\n  };\n  /**\r\n   * Removes all app metadata objects from cache.\r\n   */\n\n\n  CacheManager.prototype.removeAppMetadata = function () {\n    var _this = this;\n\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      if (_this.isAppMetadata(cacheKey)) {\n        _this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * Retrieve the cached credentials into a cacherecord\r\n   * @param account\r\n   * @param clientId\r\n   * @param scopes\r\n   * @param environment\r\n   * @param authScheme\r\n   */\n\n\n  CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment, authScheme) {\n    var cachedAccount = this.readAccountFromCache(account);\n    var cachedIdToken = this.readIdTokenFromCache(clientId, account);\n    var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);\n    var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\n    var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\n\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken$1(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param account\r\n   */\n\n\n  CacheManager.prototype.readAccountFromCache = function (account) {\n    var accountKey = AccountEntity$1.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  };\n  /**\r\n   * Retrieve IdTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param inputRealm\r\n   */\n\n\n  CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {\n    var idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: clientId,\n      realm: account.tenantId\n    };\n    var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    });\n    var numIdTokens = idTokens.length;\n\n    if (numIdTokens < 1) {\n      return null;\n    } else if (numIdTokens > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n\n    return idTokens[0];\n  };\n  /**\r\n   * Retrieve AccessTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param scopes\r\n   * @param authScheme\r\n   */\n\n\n  CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes, authScheme) {\n    var credentialType = authScheme === AuthenticationScheme.POP ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: clientId,\n      realm: account.tenantId,\n      target: scopes.printScopesLowerCase()\n    };\n    var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n\n    return accessTokens[0];\n  };\n  /**\r\n   * Helper to retrieve the appropriate refresh token from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param familyRT\r\n   */\n\n\n  CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {\n    var id = familyRT ? THE_FAMILY_ID : undefined;\n    var refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: clientId,\n      familyId: id\n    };\n    var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\n    var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) {\n      return credentialCache.refreshTokens[key];\n    });\n    var numRefreshTokens = refreshTokens.length;\n\n    if (numRefreshTokens < 1) {\n      return null;\n    } // address the else case after remove functions address environment aliases\n\n\n    return refreshTokens[0];\n  };\n  /**\r\n   * Retrieve AppMetadataEntity from cache\r\n   */\n\n\n  CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {\n    var appMetadataFilter = {\n      environment: environment,\n      clientId: clientId\n    };\n    var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    var appMetadataEntries = Object.keys(appMetadata).map(function (key) {\n      return appMetadata[key];\n    });\n    var numAppMetadata = appMetadataEntries.length;\n\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError$1.createMultipleMatchingAppMetadataInCacheError();\n    }\n\n    return appMetadataEntries[0];\n  };\n  /**\r\n   * Return the family_id value associated  with FOCI\r\n   * @param environment\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {\n    var appMetadata = this.readAppMetadataFromCache(environment, clientId);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param value\r\n   * @param homeAccountId\r\n   */\n\n\n  CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\n    return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\n  };\n  /**\r\n   * helper to match assertion\r\n   * @param value\r\n   * @param oboAssertion\r\n   */\n\n\n  CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {\n    return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\n  };\n  /**\r\n   * helper to match environment\r\n   * @param value\r\n   * @param environment\r\n   */\n\n\n  CacheManager.prototype.matchEnvironment = function (entity, environment) {\n    var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * helper to match credential type\r\n   * @param entity\r\n   * @param credentialType\r\n   */\n\n\n  CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  };\n  /**\r\n   * helper to match client ids\r\n   * @param entity\r\n   * @param clientId\r\n   */\n\n\n  CacheManager.prototype.matchClientId = function (entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  };\n  /**\r\n   * helper to match family ids\r\n   * @param entity\r\n   * @param familyId\r\n   */\n\n\n  CacheManager.prototype.matchFamilyId = function (entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  };\n  /**\r\n   * helper to match realm\r\n   * @param entity\r\n   * @param realm\r\n   */\n\n\n  CacheManager.prototype.matchRealm = function (entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  };\n  /**\r\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n   * @param entity\r\n   * @param target\r\n   */\n\n\n  CacheManager.prototype.matchTarget = function (entity, target) {\n    var isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n\n    var entityScopeSet = ScopeSet$1.fromString(entity.target);\n    var requestTargetScopeSet = ScopeSet$1.fromString(target);\n\n    if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\n      requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\n    } else {\n      requestTargetScopeSet.removeScope(Constants$1.OFFLINE_ACCESS_SCOPE);\n    }\n\n    return entityScopeSet.containsScopeSet(requestTargetScopeSet);\n  };\n  /**\r\n   * returns if a given cache entity is of the type appmetadata\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isAppMetadata = function (key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  };\n  /**\r\n   * returns if a given cache entity is of the type authoritymetadata\r\n   * @param key\r\n   */\n\n\n  CacheManager.prototype.isAuthorityMetadata = function (key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  };\n  /**\r\n   * returns cache key used for cloud instance metadata\r\n   */\n\n\n  CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\n    return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\n  };\n  /**\r\n   * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n   * @param key\r\n   * @param credType\r\n   */\n\n\n  CacheManager.prototype.getSpecificCredential = function (key, credType) {\n    switch (credType) {\n      case CredentialType.ID_TOKEN:\n        {\n          return this.getIdTokenCredential(key);\n        }\n\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        {\n          return this.getAccessTokenCredential(key);\n        }\n\n      case CredentialType.REFRESH_TOKEN:\n        {\n          return this.getRefreshTokenCredential(key);\n        }\n\n      default:\n        return null;\n    }\n  };\n  /**\r\n   * Helper to convert serialized data to object\r\n   * @param obj\r\n   * @param json\r\n   */\n\n\n  CacheManager.toObject = function (obj, json) {\n    for (var propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n\n    return obj;\n  };\n\n  return CacheManager;\n}();\n\nvar DefaultStorageClass =\n/** @class */\nfunction (_super) {\n  __extends(DefaultStorageClass, _super);\n\n  function DefaultStorageClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DefaultStorageClass.prototype.setAccount = function () {\n    var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccount = function () {\n    var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAppMetadata = function () {\n    var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAppMetadata = function () {\n    var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setServerTelemetry = function () {\n    var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getServerTelemetry = function () {\n    var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.setThrottlingCache = function () {\n    var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getThrottlingCache = function () {\n    var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.removeItem = function () {\n    var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.containsKey = function () {\n    var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.getKeys = function () {\n    var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  DefaultStorageClass.prototype.clear = function () {\n    var notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n\n  return DefaultStorageClass;\n}(CacheManager);\n\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"mappings":"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","names":["clientId","cryptoImpl","CacheManager","currentAccounts","getAccountsFilteredBy","accountValues","Object","keys","map","accountKey","numAccounts","length","allAccounts","value","accountEntity","toObject","AccountEntity","accountInfo","getAccountInfo","idToken","_this","readIdTokenFromCache","idTokenClaims","AuthToken","secret","claims","cacheRecord","ClientAuthError","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","currentTokenCache","getCredentialsFilteredBy","credentialType","environment","homeAccountId","realm","currentScopes","ScopeSet","fromString","target","currentAccessTokens","accessTokens","key","forEach","tokenEntity","tokenScopeSet","intersectingScopeSets","removeCredential","setAccessTokenCredential","accountFilter","getAccountsFilteredByInternal","allCacheKeys","getKeys","matchingAccounts","cacheKey","entity","getAccount","matchHomeAccountId","matchEnvironment","matchRealm","filter","getCredentialsFilteredByInternal","familyId","oboAssertion","matchingCredentials","idTokens","refreshTokens","credType","CredentialEntity","getCredentialType","Constants","NOT_DEFINED","getSpecificCredential","matchOboAssertion","matchCredentialType","matchClientId","matchFamilyId","matchTarget","CredentialType","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","getAppMetadataFilteredByInternal","matchingAppMetadata","isAppMetadata","getAppMetadata","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","indexOf","getAuthorityMetadata","aliases","removeAccount","createNoAccountFoundError","removeAccountContext","removeItem","CacheSchemaType","ACCOUNT","accountId","generateAccountId","cacheEntity","generateCredentialKey","CREDENTIAL","APP_METADATA","scopes","authScheme","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","readAccessTokenFromCache","cachedRefreshToken","readRefreshTokenFromCache","cachedAppMetadata","readAppMetadataFromCache","generateAccountCacheKey","idTokenFilter","tenantId","credentialCache","numIdTokens","createMultipleMatchingTokensInCacheError","AuthenticationScheme","POP","accessTokenFilter","printScopesLowerCase","numAccessTokens","familyRT","id","THE_FAMILY_ID","undefined","refreshTokenFilter","numRefreshTokens","appMetadataFilter","getAppMetadataFilteredBy","appMetadataEntries","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","cloudMetadata","getAuthorityMetadataByAlias","toLowerCase","isNotAccessTokenCredential","entityScopeSet","requestTargetScopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","containsScopeSet","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","authority","getIdTokenCredential","getAccessTokenCredential","getRefreshTokenCredential","obj","json","propertyName","__extends","DefaultStorageClass","notImplErr","AuthError","createUnexpectedError"],"sources":["../../src/cache/CacheManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountCache, AccountFilter, CredentialFilter, CredentialCache, ValidCredentialType, AppMetadataFilter, AppMetadataCache } from \"./utils/CacheTypes\";\r\nimport { CacheRecord } from \"./entities/CacheRecord\";\r\nimport { CacheSchemaType, CredentialType, Constants, APP_METADATA, THE_FAMILY_ID, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { AccountEntity } from \"./entities/AccountEntity\";\r\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\r\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\r\nimport { AuthError } from \"../error/AuthError\";\r\nimport { ICacheManager } from \"./interface/ICacheManager\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\r\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\r\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\r\n\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nexport abstract class CacheManager implements ICacheManager {\r\n    protected clientId: string;\r\n    protected cryptoImpl: ICrypto;\r\n\r\n    constructor(clientId: string, cryptoImpl: ICrypto) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     *  @param accountKey\r\n     */\r\n    abstract getAccount(accountKey: string): AccountEntity | null;\r\n\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param account\r\n     */\r\n    abstract setAccount(account: AccountEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param idTokenKey\r\n     */\r\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param idToken\r\n     */\r\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param accessTokenKey\r\n     */\r\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param accessToken\r\n     */\r\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param refreshTokenKey\r\n     */\r\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    abstract setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;\r\n\r\n    /**\r\n     * fetch cloud discovery metadata entity from the platform cache\r\n     * @param key\r\n     */\r\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\r\n\r\n    /**\r\n     * \r\n     */\r\n    abstract getAuthorityMetadataKeys(): Array<string>;\r\n\r\n    /**\r\n     * set cloud discovery metadata entity to the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    abstract setAuthorityMetadata(key: string, value: AuthorityMetadataEntity): void;\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    abstract setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;;\r\n\r\n    /**\r\n     * Function to remove an item from cache given its key.\r\n     * @param key\r\n     */\r\n    abstract removeItem(key: string, type?: string): boolean;\r\n\r\n    /**\r\n     * Function which returns boolean whether cache contains a specific key.\r\n     * @param key\r\n     */\r\n    abstract containsKey(key: string, type?: string): boolean;\r\n\r\n    /**\r\n     * Function which retrieves all current keys from the cache.\r\n     */\r\n    abstract getKeys(): string[];\r\n\r\n    /**\r\n     * Function which clears cache.\r\n     */\r\n    abstract clear(): void;\r\n\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    getAllAccounts(): AccountInfo[] {\r\n        const currentAccounts: AccountCache = this.getAccountsFilteredBy();\r\n        const accountValues: AccountEntity[] = Object.keys(currentAccounts).map(accountKey => currentAccounts[accountKey]);\r\n        const numAccounts = accountValues.length;\r\n        if (numAccounts < 1) {\r\n            return [];\r\n        } else {\r\n            const allAccounts = accountValues.map<AccountInfo>((value) => {\r\n                const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), value);\r\n                const accountInfo = accountEntity.getAccountInfo();\r\n                const idToken = this.readIdTokenFromCache(this.clientId, accountInfo);\r\n                if (idToken && !accountInfo.idTokenClaims) {\r\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\r\n                }\r\n\r\n                return accountInfo;\r\n                \r\n            });\r\n            return allAccounts;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    saveCacheRecord(cacheRecord: CacheRecord): void {\r\n        if (!cacheRecord) {\r\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n        }\r\n\r\n        if (!!cacheRecord.account) {\r\n            this.setAccount(cacheRecord.account);\r\n        }\r\n\r\n        if (!!cacheRecord.idToken) {\r\n            this.setIdTokenCredential(cacheRecord.idToken);\r\n        }\r\n\r\n        if (!!cacheRecord.accessToken) {\r\n            this.saveAccessToken(cacheRecord.accessToken);\r\n        }\r\n\r\n        if (!!cacheRecord.refreshToken) {\r\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n        }\r\n\r\n        if (!!cacheRecord.appMetadata) {\r\n            this.setAppMetadata(cacheRecord.appMetadata);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    private saveAccessToken(credential: AccessTokenEntity): void {\r\n        const currentTokenCache = this.getCredentialsFilteredBy({\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n        });\r\n        const currentScopes = ScopeSet.fromString(credential.target);\r\n        const currentAccessTokens: AccessTokenEntity[] = Object.keys(currentTokenCache.accessTokens).map(key => currentTokenCache.accessTokens[key]);\r\n        if (currentAccessTokens) {\r\n            currentAccessTokens.forEach((tokenEntity) => {\r\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    this.removeCredential(tokenEntity);\r\n                }\r\n            });\r\n        }\r\n        this.setAccessTokenCredential(credential);\r\n    }\r\n\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    getAccountsFilteredBy(accountFilter?: AccountFilter): AccountCache {\r\n        return this.getAccountsFilteredByInternal(\r\n            accountFilter ? accountFilter.homeAccountId : \"\",\r\n            accountFilter ? accountFilter.environment : \"\",\r\n            accountFilter ? accountFilter.realm : \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    private getAccountsFilteredByInternal(\r\n        homeAccountId?: string,\r\n        environment?: string,\r\n        realm?: string\r\n    ): AccountCache {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAccounts: AccountCache = {};\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            const entity: AccountEntity | null = this.getAccount(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!realm && !this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n\r\n            matchingAccounts[cacheKey] = entity;\r\n        });\r\n\r\n        return matchingAccounts;\r\n    }\r\n\r\n    /**\r\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    getCredentialsFilteredBy(filter: CredentialFilter): CredentialCache {\r\n        return this.getCredentialsFilteredByInternal(\r\n            filter.homeAccountId,\r\n            filter.environment,\r\n            filter.credentialType,\r\n            filter.clientId,\r\n            filter.familyId,\r\n            filter.realm,\r\n            filter.target,\r\n            filter.oboAssertion\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Support function to help match credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    private getCredentialsFilteredByInternal(\r\n        homeAccountId?: string,\r\n        environment?: string,\r\n        credentialType?: string,\r\n        clientId?: string,\r\n        familyId?: string,\r\n        realm?: string,\r\n        target?: string,\r\n        oboAssertion?: string\r\n    ): CredentialCache {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingCredentials: CredentialCache = {\r\n            idTokens: {},\r\n            accessTokens: {},\r\n            refreshTokens: {},\r\n        };\r\n        \r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-credential type cache entities\r\n            const credType = CredentialEntity.getCredentialType(cacheKey);\r\n\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getSpecificCredential(cacheKey, credType);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!oboAssertion && !this.matchOboAssertion(entity, oboAssertion)) {\r\n                return;\r\n            }\r\n\r\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!realm && !this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n\r\n            if (!!credentialType && !this.matchCredentialType(entity, credentialType)) {\r\n                return;\r\n            }\r\n\r\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!familyId && !this.matchFamilyId(entity, familyId)) {\r\n                return;\r\n            }\r\n\r\n            /*\r\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n             */\r\n            if (!!target && !this.matchTarget(entity, target)) {\r\n                return;\r\n            }\r\n\r\n            switch (credType) {\r\n                case CredentialType.ID_TOKEN:\r\n                    matchingCredentials.idTokens[cacheKey] = entity as IdTokenEntity;\r\n                    break;\r\n                case CredentialType.ACCESS_TOKEN:\r\n                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                    matchingCredentials.accessTokens[cacheKey] = entity as AccessTokenEntity;\r\n                    break;\r\n                case CredentialType.REFRESH_TOKEN:\r\n                    matchingCredentials.refreshTokens[cacheKey] = entity as RefreshTokenEntity;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return matchingCredentials;\r\n    }\r\n\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\r\n        return this.getAppMetadataFilteredByInternal(\r\n            filter.environment,\r\n            filter.clientId,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    private getAppMetadataFilteredByInternal(\r\n        environment?: string,\r\n        clientId?: string\r\n    ): AppMetadataCache {\r\n\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAppMetadata: AppMetadataCache = {};\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getAppMetadata(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n\r\n            matchingAppMetadata[cacheKey] = entity;\r\n\r\n        });\r\n\r\n        return matchingAppMetadata;\r\n    }\r\n\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\r\n        const allCacheKeys = this.getAuthorityMetadataKeys();\r\n        let matchedEntity = null;\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getAuthorityMetadata(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n\r\n            matchedEntity = entity;\r\n\r\n        });\r\n        \r\n        return matchedEntity;\r\n    }\r\n\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    removeAllAccounts(): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            const entity = this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            this.removeAccount(cacheKey);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    removeAccount(accountKey: string): boolean {\r\n        const account = this.getAccount(accountKey);\r\n        if (!account) {\r\n            throw ClientAuthError.createNoAccountFoundError();\r\n        }\r\n        return (this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    removeAccountContext(account: AccountEntity): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        const accountId = account.generateAccountId();\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-credential type cache entities\r\n            const credType = CredentialEntity.getCredentialType(cacheKey);\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n\r\n            const cacheEntity = this.getSpecificCredential(cacheKey, credType);\r\n            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\r\n                this.removeCredential(cacheEntity);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    removeCredential(credential: CredentialEntity): boolean {\r\n        const key = credential.generateCredentialKey();\r\n        return this.removeItem(key, CacheSchemaType.CREDENTIAL);\r\n    }\r\n\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    removeAppMetadata(): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            if (this.isAppMetadata(cacheKey)) {\r\n                this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    readCacheRecord(account: AccountInfo, clientId: string, scopes: ScopeSet, environment: string, authScheme: AuthenticationScheme): CacheRecord {\r\n        const cachedAccount = this.readAccountFromCache(account);\r\n        const cachedIdToken = this.readIdTokenFromCache(clientId, account);\r\n        const cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);\r\n        const cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\r\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\r\n        const accountKey: string = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    }\r\n\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    readIdTokenFromCache(clientId: string, account: AccountInfo): IdTokenEntity | null {\r\n        const idTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: clientId,\r\n            realm: account.tenantId,\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(idTokenFilter);\r\n        const idTokens = Object.keys(credentialCache.idTokens).map((key) => credentialCache.idTokens[key]);\r\n        const numIdTokens = idTokens.length;\r\n\r\n        if (numIdTokens < 1) {\r\n            return null;\r\n        } else if (numIdTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n\r\n        return idTokens[0] as IdTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    readAccessTokenFromCache(clientId: string, account: AccountInfo, scopes: ScopeSet, authScheme: AuthenticationScheme): AccessTokenEntity | null {\r\n        const credentialType = (authScheme === AuthenticationScheme.POP) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId,\r\n            realm: account.tenantId,\r\n            target: scopes.printScopesLowerCase(),\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\r\n\r\n        const accessTokens = Object.keys(credentialCache.accessTokens).map((key) => credentialCache.accessTokens[key]);\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    readRefreshTokenFromCache(clientId: string, account: AccountInfo, familyRT: boolean): RefreshTokenEntity | null {\r\n        const id = familyRT ? THE_FAMILY_ID : undefined;\r\n        const refreshTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: clientId,\r\n            familyId: id\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\r\n        const refreshTokens = Object.keys(credentialCache.refreshTokens).map((key) => credentialCache.refreshTokens[key]);\r\n\r\n        const numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n\r\n        return refreshTokens[0] as RefreshTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    readAppMetadataFromCache(environment: string, clientId: string): AppMetadataEntity | null {\r\n        const appMetadataFilter: AppMetadataFilter = {\r\n            environment,\r\n            clientId,\r\n        };\r\n\r\n        const appMetadata: AppMetadataCache = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(appMetadata).map((key) => appMetadata[key]);\r\n\r\n        const numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        } else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n\r\n        return appMetadataEntries[0] as AppMetadataEntity;\r\n    }\r\n\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    isAppMetadataFOCI(environment: string, clientId: string): boolean {\r\n        const appMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    }\r\n\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    private matchHomeAccountId(entity: AccountEntity | CredentialEntity, homeAccountId: string): boolean {\r\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\r\n    }\r\n\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    private matchOboAssertion(entity: AccountEntity | CredentialEntity, oboAssertion: string): boolean {\r\n        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\r\n    }\r\n\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    private matchEnvironment(entity: AccountEntity | CredentialEntity | AppMetadataEntity, environment: string): boolean {\r\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    private matchCredentialType(entity: CredentialEntity, credentialType: string): boolean {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    private matchClientId(entity: CredentialEntity | AppMetadataEntity, clientId: string): boolean {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    }\r\n\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    private matchFamilyId(entity: CredentialEntity | AppMetadataEntity, familyId: string): boolean {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    }\r\n\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    private matchRealm(entity: AccountEntity | CredentialEntity, realm: string): boolean {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    private matchTarget(entity: CredentialEntity, target: string): boolean {\r\n        const isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n\r\n        if ( isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n\r\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\r\n        const requestTargetScopeSet: ScopeSet = ScopeSet.fromString(target);\r\n\r\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\r\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\r\n        } else {\r\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\r\n    }\r\n\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    private isAppMetadata(key: string): boolean {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    }\r\n\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    protected isAuthorityMetadata(key: string): boolean {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    }\r\n\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    generateAuthorityMetadataCacheKey(authority: string): string {\r\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\r\n    }\r\n\r\n    /**\r\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n     * @param key\r\n     * @param credType\r\n     */\r\n    private getSpecificCredential(key: string, credType: string): ValidCredentialType | null {\r\n        switch (credType) {\r\n            case CredentialType.ID_TOKEN: {\r\n                return this.getIdTokenCredential(key);\r\n            }\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\r\n                return this.getAccessTokenCredential(key);\r\n            }\r\n            case CredentialType.REFRESH_TOKEN: {\r\n                return this.getRefreshTokenCredential(key);\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    static toObject<T>(obj: T, json: object): T {\r\n        for (const propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n\r\nexport class DefaultStorageClass extends CacheManager {\r\n    setAccount(): void {\r\n        const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccount(): AccountEntity {\r\n        const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setIdTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getIdTokenCredential(): IdTokenEntity {\r\n        const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAccessTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccessTokenCredential(): AccessTokenEntity {\r\n        const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setRefreshTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getRefreshTokenCredential(): RefreshTokenEntity {\r\n        const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAppMetadata(): void {\r\n        const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAppMetadata(): AppMetadataEntity {\r\n        const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setServerTelemetry(): void {\r\n        const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getServerTelemetry(): ServerTelemetryEntity {\r\n        const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAuthorityMetadata(): void {\r\n        const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\r\n        const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setThrottlingCache(): void {\r\n        const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getThrottlingCache(): ThrottlingEntity {\r\n        const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    removeItem(): boolean {\r\n        const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    containsKey(): boolean {\r\n        const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getKeys(): string[] {\r\n        const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    clear(): void {\r\n        const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}