{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { Constants as Constants$1, AuthorityMetadataSource, RegionDiscoveryOutcomes } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { AuthorityType as AuthorityType$1 } from './AuthorityType.js';\nimport { UrlString as UrlString$1 } from '../url/UrlString.js';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.js';\nimport { ProtocolMode as ProtocolMode$1 } from './ProtocolMode.js';\nimport { AuthorityMetadataEntity as AuthorityMetadataEntity$1 } from '../cache/entities/AuthorityMetadataEntity.js';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.js';\nimport { RegionDiscovery as RegionDiscovery$1 } from './RegionDiscovery.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, networkInterface, cacheManager, authorityOptions) {\n    this.canonicalAuthority = authority;\n\n    this._canonicalAuthority.validateAsUri();\n\n    this.networkInterface = networkInterface;\n    this.cacheManager = cacheManager;\n    this.authorityOptions = authorityOptions;\n    this.regionDiscovery = new RegionDiscovery$1(networkInterface);\n    this.regionDiscoveryMetadata = {\n      region_used: undefined,\n      region_source: undefined,\n      region_outcome: undefined\n    };\n  }\n\n  Object.defineProperty(Authority.prototype, \"authorityType\", {\n    // See above for AuthorityType\n    get: function () {\n      var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\n\n      if (pathSegments.length && pathSegments[0].toLowerCase() === Constants$1.ADFS) {\n        return AuthorityType$1.Adfs;\n      }\n\n      return AuthorityType$1.Default;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"protocolMode\", {\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\n    get: function () {\n      return this.authorityOptions.protocolMode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"options\", {\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\n    get: function () {\n      return this.authorityOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthority\", {\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this._canonicalAuthority.urlString;\n    },\n\n    /**\r\n     * Sets canonical authority.\r\n     */\n    set: function (url) {\n      this._canonicalAuthority = new UrlString$1(url);\n\n      this._canonicalAuthority.validateAsUri();\n\n      this._canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"canonicalAuthorityUrlComponents\", {\n    /**\r\n     * Get authority components.\r\n     */\n    get: function () {\n      if (!this._canonicalAuthorityUrlComponents) {\n        this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\n      }\n\n      return this._canonicalAuthorityUrlComponents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"hostnameAndPort\", {\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tenant\", {\n    /**\r\n     * Get tenant for authority.\r\n     */\n    get: function () {\n      return this.canonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"authorizationEndpoint\", {\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.authorization_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"tokenEndpoint\", {\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"deviceCodeEndpoint\", {\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"endSessionEndpoint\", {\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.end_session_endpoint);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"selfSignedJwtAudience\", {\n    /**\r\n     * OAuth issuer for requests\r\n     */\n    get: function () {\n      if (this.discoveryComplete()) {\n        var endpoint = this.replacePath(this.metadata.issuer);\n        return this.replaceTenant(endpoint);\n      } else {\n        throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Replaces tenant in url path with current tenant. Defaults to common.\r\n   * @param urlString\r\n   */\n\n  Authority.prototype.replaceTenant = function (urlString) {\n    return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\n  };\n  /**\r\n   * Replaces path such as tenant or policy with the current tenant or policy.\r\n   * @param urlString\r\n   */\n\n\n  Authority.prototype.replacePath = function (urlString) {\n    var endpoint = urlString;\n    var cachedAuthorityUrl = new UrlString$1(this.metadata.canonical_authority);\n    var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\n    currentAuthorityParts.forEach(function (currentPart, index) {\n      var cachedPart = cachedAuthorityParts[index];\n\n      if (currentPart !== cachedPart) {\n        endpoint = endpoint.replace(\"/\" + cachedPart + \"/\", \"/\" + currentPart + \"/\");\n      }\n    });\n    return endpoint;\n  };\n\n  Object.defineProperty(Authority.prototype, \"defaultOpenIdConfigurationEndpoint\", {\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\n    get: function () {\n      if (this.authorityType === AuthorityType$1.Adfs || this.protocolMode === ProtocolMode$1.OIDC) {\n        return this.canonicalAuthority + \".well-known/openid-configuration\";\n      }\n\n      return this.canonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Boolean that returns whethr or not tenant discovery has been completed.\r\n   */\n\n  Authority.prototype.discoveryComplete = function () {\n    return !!this.metadata;\n  };\n  /**\r\n   * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n   * and the /authorize, /token and logout endpoints.\r\n   */\n\n\n  Authority.prototype.resolveEndpointsAsync = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\n\n            if (!metadataEntity) {\n              metadataEntity = new AuthorityMetadataEntity$1();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            return [4\n            /*yield*/\n            , this.updateCloudDiscoveryMetadata(metadataEntity)];\n\n          case 1:\n            cloudDiscoverySource = _a.sent();\n            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\n            return [4\n            /*yield*/\n            , this.updateEndpointMetadata(metadataEntity)];\n\n          case 2:\n            endpointSource = _a.sent();\n\n            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\n              // Reset the expiration time unless both values came from a successful cache lookup\n              metadataEntity.resetExpiresAt();\n              metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\n            }\n\n            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\n            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\n            this.metadata = metadataEntity;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.updateEndpointMetadata = function (metadataEntity) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata, autodetectedRegionName, azureRegion;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            metadata = this.getEndpointMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateEndpointMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            }\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            return [4\n            /*yield*/\n            , this.getEndpointMetadataFromNetwork()];\n\n          case 1:\n            metadata = _b.sent();\n            if (!metadata) return [3\n            /*break*/\n            , 4];\n            if (!((_a = this.authorityOptions.azureRegionConfiguration) === null || _a === void 0 ? void 0 : _a.azureRegion)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata)];\n\n          case 2:\n            autodetectedRegionName = _b.sent();\n            azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants$1.AZURE_REGION_AUTO_DISCOVER_FLAG ? autodetectedRegionName : this.authorityOptions.azureRegionConfiguration.azureRegion;\n\n            if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants$1.AZURE_REGION_AUTO_DISCOVER_FLAG) {\n              this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ? RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL : RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\n            } else {\n              if (autodetectedRegionName) {\n                this.regionDiscoveryMetadata.region_outcome = this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName ? RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED : RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\n              } else {\n                this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\n              }\n            }\n\n            if (azureRegion) {\n              this.regionDiscoveryMetadata.region_used = azureRegion;\n              metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            metadataEntity.updateEndpointMetadata(metadata, true);\n            return [2\n            /*return*/\n            , AuthorityMetadataSource.NETWORK];\n\n          case 4:\n            throw ClientAuthError$1.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\n        }\n      });\n    });\n  };\n  /**\r\n   * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n   * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n   * @param metadataEntity\r\n   */\n\n\n  Authority.prototype.isAuthoritySameType = function (metadataEntity) {\n    var cachedAuthorityUrl = new UrlString$1(metadataEntity.canonical_authority);\n    var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\n    return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\n  };\n  /**\r\n   * Parse authorityMetadata config option\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromConfig = function () {\n    if (this.authorityOptions.authorityMetadata) {\n      try {\n        return JSON.parse(this.authorityOptions.authorityMetadata);\n      } catch (e) {\n        throw ClientConfigurationError$1.createInvalidAuthorityMetadataError();\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n   */\n\n\n  Authority.prototype.getEndpointMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint)];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , isOpenIdConfigResponse(response.body) ? response.body : null];\n\n          case 2:\n            e_1 = _a.sent();\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n   * @param cachedMetadata\r\n   * @param newMetadata\r\n   */\n\n\n  Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {\n    return __awaiter(this, void 0, void 0, function () {\n      var metadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            metadata = this.getCloudDiscoveryMetadataFromConfig();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CONFIG];\n            } // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\n\n\n            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\n              // No need to update\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.CACHE];\n            }\n\n            return [4\n            /*yield*/\n            , this.getCloudDiscoveryMetadataFromNetwork()];\n\n          case 1:\n            metadata = _a.sent();\n\n            if (metadata) {\n              metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\n              return [2\n              /*return*/\n              , AuthorityMetadataSource.NETWORK];\n            } else {\n              // Metadata could not be obtained from config, cache or network\n              throw ClientConfigurationError$1.createUntrustedAuthorityError();\n            }\n\n        }\n      });\n    });\n  };\n  /**\r\n   * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {\n    // Check if network response was provided in config\n    if (this.authorityOptions.cloudDiscoveryMetadata) {\n      try {\n        var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\n        var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\n\n        if (metadata) {\n          return metadata;\n        }\n      } catch (e) {\n        throw ClientConfigurationError$1.createInvalidCloudDiscoveryMetadataError();\n      }\n    } // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\n\n\n    if (this.isInKnownAuthorities()) {\n      return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n    }\n\n    return null;\n  };\n  /**\r\n   * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n   * @param networkInterface\r\n   */\n\n\n  Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var instanceDiscoveryEndpoint, match, response, metadata, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            instanceDiscoveryEndpoint = \"\" + Constants$1.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + \"oauth2/v2.0/authorize\";\n            match = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint)];\n\n          case 2:\n            response = _a.sent();\n            metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\n\n            if (metadata.length === 0) {\n              // If no metadata is returned, authority is untrusted\n              return [2\n              /*return*/\n              , null];\n            }\n\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_2 = _a.sent();\n            return [2\n            /*return*/\n            , null];\n\n          case 4:\n            if (!match) {\n              // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \n              match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\n            }\n\n            return [2\n            /*return*/\n            , match];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to determine if this host is included in the knownAuthorities config option\r\n   */\n\n\n  Authority.prototype.isInKnownAuthorities = function () {\n    var _this = this;\n\n    var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {\n      return UrlString$1.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;\n    });\n    return matches.length > 0;\n  };\n  /**\r\n   * Creates cloud discovery metadata object from a given host\r\n   * @param host\r\n   */\n\n\n  Authority.createCloudDiscoveryMetadataFromHost = function (host) {\n    return {\n      preferred_network: host,\n      preferred_cache: host,\n      aliases: [host]\n    };\n  };\n  /**\r\n   * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n   * @param response\r\n   * @param authority\r\n   */\n\n\n  Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {\n    for (var i = 0; i < response.length; i++) {\n      var metadata = response[i];\n\n      if (metadata.aliases.indexOf(authority) > -1) {\n        return metadata;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * helper function to generate environment from authority object\r\n   */\n\n\n  Authority.prototype.getPreferredCache = function () {\n    if (this.discoveryComplete()) {\n      return this.metadata.preferred_cache;\n    } else {\n      throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\n    }\n  };\n  /**\r\n   * Returns whether or not the provided host is an alias of this authority instance\r\n   * @param host\r\n   */\n\n\n  Authority.prototype.isAlias = function (host) {\n    return this.metadata.aliases.indexOf(host) > -1;\n  };\n  /**\r\n   * Checks whether the provided host is that of a public cloud authority\r\n   *\r\n   * @param authority string\r\n   * @returns bool\r\n   */\n\n\n  Authority.isPublicCloudAuthority = function (host) {\n    return Constants$1.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\n  };\n  /**\r\n   * Rebuild the authority string with the region\r\n   *\r\n   * @param host string\r\n   * @param region string\r\n   */\n\n\n  Authority.buildRegionalAuthorityString = function (host, region, queryString) {\n    // Create and validate a Url string object with the initial authority string\n    var authorityUrlInstance = new UrlString$1(host);\n    authorityUrlInstance.validateAsUri();\n    var authorityUrlParts = authorityUrlInstance.getUrlComponents();\n    var hostNameAndPort = region + \".\" + authorityUrlParts.HostNameAndPort;\n\n    if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\n      hostNameAndPort = region + \".\" + Constants$1.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;\n    } // Include the query string portion of the url\n\n\n    var url = UrlString$1.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), {\n      HostNameAndPort: hostNameAndPort\n    })).urlString; // Add the query string if a query string was provided\n\n    if (queryString) return url + \"?\" + queryString;\n    return url;\n  };\n  /**\r\n   * Replace the endpoints in the metadata object with their regional equivalents.\r\n   *\r\n   * @param metadata OpenIdConfigResponse\r\n   * @param azureRegion string\r\n   */\n\n\n  Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {\n    metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion); // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\n\n    metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\n    metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\n    return metadata;\n  };\n\n  return Authority;\n}();\n\nexport { Authority };","map":{"version":3,"mappings":"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","names":["authority","networkInterface","cacheManager","authorityOptions","canonicalAuthority","_canonicalAuthority","validateAsUri","regionDiscovery","RegionDiscovery","regionDiscoveryMetadata","region_used","undefined","region_source","region_outcome","Object","Authority","pathSegments","canonicalAuthorityUrlComponents","PathSegments","length","toLowerCase","Constants","ADFS","AuthorityType","Adfs","Default","protocolMode","urlString","url","UrlString","_canonicalAuthorityUrlComponents","getUrlComponents","HostNameAndPort","discoveryComplete","endpoint","replacePath","metadata","authorization_endpoint","replaceTenant","ClientAuthError","createEndpointDiscoveryIncompleteError","token_endpoint","replace","end_session_endpoint","issuer","tenant","cachedAuthorityUrl","canonical_authority","cachedAuthorityParts","currentAuthorityParts","forEach","currentPart","index","cachedPart","authorityType","ProtocolMode","OIDC","metadataEntity","getAuthorityMetadataByAlias","hostnameAndPort","AuthorityMetadataEntity","updateCanonicalAuthority","updateCloudDiscoveryMetadata","cloudDiscoverySource","_a","preferred_network","updateEndpointMetadata","endpointSource","AuthorityMetadataSource","CACHE","resetExpiresAt","cacheKey","generateAuthorityMetadataCacheKey","preferred_cache","setAuthorityMetadata","getEndpointMetadataFromConfig","CONFIG","isAuthoritySameType","endpointsFromNetwork","isExpired","getEndpointMetadataFromNetwork","_b","azureRegionConfiguration","azureRegion","detectRegion","environmentRegion","autodetectedRegionName","AZURE_REGION_AUTO_DISCOVER_FLAG","RegionDiscoveryOutcomes","AUTO_DETECTION_REQUESTED_SUCCESSFUL","AUTO_DETECTION_REQUESTED_FAILED","CONFIGURED_MATCHES_DETECTED","CONFIGURED_NOT_DETECTED","CONFIGURED_NO_AUTO_DETECTION","replaceWithRegionalInformation","NETWORK","createUnableToGetOpenidConfigError","defaultOpenIdConfigurationEndpoint","cachedParts","authorityMetadata","JSON","parse","e","ClientConfigurationError","createInvalidAuthorityMetadataError","sendGetRequestAsync","response","isOpenIdConfigResponse","body","getCloudDiscoveryMetadataFromConfig","aliasesFromNetwork","getCloudDiscoveryMetadataFromNetwork","createUntrustedAuthorityError","cloudDiscoveryMetadata","parsedResponse","getCloudDiscoveryMetadataFromNetworkResponse","createInvalidCloudDiscoveryMetadataError","isInKnownAuthorities","createCloudDiscoveryMetadataFromHost","instanceDiscoveryEndpoint","AAD_INSTANCE_DISCOVERY_ENDPT","match","isCloudInstanceDiscoveryResponse","matches","knownAuthorities","filter","getDomainFromUrl","_this","host","aliases","i","indexOf","KNOWN_PUBLIC_CLOUDS","region","queryString","authorityUrlInstance","authorityUrlParts","hostNameAndPort","isPublicCloudAuthority","REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX","constructAuthorityUriFromObject","__assign","buildRegionalAuthorityString"],"sources":["../../src/authority/Authority.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthorityType } from \"./AuthorityType\";\r\nimport { isOpenIdConfigResponse, OpenIdConfigResponse } from \"./OpenIdConfigResponse\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { IUri } from \"../url/IUri\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { AuthorityMetadataSource, Constants, RegionDiscoveryOutcomes } from \"../utils/Constants\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ProtocolMode } from \"./ProtocolMode\";\r\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\r\nimport { AuthorityMetadataEntity } from \"../cache/entities/AuthorityMetadataEntity\";\r\nimport { AuthorityOptions } from \"./AuthorityOptions\";\r\nimport { CloudInstanceDiscoveryResponse, isCloudInstanceDiscoveryResponse } from \"./CloudInstanceDiscoveryResponse\";\r\nimport { CloudDiscoveryMetadata } from \"./CloudDiscoveryMetadata\";\r\nimport { RegionDiscovery } from \"./RegionDiscovery\";\r\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\r\n\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n */\r\nexport class Authority {\r\n\r\n    // Canonical authority url string\r\n    private _canonicalAuthority: UrlString;\r\n    // Canonicaly authority url components\r\n    private _canonicalAuthorityUrlComponents: IUri | null;\r\n    // Network interface to make requests with.\r\n    protected networkInterface: INetworkModule;\r\n    // Cache Manager to cache network responses\r\n    protected cacheManager: ICacheManager;\r\n    // Protocol mode to construct endpoints\r\n    private authorityOptions: AuthorityOptions;\r\n    // Authority metadata\r\n    private metadata: AuthorityMetadataEntity;\r\n    // Region discovery service\r\n    private regionDiscovery: RegionDiscovery;\r\n    // Region discovery metadata\r\n    public regionDiscoveryMetadata: RegionDiscoveryMetadata;\r\n\r\n    constructor(authority: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface);\r\n        this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };\r\n    }\r\n\r\n    // See above for AuthorityType\r\n    public get authorityType(): AuthorityType {\r\n        const pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;\r\n\r\n        if (pathSegments.length && pathSegments[0].toLowerCase() === Constants.ADFS) {\r\n            return AuthorityType.Adfs;\r\n        }\r\n\r\n        return AuthorityType.Default;\r\n    }\r\n\r\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\r\n    public get protocolMode(): ProtocolMode {\r\n        return this.authorityOptions.protocolMode;\r\n    }\r\n\r\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\r\n    public get options(): AuthorityOptions {\r\n        return this.authorityOptions;\r\n    }\r\n\r\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\r\n    public get canonicalAuthority(): string {\r\n        return this._canonicalAuthority.urlString;\r\n    }\r\n\r\n    /**\r\n     * Sets canonical authority.\r\n     */\r\n    public set canonicalAuthority(url: string) {\r\n        this._canonicalAuthority = new UrlString(url);\r\n        this._canonicalAuthority.validateAsUri();\r\n        this._canonicalAuthorityUrlComponents = null;\r\n    }\r\n\r\n    /**\r\n     * Get authority components.\r\n     */\r\n    public get canonicalAuthorityUrlComponents(): IUri {\r\n        if (!this._canonicalAuthorityUrlComponents) {\r\n            this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();\r\n        }\r\n\r\n        return this._canonicalAuthorityUrlComponents;\r\n    }\r\n\r\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\r\n    public get hostnameAndPort(): string {\r\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Get tenant for authority.\r\n     */\r\n    public get tenant(): string {\r\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n    }\r\n\r\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\r\n    public get authorizationEndpoint(): string {\r\n        if(this.discoveryComplete()) {\r\n            const endpoint = this.replacePath(this.metadata.authorization_endpoint);\r\n            return this.replaceTenant(endpoint);\r\n        } else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\r\n    public get tokenEndpoint(): string {\r\n        if(this.discoveryComplete()) {\r\n            const endpoint = this.replacePath(this.metadata.token_endpoint);\r\n            return this.replaceTenant(endpoint);\r\n        } else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    }\r\n\r\n    public get deviceCodeEndpoint(): string {\r\n        if(this.discoveryComplete()) {\r\n            const endpoint = this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n            return this.replaceTenant(endpoint);\r\n        } else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\r\n    public get endSessionEndpoint(): string {\r\n        if(this.discoveryComplete()) {\r\n            const endpoint = this.replacePath(this.metadata.end_session_endpoint);\r\n            return this.replaceTenant(endpoint);\r\n        } else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * OAuth issuer for requests\r\n     */\r\n    public get selfSignedJwtAudience(): string {\r\n        if(this.discoveryComplete()) {\r\n            const endpoint = this.replacePath(this.metadata.issuer);\r\n            return this.replaceTenant(endpoint);\r\n        } else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    private replaceTenant(urlString: string): string {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    }\r\n\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString \r\n     */\r\n    private replacePath(urlString: string): string {\r\n        let endpoint = urlString;\r\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        const cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n\r\n        currentAuthorityParts.forEach((currentPart, index) => {\r\n            const cachedPart = cachedAuthorityParts[index];\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\r\n            }\r\n        });\r\n\r\n        return endpoint;\r\n    }\r\n\r\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\r\n    protected get defaultOpenIdConfigurationEndpoint(): string {\r\n        if (this.authorityType === AuthorityType.Adfs || this.protocolMode === ProtocolMode.OIDC) {\r\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\r\n        }\r\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\r\n    }\r\n\r\n    /**\r\n     * Boolean that returns whethr or not tenant discovery has been completed.\r\n     */\r\n    discoveryComplete(): boolean {\r\n        return !!this.metadata;\r\n    }\r\n\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    public async resolveEndpointsAsync(): Promise<void> {\r\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n        if (!metadataEntity) {\r\n            metadataEntity = new AuthorityMetadataEntity();\r\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n        }\r\n\r\n        const cloudDiscoverySource = await this.updateCloudDiscoveryMetadata(metadataEntity);\r\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n        const endpointSource = await this.updateEndpointMetadata(metadataEntity);\r\n\r\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {\r\n            // Reset the expiration time unless both values came from a successful cache lookup\r\n            metadataEntity.resetExpiresAt();\r\n            metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);\r\n        } \r\n\r\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n        this.metadata = metadataEntity;\r\n    }\r\n\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity \r\n     */\r\n    private async updateEndpointMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\r\n        let metadata = this.getEndpointMetadataFromConfig();\r\n        if (metadata) {\r\n            metadataEntity.updateEndpointMetadata(metadata, false);\r\n            return AuthorityMetadataSource.CONFIG;\r\n        }\r\n\r\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {\r\n            // No need to update\r\n            return AuthorityMetadataSource.CACHE;\r\n        }\r\n\r\n        metadata = await this.getEndpointMetadataFromNetwork();\r\n        if (metadata) {\r\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                const autodetectedRegionName = await this.regionDiscovery.detectRegion(this.authorityOptions.azureRegionConfiguration.environmentRegion, this.regionDiscoveryMetadata);\r\n\r\n                const azureRegion = this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG \r\n                    ? autodetectedRegionName \r\n                    : this.authorityOptions.azureRegionConfiguration.azureRegion;\r\n\r\n                if (this.authorityOptions.azureRegionConfiguration.azureRegion === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                    this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?\r\n                        RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :\r\n                        RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n                } else {\r\n                    if (autodetectedRegionName) {\r\n                        this.regionDiscoveryMetadata.region_outcome = (this.authorityOptions.azureRegionConfiguration.azureRegion === autodetectedRegionName) ?\r\n                            RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :\r\n                            RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;\r\n                    } else {\r\n                        this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                    }\r\n                }\r\n\r\n                if (azureRegion) {\r\n                    this.regionDiscoveryMetadata.region_used = azureRegion;\r\n                    metadata = Authority.replaceWithRegionalInformation(metadata, azureRegion);\r\n                }\r\n            }\r\n\r\n            metadataEntity.updateEndpointMetadata(metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        } else {\r\n            throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached authority metadata can be used for the requested authority\r\n     * Protects against same domain different authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    private isAuthoritySameType(metadataEntity: AuthorityMetadataEntity): boolean {\r\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        \r\n        return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;\r\n    }\r\n\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    private getEndpointMetadataFromConfig(): OpenIdConfigResponse | null {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata) as OpenIdConfigResponse;\r\n            } catch (e) {\r\n                throw ClientConfigurationError.createInvalidAuthorityMetadataError();\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     */\r\n    private async getEndpointMetadataFromNetwork(): Promise<OpenIdConfigResponse | null> {\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync<OpenIdConfigResponse>(this.defaultOpenIdConfigurationEndpoint);\r\n            return isOpenIdConfigResponse(response.body) ? response.body : null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache and returns where the information was retrived from\r\n     * @param cachedMetadata \r\n     * @param newMetadata \r\n     */\r\n    private async updateCloudDiscoveryMetadata(metadataEntity: AuthorityMetadataEntity): Promise<AuthorityMetadataSource> {\r\n        let metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n        if (metadata) {\r\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, false);\r\n            return AuthorityMetadataSource.CONFIG;\r\n        }\r\n\r\n        // If The cached metadata came from config but that config was not passed to this instance, we must go to the network\r\n        if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntity.isExpired()) {\r\n            // No need to update\r\n            return AuthorityMetadataSource.CACHE;\r\n        }\r\n\r\n        metadata = await this.getCloudDiscoveryMetadataFromNetwork();\r\n        if (metadata) {\r\n            metadataEntity.updateCloudDiscoveryMetadata(metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        } else {\r\n            // Metadata could not be obtained from config, cache or network\r\n            throw ClientConfigurationError.createUntrustedAuthorityError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    private getCloudDiscoveryMetadataFromConfig(): CloudDiscoveryMetadata | null {\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            try {\r\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata) as CloudInstanceDiscoveryResponse;\r\n                const metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                if (metadata) {\r\n                    return metadata;\r\n                }\r\n            } catch (e) {\r\n                throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();\r\n            }\r\n        }\r\n\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     * @param networkInterface \r\n     */\r\n    private async getCloudDiscoveryMetadataFromNetwork(): Promise<CloudDiscoveryMetadata | null> {\r\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\r\n        let match = null;\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync<CloudInstanceDiscoveryResponse>(instanceDiscoveryEndpoint);\r\n            const metadata = isCloudInstanceDiscoveryResponse(response.body) ? response.body.metadata : [];\r\n            if (metadata.length === 0) {\r\n                // If no metadata is returned, authority is untrusted\r\n                return null;\r\n            }\r\n            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n        } catch(e) {\r\n            return null;\r\n        }\r\n\r\n        if (!match) {\r\n            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded \r\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return match;\r\n    } \r\n\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    private isInKnownAuthorities(): boolean {\r\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\r\n            return UrlString.getDomainFromUrl(authority).toLowerCase() === this.hostnameAndPort;\r\n        });\r\n\r\n        return matches.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host \r\n     */\r\n    static createCloudDiscoveryMetadataFromHost(host: string): CloudDiscoveryMetadata {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host]\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n     * @param response \r\n     * @param authority \r\n     */\r\n    static getCloudDiscoveryMetadataFromNetworkResponse(response: CloudDiscoveryMetadata[], authority: string): CloudDiscoveryMetadata | null {\r\n        for (let i = 0; i < response.length; i++) {\r\n            const metadata = response[i];\r\n            if (metadata.aliases.indexOf(authority) > -1) {\r\n                return metadata;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    getPreferredCache(): string {\r\n        if(this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        } else {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Discovery incomplete.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host \r\n     */\r\n    isAlias(host: string): boolean {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     * \r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    static isPublicCloudAuthority(host: string): boolean {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    }\r\n\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     * \r\n     * @param host string\r\n     * @param region string \r\n     */\r\n    static buildRegionalAuthorityString(host: string, region: string, queryString?: string): string {\r\n        // Create and validate a Url string object with the initial authority string\r\n        const authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n\r\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n\r\n        let hostNameAndPort= `${region}.${authorityUrlParts.HostNameAndPort}`;\r\n\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\r\n        }\r\n\r\n        // Include the query string portion of the url\r\n        const url = UrlString.constructAuthorityUriFromObject({\r\n            ...authorityUrlInstance.getUrlComponents(),\r\n            HostNameAndPort: hostNameAndPort\r\n        }).urlString;\r\n\r\n        // Add the query string if a query string was provided\r\n        if (queryString) return `${url}?${queryString}`;\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     * \r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    static replaceWithRegionalInformation(metadata: OpenIdConfigResponse, azureRegion: string): OpenIdConfigResponse {\r\n        metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);\r\n        // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature\r\n        metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, \"allowestsrnonmsi=true\");\r\n        metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);\r\n        \r\n        return metadata;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}