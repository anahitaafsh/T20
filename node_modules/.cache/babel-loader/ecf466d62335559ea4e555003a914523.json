{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS, CacheOutcome, Constants as Constants$1, Separators } from '../../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../../utils/StringUtils.js';\nimport { ServerTelemetryEntity as ServerTelemetryEntity$1 } from '../../cache/entities/ServerTelemetryEntity.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ServerTelemetryManager =\n/** @class */\nfunction () {\n  function ServerTelemetryManager(telemetryRequest, cacheManager) {\n    this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;\n    this.cacheManager = cacheManager;\n    this.apiId = telemetryRequest.apiId;\n    this.correlationId = telemetryRequest.correlationId;\n    this.wrapperSKU = telemetryRequest.wrapperSKU || Constants$1.EMPTY_STRING;\n    this.wrapperVer = telemetryRequest.wrapperVer || Constants$1.EMPTY_STRING;\n    this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\n  }\n  /**\r\n   * API to add MSER Telemetry to request\r\n   */\n\n\n  ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {\n    var request = \"\" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;\n    var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var regionDiscoveryFields = this.getRegionDiscoveryFields();\n    var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to add MSER Telemetry for the last failed request\r\n   */\n\n\n  ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {\n    var lastRequests = this.getLastRequests();\n    var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    var errorCount = lastRequests.errors.length; // Indicate whether this header contains all data or partial data\n\n    var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\n    var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\n    return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\n  };\n  /**\r\n   * API to cache token failures for MSER data capture\r\n   * @param error\r\n   */\n\n\n  ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {\n    var lastRequests = this.getLastRequests();\n\n    if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\n      // Remove a cached error to make room, first in first out\n      lastRequests.failedRequests.shift(); // apiId\n\n      lastRequests.failedRequests.shift(); // correlationId\n\n      lastRequests.errors.shift();\n    }\n\n    lastRequests.failedRequests.push(this.apiId, this.correlationId);\n\n    if (!StringUtils$1.isEmpty(error.subError)) {\n      lastRequests.errors.push(error.subError);\n    } else if (!StringUtils$1.isEmpty(error.errorCode)) {\n      lastRequests.errors.push(error.errorCode);\n    } else if (!!error && error.toString()) {\n      lastRequests.errors.push(error.toString());\n    } else {\n      lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\n    }\n\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return;\n  };\n  /**\r\n   * Update server telemetry cache entry by incrementing cache hit counter\r\n   */\n\n\n  ServerTelemetryManager.prototype.incrementCacheHits = function () {\n    var lastRequests = this.getLastRequests();\n    lastRequests.cacheHits += 1;\n    this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\n    return lastRequests.cacheHits;\n  };\n  /**\r\n   * Get the server telemetry entity from cache or initialize a new one\r\n   */\n\n\n  ServerTelemetryManager.prototype.getLastRequests = function () {\n    var initialValue = new ServerTelemetryEntity$1();\n    var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\n    return lastRequests || initialValue;\n  };\n  /**\r\n   * Remove server telemetry cache entry\r\n   */\n\n\n  ServerTelemetryManager.prototype.clearTelemetryCache = function () {\n    var lastRequests = this.getLastRequests();\n    var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\n    var errorCount = lastRequests.errors.length;\n\n    if (numErrorsFlushed === errorCount) {\n      // All errors were sent on last request, clear Telemetry cache\n      this.cacheManager.removeItem(this.telemetryCacheKey);\n    } else {\n      // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\n      var serverTelemEntity = new ServerTelemetryEntity$1();\n      serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error\n\n      serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\n      this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\n    }\n  };\n  /**\r\n   * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n   * @param serverTelemetryEntity\r\n   */\n\n\n  ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {\n    var i;\n    var maxErrors = 0;\n    var dataSize = 0;\n    var errorCount = serverTelemetryEntity.errors.length;\n\n    for (i = 0; i < errorCount; i++) {\n      // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\n      var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants$1.EMPTY_STRING;\n      var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants$1.EMPTY_STRING;\n      var errorCode = serverTelemetryEntity.errors[i] || Constants$1.EMPTY_STRING; // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\n\n      dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\n\n      if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\n        // Adding this entry to the header would still keep header size below the limit\n        maxErrors += 1;\n      } else {\n        break;\n      }\n    }\n\n    return maxErrors;\n  };\n  /**\r\n   * Get the region discovery fields\r\n   *\r\n   * @returns string\r\n   */\n\n\n  ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {\n    var regionDiscoveryFields = [];\n    regionDiscoveryFields.push(this.regionUsed || \"\");\n    regionDiscoveryFields.push(this.regionSource || \"\");\n    regionDiscoveryFields.push(this.regionOutcome || \"\");\n    return regionDiscoveryFields.join(\",\");\n  };\n  /**\r\n   * Update the region discovery metadata\r\n   *\r\n   * @param regionDiscoveryMetadata\r\n   * @returns void\r\n   */\n\n\n  ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {\n    this.regionUsed = regionDiscoveryMetadata.region_used;\n    this.regionSource = regionDiscoveryMetadata.region_source;\n    this.regionOutcome = regionDiscoveryMetadata.region_outcome;\n  };\n  /**\r\n   * Set cache outcome\r\n   */\n\n\n  ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {\n    this.cacheOutcome = cacheOutcome;\n  };\n\n  return ServerTelemetryManager;\n}();\n\nexport { ServerTelemetryManager };","map":{"version":3,"mappings":"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","names":["telemetryRequest","cacheManager","CacheOutcome","NO_CACHE_HIT","apiId","correlationId","wrapperSKU","Constants","EMPTY_STRING","wrapperVer","telemetryCacheKey","SERVER_TELEM_CONSTANTS","CACHE_KEY","Separators","CACHE_KEY_SEPARATOR","clientId","ServerTelemetryManager","request","VALUE_SEPARATOR","cacheOutcome","platformFields","join","regionDiscoveryFields","getRegionDiscoveryFields","requestWithRegionDiscoveryFields","SCHEMA_VERSION","CATEGORY_SEPARATOR","lastRequests","getLastRequests","maxErrors","maxErrorsToSend","failedRequests","slice","errors","errorCount","length","overflow","OVERFLOW_TRUE","OVERFLOW_FALSE","cacheHits","error","MAX_CACHED_ERRORS","shift","push","StringUtils","isEmpty","subError","errorCode","toString","UNKNOWN_ERROR","setServerTelemetry","initialValue","ServerTelemetryEntity","getServerTelemetry","numErrorsFlushed","removeItem","serverTelemEntity","serverTelemetryEntity","i","dataSize","MAX_LAST_HEADER_BYTES","regionUsed","regionSource","regionOutcome","regionDiscoveryMetadata","region_used","region_source","region_outcome"],"sources":["../../../src/telemetry/server/ServerTelemetryManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { SERVER_TELEM_CONSTANTS, Separators, CacheOutcome, Constants, RegionDiscoverySources, RegionDiscoveryOutcomes } from \"../../utils/Constants\";\r\nimport { CacheManager } from \"../../cache/CacheManager\";\r\nimport { AuthError } from \"../../error/AuthError\";\r\nimport { ServerTelemetryRequest } from \"./ServerTelemetryRequest\";\r\nimport { ServerTelemetryEntity } from \"../../cache/entities/ServerTelemetryEntity\";\r\nimport { StringUtils } from \"../../utils/StringUtils\";\r\nimport { RegionDiscoveryMetadata } from \"../../authority/RegionDiscoveryMetadata\";\r\n\r\nexport class ServerTelemetryManager {\r\n    private cacheManager: CacheManager;\r\n    private apiId: number;\r\n    private correlationId: string;\r\n    private telemetryCacheKey: string;\r\n    private wrapperSKU: String;\r\n    private wrapperVer: String;\r\n    private regionUsed: string | undefined;\r\n    private regionSource: RegionDiscoverySources | undefined;\r\n    private regionOutcome: RegionDiscoveryOutcomes | undefined;\r\n    private cacheOutcome: CacheOutcome = CacheOutcome.NO_CACHE_HIT;\r\n\r\n    constructor(telemetryRequest: ServerTelemetryRequest, cacheManager: CacheManager) {\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n\r\n        this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;\r\n    }\r\n\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    generateCurrentRequestHeaderValue(): string {\r\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\r\n        const platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        const requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    generateLastRequestHeaderValue(): string {\r\n        const lastRequests = this.getLastRequests();\r\n\r\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const failedRequests = lastRequests.failedRequests.slice(0, 2*maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errorCount = lastRequests.errors.length;\r\n\r\n        // Indicate whether this header contains all data or partial data\r\n        const overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n\r\n        return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    cacheFailedRequest(error: AuthError): void {\r\n        const lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        \r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n\r\n        if (!StringUtils.isEmpty(error.subError)) {\r\n            lastRequests.errors.push(error.subError);\r\n        } else if (!StringUtils.isEmpty(error.errorCode)) {\r\n            lastRequests.errors.push(error.errorCode);\r\n        } else if (!!error && error.toString()) {\r\n            lastRequests.errors.push(error.toString());\r\n        } else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    incrementCacheHits(): number {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);\r\n        return lastRequests.cacheHits;\r\n    }\r\n\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    getLastRequests(): ServerTelemetryEntity {\r\n        const initialValue: ServerTelemetryEntity = new ServerTelemetryEntity();\r\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey) as ServerTelemetryEntity;\r\n\r\n        return lastRequests || initialValue;\r\n    }\r\n\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    clearTelemetryCache(): void {\r\n        const lastRequests = this.getLastRequests();\r\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey);\r\n        } else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            const serverTelemEntity = new ServerTelemetryEntity();\r\n            serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed*2); // failedRequests contains 2 items for each error\r\n            serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);\r\n\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    static maxErrorsToSend(serverTelemetryEntity: ServerTelemetryEntity): number {\r\n        let i;\r\n        let maxErrors = 0;\r\n        let dataSize = 0;\r\n        const errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            const apiId = serverTelemetryEntity.failedRequests[2*i] || Constants.EMPTY_STRING;\r\n            const correlationId = serverTelemetryEntity.failedRequests[2*i + 1] || Constants.EMPTY_STRING;\r\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;\r\n\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return maxErrors;\r\n    }\r\n\r\n    /**\r\n     * Get the region discovery fields\r\n     * \r\n     * @returns string\r\n     */\r\n    getRegionDiscoveryFields(): string {\r\n        const regionDiscoveryFields: string[] = [];\r\n\r\n        regionDiscoveryFields.push(this.regionUsed || \"\");\r\n        regionDiscoveryFields.push(this.regionSource || \"\");\r\n        regionDiscoveryFields.push(this.regionOutcome || \"\");\r\n\r\n        return regionDiscoveryFields.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * Update the region discovery metadata\r\n     * \r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata: RegionDiscoveryMetadata): void {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    }\r\n\r\n    /**\r\n     * Set cache outcome \r\n     */\r\n    setCacheOutcome(cacheOutcome: CacheOutcome): void {\r\n        this.cacheOutcome = cacheOutcome;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}