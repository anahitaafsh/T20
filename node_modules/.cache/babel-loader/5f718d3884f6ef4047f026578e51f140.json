{"ast":null,"code":"/*! @azure/msal-browser v2.29.0 2022-10-03 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ModernBrowserCrypto =\n/** @class */\nfunction () {\n  function ModernBrowserCrypto() {}\n\n  ModernBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {\n    return window.crypto.getRandomValues(dataBuffer);\n  };\n\n  ModernBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.generateKey(algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.exportKey = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.sign = function (algorithm, key, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.sign(algorithm, key, data)];\n      });\n    });\n  };\n\n  ModernBrowserCrypto.prototype.digest = function (algorithm, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , window.crypto.subtle.digest(algorithm, data)];\n      });\n    });\n  };\n\n  return ModernBrowserCrypto;\n}();\n\nexport { ModernBrowserCrypto };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;EAQA,gCAwBC;;EAvBGA,0DAAgBC,UAAhB,EAAsC;IAClC,OAAOC,MAAM,CAACC,MAAP,CAAcC,eAAd,CAA8BH,UAA9B,CAAP;EACH,CAFD;;EAIMD,4CAAN,UAAkBK,SAAlB,EAAoDC,WAApD,EAA0EC,SAA1E,EAA+F;;;QAC3F;QAAA;QAAA,EAAOL,MAAM,CAACC,MAAP,CAAcK,MAAd,CAAqBC,WAArB,CAAiCJ,SAAjC,EAA4CC,WAA5C,EAAyDC,SAAzD,CAAP;;;EACH,CAFK;;EAIAP,0CAAN,UAAgBU,GAAhB,EAA8B;;;QAC1B;QAAA;QAAA,EAAOR,MAAM,CAACC,MAAP,CAAcK,MAAd,CAAqBG,SAArB,CAA+BC,cAA/B,EAA+CF,GAA/C,CAAP;;;EACH,CAFK;;EAIAV,0CAAN,UAAgBa,OAAhB,EAAqCR,SAArC,EAAuEC,WAAvE,EAA6FC,SAA7F,EAAkH;;;QAC9G;QAAA;QAAA,EAAOL,MAAM,CAACC,MAAP,CAAcK,MAAd,CAAqBM,SAArB,CAA+BF,cAA/B,EAA+CC,OAA/C,EAAwDR,SAAxD,EAAmEC,WAAnE,EAAgFC,SAAhF,CAAP;;;EACH,CAFK;;EAIAP,qCAAN,UAAWK,SAAX,EAA2CK,GAA3C,EAA2DK,IAA3D,EAA4E;;;QACxE;QAAA;QAAA,EAAOb,MAAM,CAACC,MAAP,CAAcK,MAAd,CAAqBQ,IAArB,CAA0BX,SAA1B,EAAqCK,GAArC,EAA0CK,IAA1C,CAAP;;;EACH,CAFK;;EAIAf,uCAAN,UAAaK,SAAb,EAA6CU,IAA7C,EAA6D;;;QACzD;QAAA;QAAA,EAAOb,MAAM,CAACC,MAAP,CAAcK,MAAd,CAAqBS,MAArB,CAA4BZ,SAA5B,EAAuCU,IAAvC,CAAP;;;EACH,CAFK;;EAGV;AAAC","names":["ModernBrowserCrypto","dataBuffer","window","crypto","getRandomValues","algorithm","extractable","keyUsages","subtle","generateKey","key","exportKey","KEY_FORMAT_JWK","keyData","importKey","data","sign","digest"],"sources":["../../src/crypto/ModernBrowserCrypto.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\nimport { ISubtleCrypto } from \"./ISubtleCrypto\";\n\nexport class ModernBrowserCrypto implements ISubtleCrypto {\n    getRandomValues(dataBuffer: Uint8Array): Uint8Array {\n        return window.crypto.getRandomValues(dataBuffer);\n    }\n\n    async generateKey(algorithm: RsaHashedKeyGenParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair> {\n        return window.crypto.subtle.generateKey(algorithm, extractable, keyUsages) as Promise<CryptoKeyPair>;\n    }\n\n    async exportKey(key: CryptoKey): Promise<JsonWebKey> {\n        return window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key) as Promise<JsonWebKey>;\n    }\n\n    async importKey(keyData: JsonWebKey, algorithm: RsaHashedImportParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey> {\n        return window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages) as Promise<CryptoKey>;\n    }\n\n    async sign(algorithm: AlgorithmIdentifier, key: CryptoKey, data: ArrayBuffer): Promise<ArrayBuffer> {\n        return window.crypto.subtle.sign(algorithm, key, data) as Promise<ArrayBuffer>;\n    }\n\n    async digest(algorithm: AlgorithmIdentifier, data: Uint8Array): Promise<ArrayBuffer> {\n        return window.crypto.subtle.digest(algorithm, data) as Promise<ArrayBuffer>;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}