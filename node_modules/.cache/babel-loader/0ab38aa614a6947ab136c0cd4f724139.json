{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants as Constants$1, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { ScopeSet as ScopeSet$1 } from './ScopeSet.js';\nimport { RequestValidator as RequestValidator$1 } from './RequestValidator.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RequestParameterBuilder =\n/** @class */\nfunction () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants$1.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n\n\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet$1(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator$1.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator$1.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator$1.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator$1.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n\n\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils$1.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator$1.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQparams\r\n   */\n\n\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\n    var _this = this;\n\n    RequestValidator$1.sanitizeEQParams(eQparams, this.parameters);\n    Object.keys(eQparams).forEach(function (key) {\n      _this.parameters.set(key, eQparams[key]);\n    });\n  };\n\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims; // Parse provided claims into JSON object or initialize empty object\n\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError$1.createInvalidClaimsRequestError();\n      }\n    }\n\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      } // Add xms_cc claim with provided clientCapabilities to access_token key\n\n\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n\n\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, username);\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, password);\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils$1.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n\n\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n\n\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n\n\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n\n  return RequestParameterBuilder;\n}();\n\nexport { RequestParameterBuilder };","map":{"version":3,"mappings":"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","names":["parameters","Map","RequestParameterBuilder","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","responseMode","RESPONSE_MODE","ResponseMode","QUERY","scopes","addOidcScopes","requestScopes","OIDC_DEFAULT_SCOPES","scopeSet","ScopeSet","SCOPE","printScopes","clientId","CLIENT_ID","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","POST_LOGOUT_URI","idTokenHint","ID_TOKEN_HINT","domainHint","SSOTypes","DOMAIN_HINT","loginHint","LOGIN_HINT","HeaderNames","CCS_HEADER","clientInfo","uid","utid","sid","SID","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","correlationId","CLIENT_REQUEST_ID","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","X_CLIENT_OS","os","X_CLIENT_CPU","cpu","prompt","validatePrompt","PROMPT","state","StringUtils","isEmpty","STATE","nonce","NONCE","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","ClientConfigurationError","createInvalidCodeChallengeParamsError","code","CODE","DEVICE_CODE","refreshToken","REFRESH_TOKEN","codeVerifier","CODE_VERIFIER","clientSecret","CLIENT_SECRET","clientAssertion","CLIENT_ASSERTION","clientAssertionType","CLIENT_ASSERTION_TYPE","oboAssertion","OBO_ASSERTION","tokenUse","REQUESTED_TOKEN_USE","grantType","GRANT_TYPE","CLIENT_INFO","eQparams","sanitizeEQParams","Object","keys","forEach","key","_this","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","username","PasswordGrantConstants","password","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","queryParameterArray","Array","value","push","join"],"sources":["../../src/request/RequestParameterBuilder.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\r\nimport { ScopeSet } from \"./ScopeSet\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\nimport { RequestValidator } from \"./RequestValidator\";\r\nimport { LibraryInfo } from \"../config/ClientConfiguration\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { ClientInfo } from \"../account/ClientInfo\";\r\n\r\nexport class RequestParameterBuilder {\r\n\r\n    private parameters: Map<string, string>;\r\n\r\n    constructor() {\r\n        this.parameters = new Map<string, string>();\r\n    }\r\n\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    addResponseTypeCode(): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    addResponseMode(responseMode?: ResponseMode): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_MODE,\r\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\r\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\r\n        const scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    }\r\n\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    addClientId(clientId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    }\r\n\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    addRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    addPostLogoutRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    addIdTokenHint(idTokenHint: string): void {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    }\r\n\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    addDomainHint(domainHint: string): void {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    }\r\n\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    addLoginHint(loginHint: string): void {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint \r\n     */\r\n    addCcsUpn(loginHint: string): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint \r\n     */\r\n    addCcsOid(clientInfo: ClientInfo): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\r\n    }\r\n\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    addSid(sid: string): void {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    }\r\n\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\r\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    }\r\n\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    addCorrelationId(correlationId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    }\r\n\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n    }\r\n\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    addPrompt(prompt: string): void {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\r\n    }\r\n\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    addState(state: string): void {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    addNonce(nonce: string): void {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    }\r\n\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    addCodeChallengeParams(\r\n        codeChallenge: string,\r\n        codeChallengeMethod: string\r\n    ): void {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        } else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addAuthorizationCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addDeviceCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    addRefreshToken(refreshToken: string): void {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    }\r\n\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    addCodeVerifier(codeVerifier: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    }\r\n\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    addClientSecret(clientSecret: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addClientAssertion(clientAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    addClientAssertionType(clientAssertionType: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n    }\r\n\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addOboAssertion(oboAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addRequestTokenUse(tokenUse: string): void {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addGrantType(grantType: string): void {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    }\r\n\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    addClientInfo(): void {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    }\r\n\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQparams\r\n     */\r\n    addExtraQueryParameters(eQparams: StringDict): void {\r\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\r\n        Object.keys(eQparams).forEach((key) => {\r\n            this.parameters.set(key, eQparams[key]);\r\n        });\r\n    }\r\n\r\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\r\n        let mergedClaims: object;\r\n\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        } else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            } catch(e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n\r\n        return JSON.stringify(mergedClaims);\r\n    }\r\n\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    addUsername(username: string): void {\r\n        this.parameters.set(PasswordGrantConstants.username, username);\r\n    }\r\n\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    addPassword(password: string): void {\r\n        this.parameters.set(PasswordGrantConstants.password, password);\r\n    }\r\n\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    addPopToken(cnfString: string): void {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager \r\n     */\r\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    }\r\n\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    addThrottling(): void {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    }\r\n\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    createQueryString(): string {\r\n        const queryParameterArray: Array<string> = new Array<string>();\r\n\r\n        this.parameters.forEach((value, key) => {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        });\r\n\r\n        return queryParameterArray.join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}