{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { Constants, UrlString } from '@azure/msal-common';\nimport { FetchClient } from '../network/FetchClient.js';\nimport { XhrClient } from '../network/XhrClient.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserConstants, InteractionType } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility class for browser specific functions\r\n */\n\nvar BrowserUtils =\n/** @class */\nfunction () {\n  function BrowserUtils() {} // #region Window Navigation and URL management\n\n  /**\r\n   * Clears hash from window url.\r\n   */\n\n\n  BrowserUtils.clearHash = function (contentWindow) {\n    // Office.js sets history.replaceState to null\n    contentWindow.location.hash = Constants.EMPTY_STRING;\n\n    if (typeof contentWindow.history.replaceState === \"function\") {\n      // Full removes \"#\" from url\n      contentWindow.history.replaceState(null, Constants.EMPTY_STRING, \"\" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);\n    }\n  };\n  /**\r\n   * Replaces current hash with hash from provided url\r\n   */\n\n\n  BrowserUtils.replaceHash = function (url) {\n    var urlParts = url.split(\"#\");\n    urlParts.shift(); // Remove part before the hash\n\n    window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\n  };\n  /**\r\n   * Returns boolean of whether the current window is in an iframe or not.\r\n   */\n\n\n  BrowserUtils.isInIframe = function () {\n    return window.parent !== window;\n  };\n  /**\r\n   * Returns boolean of whether or not the current window is a popup opened by msal\r\n   */\n\n\n  BrowserUtils.isInPopup = function () {\n    return typeof window !== \"undefined\" && !!window.opener && window.opener !== window && typeof window.name === \"string\" && window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + \".\") === 0;\n  }; // #endregion\n\n  /**\r\n   * Returns current window URL as redirect uri\r\n   */\n\n\n  BrowserUtils.getCurrentUri = function () {\n    return window.location.href.split(\"?\")[0].split(\"#\")[0];\n  };\n  /**\r\n   * Gets the homepage url for the current window location.\r\n   */\n\n\n  BrowserUtils.getHomepage = function () {\n    var currentUrl = new UrlString(window.location.href);\n    var urlComponents = currentUrl.getUrlComponents();\n    return urlComponents.Protocol + \"//\" + urlComponents.HostNameAndPort + \"/\";\n  };\n  /**\r\n   * Returns best compatible network client object.\r\n   */\n\n\n  BrowserUtils.getBrowserNetworkClient = function () {\n    if (window.fetch && window.Headers) {\n      return new FetchClient();\n    } else {\n      return new XhrClient();\n    }\n  };\n  /**\r\n   * Throws error if we have completed an auth and are\r\n   * attempting another auth request inside an iframe.\r\n   */\n\n\n  BrowserUtils.blockReloadInHiddenIframes = function () {\n    var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash); // return an error if called from the hidden iframe created by the msal js silent calls\n\n    if (isResponseHash && BrowserUtils.isInIframe()) {\n      throw BrowserAuthError.createBlockReloadInHiddenIframeError();\n    }\n  };\n  /**\r\n   * Block redirect operations in iframes unless explicitly allowed\r\n   * @param interactionType Interaction type for the request\r\n   * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n   */\n\n\n  BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {\n    var isIframedApp = BrowserUtils.isInIframe();\n\n    if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\n      // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\n      throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\n    }\n  };\n  /**\r\n   * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n   */\n\n\n  BrowserUtils.blockAcquireTokenInPopups = function () {\n    // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\n    if (BrowserUtils.isInPopup()) {\n      throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\n    }\n  };\n  /**\r\n   * Throws error if token requests are made in non-browser environment\r\n   * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n   */\n\n\n  BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {\n    if (!isBrowserEnvironment) {\n      throw BrowserAuthError.createNonBrowserEnvironmentError();\n    }\n  };\n  /**\r\n   * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n   */\n\n\n  BrowserUtils.detectIEOrEdge = function () {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var msie11 = ua.indexOf(\"Trident/\");\n    var msedge = ua.indexOf(\"Edge/\");\n    var isIE = msie > 0 || msie11 > 0;\n    var isEdge = msedge > 0;\n    return isIE || isEdge;\n  };\n\n  return BrowserUtils;\n}();\n\nexport { BrowserUtils };","map":{"version":3,"mappings":"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","names":["BrowserUtils","contentWindow","location","hash","Constants","EMPTY_STRING","history","replaceState","origin","pathname","search","url","urlParts","split","shift","window","length","join","parent","opener","name","indexOf","BrowserConstants","POPUP_NAME_PREFIX","href","currentUrl","UrlString","urlComponents","getUrlComponents","Protocol","HostNameAndPort","fetch","Headers","FetchClient","XhrClient","isResponseHash","hashContainsKnownProperties","isInIframe","BrowserAuthError","createBlockReloadInHiddenIframeError","interactionType","allowRedirectInIframe","isIframedApp","InteractionType","Redirect","createRedirectInIframeError","isInPopup","createBlockAcquireTokenInPopupsError","isBrowserEnvironment","createNonBrowserEnvironmentError","ua","navigator","userAgent","msie","msie11","msedge","isIE","isEdge"],"sources":["../../src/utils/BrowserUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, INetworkModule, UrlString } from \"@azure/msal-common\";\r\nimport { FetchClient } from \"../network/FetchClient\";\r\nimport { XhrClient } from \"../network/XhrClient\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { InteractionType, BrowserConstants } from \"./BrowserConstants\";\r\n\r\n/**\r\n * Utility class for browser specific functions\r\n */\r\nexport class BrowserUtils {\r\n\r\n    // #region Window Navigation and URL management\r\n\r\n    /**\r\n     * Clears hash from window url.\r\n     */\r\n    static clearHash(contentWindow: Window): void {\r\n        // Office.js sets history.replaceState to null\r\n        contentWindow.location.hash = Constants.EMPTY_STRING;\r\n        if (typeof contentWindow.history.replaceState === \"function\") {\r\n            // Full removes \"#\" from url\r\n            contentWindow.history.replaceState(null, Constants.EMPTY_STRING, `${contentWindow.location.origin}${contentWindow.location.pathname}${contentWindow.location.search}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces current hash with hash from provided url\r\n     */\r\n    static replaceHash(url: string): void {\r\n        const urlParts = url.split(\"#\");\r\n        urlParts.shift(); // Remove part before the hash\r\n        window.location.hash = urlParts.length > 0 ? urlParts.join(\"#\") : \"\";\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether the current window is in an iframe or not.\r\n     */\r\n    static isInIframe(): boolean {\r\n        return window.parent !== window;\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether or not the current window is a popup opened by msal\r\n     */\r\n    static isInPopup(): boolean {\r\n        return typeof window !== \"undefined\" && !!window.opener && \r\n            window.opener !== window && \r\n            typeof window.name === \"string\" && \r\n            window.name.indexOf(`${BrowserConstants.POPUP_NAME_PREFIX}.`) === 0;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    /**\r\n     * Returns current window URL as redirect uri\r\n     */\r\n    static getCurrentUri(): string {\r\n        return window.location.href.split(\"?\")[0].split(\"#\")[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the homepage url for the current window location.\r\n     */\r\n    static getHomepage(): string {\r\n        const currentUrl = new UrlString(window.location.href);\r\n        const urlComponents = currentUrl.getUrlComponents();\r\n        return `${urlComponents.Protocol}//${urlComponents.HostNameAndPort}/`;\r\n    }\r\n\r\n    /**\r\n     * Returns best compatible network client object. \r\n     */\r\n    static getBrowserNetworkClient(): INetworkModule {\r\n        if (window.fetch && window.Headers) {\r\n            return new FetchClient();\r\n        } else {\r\n            return new XhrClient();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if we have completed an auth and are \r\n     * attempting another auth request inside an iframe.\r\n     */\r\n    static blockReloadInHiddenIframes(): void {\r\n        const isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);\r\n        // return an error if called from the hidden iframe created by the msal js silent calls\r\n        if (isResponseHash && BrowserUtils.isInIframe()) {\r\n            throw BrowserAuthError.createBlockReloadInHiddenIframeError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Block redirect operations in iframes unless explicitly allowed\r\n     * @param interactionType Interaction type for the request\r\n     * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe\r\n     */\r\n    static blockRedirectInIframe(interactionType: InteractionType, allowRedirectInIframe: boolean): void {\r\n        const isIframedApp = BrowserUtils.isInIframe();\r\n        if (interactionType === InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {\r\n            // If we are not in top frame, we shouldn't redirect. This is also handled by the service.\r\n            throw BrowserAuthError.createRedirectInIframeError(isIframedApp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Block redirectUri loaded in popup from calling AcquireToken APIs\r\n     */\r\n    static blockAcquireTokenInPopups(): void {\r\n        // Popups opened by msal popup APIs are given a name that starts with \"msal.\"\r\n        if (BrowserUtils.isInPopup()) {\r\n            throw BrowserAuthError.createBlockAcquireTokenInPopupsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Throws error if token requests are made in non-browser environment\r\n     * @param isBrowserEnvironment Flag indicating if environment is a browser.\r\n     */\r\n    static blockNonBrowserEnvironment(isBrowserEnvironment: boolean): void {\r\n        if (!isBrowserEnvironment) {\r\n            throw BrowserAuthError.createNonBrowserEnvironmentError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns boolean of whether current browser is an Internet Explorer or Edge browser.\r\n     */\r\n    static detectIEOrEdge(): boolean {\r\n        const ua = window.navigator.userAgent;\r\n        const msie = ua.indexOf(\"MSIE \");\r\n        const msie11 = ua.indexOf(\"Trident/\");\r\n        const msedge = ua.indexOf(\"Edge/\");\r\n        const isIE = msie > 0 || msie11 > 0;\r\n        const isEdge = msedge > 0;\r\n        return isIE || isEdge;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}