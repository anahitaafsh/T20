{"ast":null,"code":"import React__default, { createContext, useEffect, useMemo, useState, useContext, useCallback } from 'react';\nimport { stubbedPublicClientApplication, InteractionStatus, Logger, WrapperSKU, EventType, EventMessageUtils, AccountEntity, InteractionType } from '@azure/msal-browser';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/*\r\n * Stubbed context implementation\r\n * Only used when there is no provider, which is an unsupported scenario\r\n */\n\nconst defaultMsalContext = {\n  instance: stubbedPublicClientApplication,\n  inProgress: InteractionStatus.None,\n  accounts: [],\n  logger: /*#__PURE__*/new Logger({})\n};\nconst MsalContext = /*#__PURE__*/createContext(defaultMsalContext);\nconst MsalConsumer = MsalContext.Consumer;\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction getChildrenOrFunction(children, args) {\n  if (typeof children === \"function\") {\n    return children(args);\n  }\n\n  return children;\n}\n/**\r\n * Helper function to determine whether 2 arrays are equal\r\n * Used to avoid unnecessary state updates\r\n * @param arrayA\r\n * @param arrayB\r\n */\n\n\nfunction accountArraysAreEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  const comparisonArray = [...arrayB];\n  return arrayA.every(elementA => {\n    const elementB = comparisonArray.shift();\n\n    if (!elementA || !elementB) {\n      return false;\n    }\n\n    return elementA.homeAccountId === elementB.homeAccountId && elementA.localAccountId === elementB.localAccountId && elementA.username === elementB.username;\n  });\n}\n/* eslint-disable header/header */\n\n\nconst name = \"@azure/msal-react\";\nconst version = \"1.0.1\";\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nfunction MsalProvider(_ref) {\n  let {\n    instance,\n    children\n  } = _ref;\n  useEffect(() => {\n    instance.initializeWrapperLibrary(WrapperSKU.React, version);\n  }, [instance]); // Create a logger instance for msal-react with the same options as PublicClientApplication\n\n  const logger = useMemo(() => {\n    return instance.getLogger().clone(name, version);\n  }, [instance]); // State hook to store accounts\n\n  const [accounts, setAccounts] = useState([]); // State hook to store in progress value\n\n  const [inProgress, setInProgress] = useState(InteractionStatus.Startup);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n        case EventType.HANDLE_REDIRECT_END:\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n        case EventType.LOGOUT_END:\n        case EventType.ACQUIRE_TOKEN_SUCCESS:\n        case EventType.ACQUIRE_TOKEN_FAILURE:\n          const currentAccounts = instance.getAllAccounts();\n\n          if (!accountArraysAreEqual(currentAccounts, accounts)) {\n            logger.info(\"MsalProvider - updating account state\");\n            setAccounts(currentAccounts);\n          } else {\n            logger.info(\"MsalProvider - no account changes\");\n          }\n\n          break;\n      }\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    return () => {\n      // Remove callback when component unmounts or accounts change\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, accounts, logger]);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n\n      if (status !== null) {\n        logger.info(`MsalProvider - ${message.eventType} results in setting inProgress to ${status}`);\n        setInProgress(status);\n      }\n    });\n    logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n    instance.handleRedirectPromise().catch(() => {\n      // Errors should be handled by listening to the LOGIN_FAILURE event\n      return;\n    });\n    return () => {\n      if (callbackId) {\n        logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  const contextValue = {\n    instance,\n    inProgress,\n    accounts,\n    logger\n  };\n  return React__default.createElement(MsalContext.Provider, {\n    value: contextValue\n  }, children);\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Returns Msal Context values\r\n */\n\n\nconst useMsal = () => useContext(MsalContext);\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction getAccount(instance, accountIdentifiers) {\n  const allAccounts = instance.getAllAccounts();\n\n  if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n    const matchedAccounts = allAccounts.filter(accountObj => {\n      if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n        return false;\n      }\n\n      if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n        return false;\n      }\n\n      return true;\n    });\n    return matchedAccounts[0] || null;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useAccount(accountIdentifiers) {\n  const {\n    instance,\n    inProgress\n  } = useMsal();\n  const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n  const [account, setAccount] = useState(initialStateValue);\n  useEffect(() => {\n    const currentAccount = getAccount(instance, accountIdentifiers);\n\n    if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n      setAccount(currentAccount);\n    }\n  }, [inProgress, accountIdentifiers, instance, account]);\n  return account;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n\nfunction isAuthenticated(allAccounts, account, matchAccount) {\n  if (matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n    return !!account;\n  }\n\n  return allAccounts.length > 0;\n}\n/**\r\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\r\n * @param matchAccount\r\n */\n\n\nfunction useIsAuthenticated(matchAccount) {\n  const {\n    accounts: allAccounts,\n    inProgress\n  } = useMsal();\n  const account = useAccount(matchAccount || {});\n  const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n  const [hasAuthenticated, setHasAuthenticated] = useState(initialStateValue);\n  useEffect(() => {\n    setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n  }, [allAccounts, account, matchAccount]);\n  return hasAuthenticated;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is authenticated\r\n * @param props\r\n */\n\n\nfunction AuthenticatedTemplate(_ref2) {\n  let {\n    username,\n    homeAccountId,\n    localAccountId,\n    children\n  } = _ref2;\n  const context = useMsal();\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Renders child components if user is unauthenticated\r\n * @param props\r\n */\n\n\nfunction UnauthenticatedTemplate(_ref3) {\n  let {\n    username,\n    homeAccountId,\n    localAccountId,\n    children\n  } = _ref3;\n  const context = useMsal();\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\r\n * Optionally provide a request object to be used in the login call.\r\n * Optionally provide a specific user that should be logged in.\r\n * @param interactionType\r\n * @param authenticationRequest\r\n * @param accountIdentifiers\r\n */\n\n\nfunction useMsalAuthentication(interactionType, authenticationRequest, accountIdentifiers) {\n  const {\n    instance,\n    inProgress,\n    logger\n  } = useMsal();\n  const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n  const [[result, error], setResponse] = useState([null, null]);\n  const [hasBeenCalled, setHasBeenCalled] = useState(false);\n  const login = useCallback(async (callbackInteractionType, callbackRequest) => {\n    const loginType = callbackInteractionType || interactionType;\n    const loginRequest = callbackRequest || authenticationRequest;\n\n    switch (loginType) {\n      case InteractionType.Popup:\n        logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n        return instance.loginPopup(loginRequest);\n\n      case InteractionType.Redirect:\n        // This promise is not expected to resolve due to full frame redirect\n        logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n        return instance.loginRedirect(loginRequest).then(null);\n\n      case InteractionType.Silent:\n        logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n        return instance.ssoSilent(loginRequest);\n\n      default:\n        throw \"Invalid interaction type provided.\";\n    }\n  }, [instance, interactionType, authenticationRequest, logger]);\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(message => {\n      switch (message.eventType) {\n        case EventType.LOGIN_SUCCESS:\n        case EventType.SSO_SILENT_SUCCESS:\n          if (message.payload) {\n            setResponse([message.payload, null]);\n          }\n\n          break;\n\n        case EventType.LOGIN_FAILURE:\n        case EventType.SSO_SILENT_FAILURE:\n          if (message.error) {\n            setResponse([null, message.error]);\n          }\n\n          break;\n      }\n    });\n    logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n    return () => {\n      if (callbackId) {\n        logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [instance, logger]);\n  useEffect(() => {\n    if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n      logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\"); // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n\n      setHasBeenCalled(true);\n      login().catch(() => {\n        // Errors are handled by the event handler above\n        return;\n      });\n    }\n  }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n  return {\n    login,\n    result,\n    error\n  };\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Attempts to authenticate user if not already authenticated, then renders child components\r\n * @param props\r\n */\n\n\nfunction MsalAuthenticationTemplate(_ref4) {\n  let {\n    interactionType,\n    username,\n    homeAccountId,\n    localAccountId,\n    authenticationRequest,\n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    children\n  } = _ref4;\n  const accountIdentifier = useMemo(() => {\n    return {\n      username,\n      homeAccountId,\n      localAccountId\n    };\n  }, [username, homeAccountId, localAccountId]);\n  const context = useMsal();\n  const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n  const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n  if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n    if (!!ErrorComponent) {\n      return React__default.createElement(ErrorComponent, Object.assign({}, msalAuthResult));\n    }\n\n    throw msalAuthResult.error;\n  }\n\n  if (isAuthenticated) {\n    return React__default.createElement(React__default.Fragment, null, getChildrenOrFunction(children, msalAuthResult));\n  }\n\n  if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n    return React__default.createElement(LoadingComponent, Object.assign({}, context));\n  }\n\n  return null;\n}\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props\r\n * @param Component\r\n */\n\n\nconst withMsal = Component => {\n  const ComponentWithMsal = props => {\n    const msal = useMsal();\n    return React__default.createElement(Component, Object.assign({}, props, {\n      msalContext: msal\n    }));\n  };\n\n  const componentName = Component.displayName || Component.name || \"Component\";\n  ComponentWithMsal.displayName = `withMsal(${componentName})`;\n  return ComponentWithMsal;\n};\n\nexport { AuthenticatedTemplate, MsalAuthenticationTemplate, MsalConsumer, MsalContext, MsalProvider, UnauthenticatedTemplate, useAccount, useIsAuthenticated, useMsal, useMsalAuthentication, withMsal };","map":{"version":3,"mappings":"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","names":["defaultMsalContext","instance","stubbedPublicClientApplication","inProgress","InteractionStatus","None","accounts","logger","Logger","MsalContext","React","MsalConsumer","Consumer","getChildrenOrFunction","children","args","accountArraysAreEqual","arrayA","arrayB","length","comparisonArray","every","elementA","elementB","shift","homeAccountId","localAccountId","username","name","version","MsalProvider","useEffect","initializeWrapperLibrary","WrapperSKU","useMemo","getLogger","clone","SKU","setAccounts","useState","setInProgress","Startup","callbackId","addEventCallback","message","eventType","EventType","LOGIN_SUCCESS","SSO_SILENT_SUCCESS","HANDLE_REDIRECT_END","LOGIN_FAILURE","SSO_SILENT_FAILURE","LOGOUT_END","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE","currentAccounts","getAllAccounts","info","verbose","removeEventCallback","status","EventMessageUtils","getInteractionStatusFromEvent","handleRedirectPromise","catch","contextValue","Provider","value","useMsal","useContext","getAccount","accountIdentifiers","allAccounts","matchedAccounts","filter","accountObj","toLowerCase","useAccount","initialStateValue","account","setAccount","currentAccount","AccountEntity","accountInfoIsEqual","isAuthenticated","matchAccount","useIsAuthenticated","hasAuthenticated","setHasAuthenticated","AuthenticatedTemplate","context","accountIdentifier","Fragment","UnauthenticatedTemplate","HandleRedirect","useMsalAuthentication","interactionType","authenticationRequest","result","error","setResponse","hasBeenCalled","setHasBeenCalled","login","useCallback","callbackInteractionType","callbackRequest","loginType","loginRequest","InteractionType","Popup","loginPopup","Redirect","loginRedirect","then","Silent","ssoSilent","payload","MsalAuthenticationTemplate","loadingComponent","LoadingComponent","errorComponent","ErrorComponent","msalAuthResult","withMsal","Component","ComponentWithMsal","props","msal","msalContext","componentName","displayName"],"sources":["../src/MsalContext.ts","../src/utils/utilities.ts","../src/packageMetadata.ts","../src/MsalProvider.tsx","../src/hooks/useMsal.ts","../src/hooks/useAccount.ts","../src/hooks/useIsAuthenticated.ts","../src/components/AuthenticatedTemplate.tsx","../src/components/UnauthenticatedTemplate.tsx","../src/hooks/useMsalAuthentication.ts","../src/components/MsalAuthenticationTemplate.tsx","../src/components/withMsal.tsx"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport { IPublicClientApplication, stubbedPublicClientApplication, Logger, InteractionStatus, AccountInfo } from \"@azure/msal-browser\";\n\nexport interface IMsalContext {\n    instance: IPublicClientApplication;\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n    logger: Logger;\n}\n\n/*\n * Stubbed context implementation\n * Only used when there is no provider, which is an unsupported scenario\n */\nconst defaultMsalContext: IMsalContext = {\n    instance: stubbedPublicClientApplication,\n    inProgress: InteractionStatus.None,\n    accounts: [],\n    logger: new Logger({})\n};\n\nexport const MsalContext = React.createContext<IMsalContext>(\n    defaultMsalContext\n);\nexport const MsalConsumer = MsalContext.Consumer;\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\ntype FaaCFunction = <T>(args: T) => React.ReactNode;\n\nexport function getChildrenOrFunction<T>(\n    children: React.ReactNode | FaaCFunction,\n    args: T\n): React.ReactNode {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n\n/*\n * Utility types\n * Reference: https://github.com/piotrwitek/utility-types\n */\ntype SetDifference<A, B> = A extends B ? never : A;\ntype SetComplement<A, A1 extends A> = SetDifference<A, A1>;\nexport type Subtract<T extends T1, T1 extends object> = Pick<T,SetComplement<keyof T, keyof T1>>;\n\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA \n * @param arrayB \n */\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n\n    const comparisonArray = [...arrayB];\n\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n\n        return (elementA.homeAccountId === elementB.homeAccountId) && \n               (elementA.localAccountId === elementB.localAccountId) &&\n               (elementA.username === elementB.username);\n    });\n}\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"1.0.1\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useState, useEffect, PropsWithChildren, useMemo } from \"react\";\nimport {\n    IPublicClientApplication,\n    EventType,\n    EventMessage,\n    EventMessageUtils,\n    InteractionStatus,\n    Logger,\n    WrapperSKU,\n    AccountInfo\n} from \"@azure/msal-browser\";\nimport { MsalContext, IMsalContext } from \"./MsalContext\";\nimport { accountArraysAreEqual } from \"./utils/utilities\";\nimport { name as SKU, version } from \"./packageMetadata\";\n\nexport type MsalProviderProps = PropsWithChildren<{\n    instance: IPublicClientApplication;\n}>;\n\nexport function MsalProvider({instance, children}: MsalProviderProps): React.ReactElement {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger: Logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n\n    // State hook to store accounts\n    const [accounts, setAccounts] = useState<AccountInfo[]>([]);\n    // State hook to store in progress value\n    const [inProgress, setInProgress] = useState<InteractionStatus>(InteractionStatus.Startup);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch (message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                case EventType.HANDLE_REDIRECT_END:\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                case EventType.LOGOUT_END:\n                case EventType.ACQUIRE_TOKEN_SUCCESS:\n                case EventType.ACQUIRE_TOKEN_FAILURE:\n                    const currentAccounts = instance.getAllAccounts();\n                    if (!accountArraysAreEqual(currentAccounts, accounts)) {\n                        logger.info(\"MsalProvider - updating account state\");\n                        setAccounts(currentAccounts);\n                    } else {\n                        logger.info(\"MsalProvider - no account changes\");\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, accounts, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n            if (status !== null) {\n                logger.info(`MsalProvider - ${message.eventType} results in setting inProgress to ${status}`);\n                setInProgress(status);\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        instance.handleRedirectPromise().catch(() => {\n            // Errors should be handled by listening to the LOGIN_FAILURE event\n            return;\n        });\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    const contextValue: IMsalContext = {\n        instance,\n        inProgress,\n        accounts,\n        logger\n    };\n\n    return (\n        <MsalContext.Provider value={contextValue}>\n            {children}\n        </MsalContext.Provider>\n    );\n}\n\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useContext } from \"react\";\nimport { IMsalContext, MsalContext } from \"../MsalContext\";\n\n/**\n * Returns Msal Context values\n */\nexport const useMsal = (): IMsalContext => useContext(MsalContext);\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { AccountInfo, IPublicClientApplication, InteractionStatus, AccountEntity } from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\nfunction getAccount(instance: IPublicClientApplication, accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const allAccounts = instance.getAllAccounts();\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter(accountObj => {\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n\n            return true;\n        });\n\n        return matchedAccounts[0] || null;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers \n */\nexport function useAccount(accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const { instance, inProgress } = useMsal();\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n    const [account, setAccount] = useState<AccountInfo|null>(initialStateValue);\n\n    useEffect(() => {\n        const currentAccount = getAccount(instance, accountIdentifiers);\n        if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n            setAccount(currentAccount);\n        }\n    }, [inProgress, accountIdentifiers, instance, account]);\n\n    return account;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useAccount } from \"./useAccount\";\nimport { AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\n\nfunction isAuthenticated(allAccounts: AccountIdentifiers[], account: AccountInfo | null, matchAccount?: AccountIdentifiers): boolean {\n    if(matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n        return !!account;\n    }   \n\n    return allAccounts.length > 0;\n}\n\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount \n */\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\n    const { accounts: allAccounts, inProgress } = useMsal();\n    const account = useAccount(matchAccount || {});\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n    const [hasAuthenticated, setHasAuthenticated] = useState<boolean>(initialStateValue);\n\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n    }, [allAccounts, account, matchAccount]);\n\n    return hasAuthenticated;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is authenticated\n * @param props \n */\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }: AuthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type UnauthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is unauthenticated\n * @param props \n */\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }: UnauthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { PopupRequest, RedirectRequest, SsoSilentRequest, InteractionType, AuthenticationResult, AuthError, EventMessage, EventType, InteractionStatus } from \"@azure/msal-browser\";\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useMsal } from \"./useMsal\";\n\nexport type MsalAuthenticationResult = {\n    login: Function; \n    result: AuthenticationResult|null;\n    error: AuthError|null;\n};\n\n/**\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\n * Optionally provide a request object to be used in the login call.\n * Optionally provide a specific user that should be logged in.\n * @param interactionType \n * @param authenticationRequest \n * @param accountIdentifiers \n */\nexport function useMsalAuthentication(\n    interactionType: InteractionType, \n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest, \n    accountIdentifiers?: AccountIdentifiers\n): MsalAuthenticationResult {\n    const { instance, inProgress, logger } = useMsal();\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n    const [[result, error], setResponse] = useState<[AuthenticationResult|null, AuthError|null]>([null, null]);\n    const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\n\n    const login = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: PopupRequest|RedirectRequest|SsoSilentRequest): Promise<AuthenticationResult|null> => {\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch (loginType) {\n            case InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest as PopupRequest);\n            case InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance.loginRedirect(loginRequest as RedirectRequest).then(null);\n            case InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest as SsoSilentRequest);\n            default:\n                throw \"Invalid interaction type provided.\";\n        }\n    }, [instance, interactionType, authenticationRequest, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch(message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([message.payload as AuthenticationResult, null]);\n                    }\n                    break;\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([null, message.error as AuthError]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    useEffect(() => {\n        if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n            logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n            // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n            setHasBeenCalled(true);\n            login().catch(() => {\n                // Errors are handled by the event handler above\n                return;\n            });\n        }\n    }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n\n    return { login, result, error };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { MsalAuthenticationResult, useMsalAuthentication } from \"../hooks/useMsalAuthentication\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionType, PopupRequest, RedirectRequest, SsoSilentRequest, InteractionStatus } from \"@azure/msal-browser\";\nimport { IMsalContext } from \"../MsalContext\";\n\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\n    interactionType: InteractionType;\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest;\n    loadingComponent?: React.ElementType<IMsalContext>;\n    errorComponent?: React.ElementType<MsalAuthenticationResult>;\n}>;\n\n/**\n * Attempts to authenticate user if not already authenticated, then renders child components\n * @param props\n */\nexport function MsalAuthenticationTemplate({ \n    interactionType, \n    username, \n    homeAccountId, \n    localAccountId,\n    authenticationRequest, \n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    children \n}: MsalAuthenticationProps): React.ReactElement|null {\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const context = useMsal();\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return <ErrorComponent {...msalAuthResult} />;\n        }\n\n        throw msalAuthResult.error;\n    }\n    \n    if (isAuthenticated) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, msalAuthResult)}\n            </React.Fragment>\n        );\n    } \n    \n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n        return <LoadingComponent {...context} />;\n    }\n\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport { IMsalContext } from \"../MsalContext\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { Subtract } from \"../utils/utilities\";\n\nexport type WithMsalProps = {\n    msalContext: IMsalContext;\n};\n\n/**\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props \n * @param Component \n */\nexport const withMsal = <P extends WithMsalProps>(Component: React.ComponentType<P>): React.FunctionComponent<Subtract<P,WithMsalProps>> => {\n    const ComponentWithMsal: React.FunctionComponent<Subtract<P,WithMsalProps>> = props => {\n        const msal = useMsal();\n        return <Component {...(props as P)} msalContext={msal} />;\n    };\n\n    const componentName =\n        Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n\n    return ComponentWithMsal;\n};\n"]},"metadata":{},"sourceType":"module"}