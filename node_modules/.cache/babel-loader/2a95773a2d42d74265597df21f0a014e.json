{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\n\nvar Base64Decode =\n/** @class */\nfunction () {\n  function Base64Decode() {}\n  /**\r\n   * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n   * @param input\r\n   */\n\n\n  Base64Decode.prototype.decode = function (input) {\n    var encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\n\n    switch (encodedString.length % 4) {\n      case 0:\n        break;\n\n      case 2:\n        encodedString += \"==\";\n        break;\n\n      case 3:\n        encodedString += \"=\";\n        break;\n\n      default:\n        throw new Error(\"Invalid base64 string\");\n    }\n\n    var inputUtf8Arr = this.base64DecToArr(encodedString);\n    return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);\n  };\n  /**\r\n   * Decodes base64 into Uint8Array\r\n   * @param base64String\r\n   * @param nBlockSize\r\n   */\n\n\n  Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {\n    var sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\n    var nInLen = sB64Enc.length;\n    var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\n    var aBytes = new Uint8Array(nOutLen);\n\n    for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\n      nMod4 = nInIdx & 3;\n      nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\n\n      if (nMod4 === 3 || nInLen - nInIdx === 1) {\n        for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\n          aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\n        }\n\n        nUint24 = 0;\n      }\n    }\n\n    return aBytes;\n  };\n  /**\r\n   * Base64 string to array decoding helper\r\n   * @param charNum\r\n   */\n\n\n  Base64Decode.prototype.b64ToUint6 = function (charNum) {\n    return charNum > 64 && charNum < 91 ? charNum - 65 : charNum > 96 && charNum < 123 ? charNum - 71 : charNum > 47 && charNum < 58 ? charNum + 4 : charNum === 43 ? 62 : charNum === 47 ? 63 : 0;\n  };\n\n  return Base64Decode;\n}();\n\nexport { Base64Decode };","map":{"version":3,"mappings":";;;;AAAA;;;;;AAOA;;;;;;;;EAIA,yBAoEC;;;;;;;EA9DGA,0CAAOC,KAAP,EAAoB;IAChB,IAAIC,aAAa,GAAGD,KAAK,CAACE,OAAN,CAAc,IAAd,EAAoB,GAApB,EAAyBA,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAApB;;IACA,QAAQD,aAAa,CAACE,MAAd,GAAuB,CAA/B;MACI,KAAK,CAAL;QACI;;MACJ,KAAK,CAAL;QACIF,aAAa,IAAI,IAAjB;QACA;;MACJ,KAAK,CAAL;QACIA,aAAa,IAAI,GAAjB;QACA;;MACJ;QACI,MAAM,IAAIG,KAAJ,CAAU,uBAAV,CAAN;IAVR;;IAaA,IAAMC,YAAY,GAAG,KAAKC,cAAL,CAAoBL,aAApB,CAArB;IACA,OAAOM,kBAAkB,CAACC,eAAnB,CAAmCH,YAAnC,CAAP;EACH,CAjBD;;;;;;;;EAwBQN,wCAAR,UAAuBU,YAAvB,EAA6CC,UAA7C,EAAgE;IAC5D,IAAMC,OAAO,GAAGF,YAAY,CAACP,OAAb,CAAqB,mBAArB,EAA0C,EAA1C,CAAhB;IACA,IAAMU,MAAM,GAAGD,OAAO,CAACR,MAAvB;IACA,IAAMU,OAAO,GAAGH,UAAU,GAAGI,IAAI,CAACC,IAAL,CAAU,CAACH,MAAM,GAAG,CAAT,GAAa,CAAb,KAAmB,CAApB,IAAyBF,UAAnC,IAAiDA,UAApD,GAAiEE,MAAM,GAAG,CAAT,GAAa,CAAb,KAAmB,CAA9G;IACA,IAAMI,MAAM,GAAG,IAAIC,UAAJ,CAAeJ,OAAf,CAAf;;IAEA,KAAK,IAAIK,KAAK,SAAT,EAAWC,KAAK,SAAhB,EAAkBC,OAAO,GAAG,CAA5B,EAA+BC,OAAO,GAAG,CAAzC,EAA4CC,MAAM,GAAG,CAA1D,EAA6DA,MAAM,GAAGV,MAAtE,EAA8EU,MAAM,EAApF,EAAwF;MACpFH,KAAK,GAAGG,MAAM,GAAG,CAAjB;MACAF,OAAO,IAAI,KAAKG,UAAL,CAAgBZ,OAAO,CAACa,UAAR,CAAmBF,MAAnB,CAAhB,KAA+C,KAAK,IAAIH,KAAnE;;MACA,IAAIA,KAAK,KAAK,CAAV,IAAeP,MAAM,GAAGU,MAAT,KAAoB,CAAvC,EAA0C;QACtC,KAAKJ,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAG,CAAR,IAAaG,OAAO,GAAGR,OAAvC,EAAgDK,KAAK,IAAIG,OAAO,EAAhE,EAAoE;UAChEL,MAAM,CAACK,OAAD,CAAN,GAAkBD,OAAO,MAAM,OAAOF,KAAP,GAAe,EAArB,CAAP,GAAkC,GAApD;QACH;;QACDE,OAAO,GAAG,CAAV;MACH;IACJ;;IAED,OAAOJ,MAAP;EACH,CAlBO;;;;;;;EAwBAjB,oCAAR,UAAmB0B,OAAnB,EAAkC;IAC9B,OAAOA,OAAO,GAAG,EAAV,IAAgBA,OAAO,GAAG,EAA1B,GACHA,OAAO,GAAG,EADP,GAEDA,OAAO,GAAG,EAAV,IAAgBA,OAAO,GAAG,GAA1B,GACEA,OAAO,GAAG,EADZ,GAEIA,OAAO,GAAG,EAAV,IAAgBA,OAAO,GAAG,EAA1B,GACEA,OAAO,GAAG,CADZ,GAEIA,OAAO,KAAK,EAAZ,GACE,EADF,GAEIA,OAAO,KAAK,EAAZ,GACE,EADF,GAGE,CAXpB;EAYH,CAbO;;EAcZ;AAAC","names":["Base64Decode","input","encodedString","replace","length","Error","inputUtf8Arr","base64DecToArr","BrowserStringUtils","utf8ArrToString","base64String","nBlockSize","sB64Enc","nInLen","nOutLen","Math","ceil","aBytes","Uint8Array","nMod3","nMod4","nUint24","nOutIdx","nInIdx","b64ToUint6","charCodeAt","charNum"],"sources":["../../src/encode/Base64Decode.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\n\r\n/**\r\n * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class Base64Decode {\r\n\r\n    /**\r\n     * Returns a URL-safe plaintext decoded string from b64 encoded input.\r\n     * @param input \r\n     */\r\n    decode(input: string): string {\r\n        let encodedString = input.replace(/-/g, \"+\").replace(/_/g, \"/\");\r\n        switch (encodedString.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                encodedString += \"==\";\r\n                break;\r\n            case 3:\r\n                encodedString += \"=\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Invalid base64 string\");\r\n        }\r\n\r\n        const inputUtf8Arr = this.base64DecToArr(encodedString);\r\n        return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);\r\n    }\r\n\r\n    /**\r\n     * Decodes base64 into Uint8Array\r\n     * @param base64String \r\n     * @param nBlockSize \r\n     */\r\n    private base64DecToArr(base64String: string, nBlockSize?: number): Uint8Array {\r\n        const sB64Enc = base64String.replace(/[^A-Za-z0-9\\+\\/]/g, \"\");\r\n        const nInLen = sB64Enc.length;\r\n        const nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;\r\n        const aBytes = new Uint8Array(nOutLen);\r\n\r\n        for (let nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {\r\n            nMod4 = nInIdx & 3;\r\n            nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;\r\n            if (nMod4 === 3 || nInLen - nInIdx === 1) {\r\n                for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {\r\n                    aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;\r\n                }\r\n                nUint24 = 0;\r\n            }\r\n        }\r\n\r\n        return aBytes;\r\n    }\r\n\r\n    /**\r\n     * Base64 string to array decoding helper\r\n     * @param charNum \r\n     */\r\n    private b64ToUint6(charNum: number): number {\r\n        return charNum > 64 && charNum < 91 ?\r\n            charNum - 65\r\n            : charNum > 96 && charNum < 123 ? \r\n                charNum - 71\r\n                : charNum > 47 && charNum < 58 ?\r\n                    charNum + 4\r\n                    : charNum === 43 ?\r\n                        62\r\n                        : charNum === 47 ?\r\n                            63\r\n                            :\r\n                            0;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}