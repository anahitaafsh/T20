{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { UrlString as UrlString$1 } from '../url/UrlString.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar KeyLocation;\n\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\n\nvar PopTokenGenerator =\n/** @class */\nfunction () {\n  function PopTokenGenerator(cryptoUtils) {\n    this.cryptoUtils = cryptoUtils;\n  }\n\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint, reqCnf;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cryptoUtils.getPublicKeyThumbprint(request)];\n\n          case 1:\n            kidThumbprint = _a.sent();\n            reqCnf = {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            };\n            return [2\n            /*return*/\n            , this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];\n        }\n      });\n    });\n  };\n\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenClaims, resourceRequestMethod, resourceRequestUri, shrClaims, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            tokenClaims = AuthToken$1.extractTokenClaims(accessToken, this.cryptoUtils);\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims;\n            resourceUrlString = resourceRequestUri ? new UrlString$1(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n\n            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\n              throw ClientAuthError$1.createTokenClaimsRequiredError();\n            }\n\n            return [4\n            /*yield*/\n            , this.cryptoUtils.signJwt({\n              at: accessToken,\n              ts: TimeUtils$1.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, tokenClaims.cnf.kid)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n\n  return PopTokenGenerator;\n}();\n\nexport { PopTokenGenerator };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;AAyBA,IAAKA,WAAL;;AAAA,WAAKA,WAAL,EAAgB;EACZA;EACAA;AACH,CAHD,EAAKA,WAAW,KAAXA,WAAW,MAAhB;;;;;EASI,2BAAYC,WAAZ,EAAgC;IAC5B,KAAKA,WAAL,GAAmBA,WAAnB;EACH;;EAEKC,0CAAN,UAAkBC,OAAlB,EAA0C;;;;;;YAChB;YAAA;YAAA,EAAM,KAAKF,WAAL,CAAiBG,sBAAjB,CAAwCD,OAAxC,CAAN;;;YAAhBE,aAAa,GAAGC,SAAhB;YACAC,MAAM,GAAW;cACnBC,GAAG,EAAEH,aADc;cAEnBI,OAAO,EAAET,WAAW,CAACU;YAFF,CAAjB;YAIN;YAAA;YAAA,EAAO,KAAKT,WAAL,CAAiBU,YAAjB,CAA8BC,IAAI,CAACC,SAAL,CAAeN,MAAf,CAA9B,CAAP;;;;EACH,CAPK;;EASAL,2CAAN,UAAmBY,WAAnB,EAAwCX,OAAxC,EAAgE;;;;;;;;YACtDY,WAAW,GAAuBC,WAAS,CAACC,kBAAVD,CAA6BF,WAA7BE,EAA0C,KAAKf,WAA/Ce,CAAlC;YAGEE,qBAAqB,GAAoCf,OAAO,sBAAhE,EAAuBgB,kBAAkB,GAAgBhB,OAAO,mBAAhE,EAA2CiB,SAAS,GAAKjB,OAAO,UAAhE;YAEFkB,iBAAiB,GAAIF,kBAAD,GAAuB,IAAIG,WAAJ,CAAcH,kBAAd,CAAvB,GAA2DI,SAA/E;YACAC,qBAAqB,GAAGH,iBAAiB,SAAjB,qBAAiB,WAAjB,GAAiB,MAAjB,oBAAiB,CAAEI,gBAAnB,EAAxB;;YAEN,IAAI,QAACV,WAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEW,GAAd,MAAiB,IAAjB,IAAiBpB,aAAjB,GAAiB,MAAjB,GAAiBA,GAAEE,GAAnB,CAAJ,EAA4B;cACxB,MAAMmB,iBAAe,CAACC,8BAAhBD,EAAN;YACH;;YAEM;YAAA;YAAA,EAAM,KAAK1B,WAAL,CAAiB4B,OAAjB,CAAyB;cAClCC,EAAE,EAAEhB,WAD8B;cAElCiB,EAAE,EAAEC,WAAS,CAACC,UAAVD,EAF8B;cAGlCE,CAAC,EAAEhB,qBAAqB,SAArB,yBAAqB,WAArB,GAAqB,MAArB,wBAAqB,CAAEiB,WAAvB,EAH+B;cAIlCC,CAAC,EAAEZ,qBAAqB,SAArB,yBAAqB,WAArB,GAAqB,MAArB,wBAAqB,CAAEa,eAJQ;cAKlCC,KAAK,EAAE,KAAKrC,WAAL,CAAiBsC,aAAjB,EAL2B;cAMlCC,CAAC,EAAEhB,qBAAqB,SAArB,yBAAqB,WAArB,GAAqB,MAArB,wBAAqB,CAAEiB,YANQ;cAOlCC,CAAC,EAAE,CAAClB,qBAAqB,SAArB,yBAAqB,WAArB,GAAqB,MAArB,wBAAqB,CAAEmB,WAAxB,IAAuC,CAAC,EAAD,EAAKnB,qBAAqB,CAACmB,WAA3B,CAAvC,GAAiFpB,SAPlD;cAQlCqB,aAAa,EAAExB,SAAS,IAAIG;YARM,CAAzB,EASVR,WAAW,CAACW,GAAZ,CAAgBlB,GATN,CAAN;;;YAAP;YAAA;YAAA,EAAOqC,SAAP;;;;EAUH,CAvBK;;EAwBV;AAAC","names":["KeyLocation","cryptoUtils","PopTokenGenerator","request","getPublicKeyThumbprint","kidThumbprint","_a","reqCnf","kid","xms_ksl","SW","base64Encode","JSON","stringify","accessToken","tokenClaims","AuthToken","extractTokenClaims","resourceRequestMethod","resourceRequestUri","shrClaims","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","cnf","ClientAuthError","createTokenClaimsRequiredError","signJwt","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims","_b"],"sources":["../../src/crypto/PopTokenGenerator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto } from \"./ICrypto\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { TokenClaims } from \"../account/TokenClaims\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\r\n\r\n/**\r\n * See eSTS docs for more info.\r\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\r\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\r\n *      - sw: software storage\r\n *      - uhw: hardware storage\r\n */\r\ntype ReqCnf = {\r\n    kid: string;\r\n    xms_ksl: KeyLocation;\r\n};\r\n\r\nenum KeyLocation {\r\n    SW = \"sw\",\r\n    UHW = \"uhw\"\r\n}\r\n\r\nexport class PopTokenGenerator {\r\n\r\n    private cryptoUtils: ICrypto;\r\n\r\n    constructor(cryptoUtils: ICrypto) {\r\n        this.cryptoUtils = cryptoUtils;\r\n    }\r\n\r\n    async generateCnf(request: BaseAuthRequest): Promise<string> {\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n        const reqCnf: ReqCnf = {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW\r\n        };\r\n        return this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\r\n    }\r\n\r\n    async signPopToken(accessToken: string, request: BaseAuthRequest): Promise<string> {\r\n        const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\r\n\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims } = request;\r\n\r\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n\r\n        if (!tokenClaims?.cnf?.kid) {\r\n            throw ClientAuthError.createTokenClaimsRequiredError();\r\n        }\r\n\r\n        return await this.cryptoUtils.signJwt({\r\n            at: accessToken,\r\n            ts: TimeUtils.nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\r\n            client_claims: shrClaims || undefined\r\n        }, tokenClaims.cnf.kid);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}