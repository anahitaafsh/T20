{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { StringUtils, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { PopupUtils } from '../utils/PopupUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\r\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\r\n */\n\nvar PopupHandler =\n/** @class */\nfunction (_super) {\n  __extends(PopupHandler, _super);\n\n  function PopupHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this; // Properly sets this reference for the unload event.\n\n\n    _this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\n    return _this;\n  }\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      // Set interaction status in the library.\n      this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\n      this.browserRequestLogger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.popupUtils.openPopup(requestUrl, params.popupName, params.popup);\n    } else {\n      // Throw error if request URL is empty.\n      this.browserRequestLogger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - milliseconds until timeout\r\n   */\n\n\n  PopupHandler.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(function () {\n      var contentHash = popupWindow.location.hash;\n      BrowserUtils.clearHash(popupWindow);\n\n      _this.popupUtils.cleanPopup(popupWindow);\n\n      if (!contentHash) {\n        throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\n      }\n\n      if (UrlString.hashContainsKnownProperties(contentHash)) {\n        return contentHash;\n      } else {\n        throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\n      }\n    });\n  };\n\n  return PopupHandler;\n}(InteractionHandler);\n\nexport { PopupHandler };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;;AAkBA;;;;;;;;EAIkCA;;EAG9B,sBAAYC,cAAZ,EAAqDC,WAArD,EAAuFC,eAAvF,EAAwIC,oBAAxI,EAAoK;IAApK,YACIC,kBAAMJ,cAAN,EAAsBC,WAAtB,EAAmCC,eAAnC,EAAoDC,oBAApD,KAAyE,IAD7E,CAAoK;;;IAIhKE,KAAI,CAACC,UAAL,GAAkB,IAAIC,UAAJ,CAAeN,WAAf,EAA4BE,oBAA5B,CAAlB;;EACH;;;;;;;EAMDK,uDAAoBC,UAApB,EAAwCC,MAAxC,EAA2D;;IAEvD,IAAI,CAACC,WAAW,CAACC,OAAZ,CAAoBH,UAApB,CAAL,EAAsC;;MAElC,KAAKI,cAAL,CAAoBC,iBAApB,CAAsCC,kBAAkB,CAACC,sBAAzD,EAAiFC,gBAAgB,CAACC,6BAAlG,EAAiI,IAAjI;MACA,KAAKf,oBAAL,CAA0BgB,OAA1B,CAAkC,kBAAgBV,UAAlD,EAHkC;;MAKlC,OAAO,KAAKH,UAAL,CAAgBc,SAAhB,CAA0BX,UAA1B,EAAsCC,MAAM,CAACW,SAA7C,EAAwDX,MAAM,CAACY,KAA/D,CAAP;IACH,CAND,MAMO;;MAEH,KAAKnB,oBAAL,CAA0BoB,KAA1B,CAAgC,uBAAhC;MACA,MAAMC,gBAAgB,CAACC,6BAAjB,EAAN;IACH;EACJ,CAbD;;;;;;;;EAoBAjB,uDAAoBkB,WAApB,EAAuC;IAAvC;;IACI,OAAO,KAAKpB,UAAL,CAAgBqB,yBAAhB,CAA0CD,WAA1C,EAAuDE,IAAvD,CAA4D;MAC/D,IAAMC,WAAW,GAAGH,WAAW,CAACI,QAAZ,CAAqBC,IAAzC;MACAC,YAAY,CAACC,SAAb,CAAuBP,WAAvB;;MACArB,KAAI,CAACC,UAAL,CAAgB4B,UAAhB,CAA2BR,WAA3B;;MAEA,IAAI,CAACG,WAAL,EAAkB;QACd,MAAML,gBAAgB,CAACW,oBAAjB,CAAsCT,WAAW,CAACI,QAAZ,CAAqBM,IAA3D,CAAN;MACH;;MAED,IAAIC,SAAS,CAACC,2BAAV,CAAsCT,WAAtC,CAAJ,EAAwD;QACpD,OAAOA,WAAP;MACH,CAFD,MAEO;QACH,MAAML,gBAAgB,CAACe,4CAAjB,EAAN;MACH;IACJ,CAdM,CAAP;EAgBH,CAjBD;;EAkBJ;AApDA,EAAkCC","names":["__extends","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","_super","_this","popupUtils","PopupUtils","PopupHandler","requestUrl","params","StringUtils","isEmpty","browserStorage","setTemporaryCache","TemporaryCacheKeys","INTERACTION_STATUS_KEY","BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","infoPii","openPopup","popupName","popup","error","BrowserAuthError","createEmptyNavigationUriError","popupWindow","monitorPopupForSameOrigin","then","contentHash","location","hash","BrowserUtils","clearHash","cleanPopup","createEmptyHashError","href","UrlString","hashContainsKnownProperties","createHashDoesNotContainKnownPropertiesError","InteractionHandler"],"sources":["../../src/interaction_handler/PopupHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Logger } from \"@azure/msal-common\";\r\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserConstants, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { PopupUtils } from \"../utils/PopupUtils\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\n\r\nexport type PopupParams = InteractionParams & {\r\n    popup?: Window|null;\r\n    popupName: string\r\n};\r\n\r\n/**\r\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\r\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\r\n */\r\nexport class PopupHandler extends InteractionHandler {\r\n    private popupUtils: PopupUtils;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\r\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\r\n\r\n        // Properly sets this reference for the unload event.\r\n        this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\r\n    }\r\n\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */\r\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            // Set interaction status in the library.\r\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\r\n            this.browserRequestLogger.infoPii(`Navigate to: ${requestUrl}`);\r\n            // Open the popup window to requestUrl.\r\n            return this.popupUtils.openPopup(requestUrl, params.popupName, params.popup);\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.browserRequestLogger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - milliseconds until timeout\r\n     */\r\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\r\n        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(() => {\r\n            const contentHash = popupWindow.location.hash;\r\n            BrowserUtils.clearHash(popupWindow);\r\n            this.popupUtils.cleanPopup(popupWindow);\r\n\r\n            if (!contentHash) {\r\n                throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\r\n            }\r\n\r\n            if (UrlString.hashContainsKnownProperties(contentHash)) {\r\n                return contentHash;\r\n            } else {\r\n                throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\r\n            }\r\n        }\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}