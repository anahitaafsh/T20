{"ast":null,"code":"/*! @azure/msal-common v7.5.0 2022-10-03 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError } from './AuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  authTimeNotFoundError: {\n    code: \"auth_time_not_found\",\n    desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" + \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" + \" See https://aka.ms/msaljs/optional-claims for more information.\"\n  },\n  maxAgeTranspiredError: {\n    code: \"max_age_transpired\",\n    desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  },\n  bindingKeyNotRemovedError: {\n    code: \"binding_key_not_removed\",\n    desc: \"Could not remove the credential's binding key from storage.\"\n  },\n  logoutNotSupported: {\n    code: \"end_session_endpoint_not_supported\",\n    desc: \"Provided authority does not support logout.\"\n  },\n  keyIdMissing: {\n    code: \"key_id_missing\",\n    desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\n\nvar ClientAuthError =\n/** @class */\nfunction (_super) {\n  __extends(ClientAuthError, _super);\n\n  function ClientAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(_this, ClientAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when client info object doesn't decode correctly.\r\n   * @param caughtError\r\n   */\n\n\n  ClientAuthError.createClientInfoDecodingError = function (caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\n  };\n  /**\r\n   * Creates an error thrown if the client info is empty.\r\n   * @param rawClientInfo\r\n   */\n\n\n  ClientAuthError.createClientInfoEmptyError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the id token extraction errors out.\r\n   * @param err\r\n   */\n\n\n  ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\n  };\n  /**\r\n   * Creates an error thrown when the id token string is null or empty.\r\n   * @param invalidRawTokenString\r\n   */\n\n\n  ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\n  };\n  /**\r\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n   */\n\n\n  ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the fetch client throws\r\n   */\n\n\n  ClientAuthError.createNetworkError = function (endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n   */\n\n\n  ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the hash cannot be deserialized.\r\n   * @param hashParamObj\r\n   */\n\n\n  ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\n  };\n  /**\r\n   * Creates an error thrown when the state cannot be parsed.\r\n   * @param invalidState\r\n   */\n\n\n  ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\n  };\n  /**\r\n   * Creates an error thrown when two states do not match.\r\n   */\n\n\n  ClientAuthError.createStateMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state is not present\r\n   * @param missingState\r\n   */\n\n\n  ClientAuthError.createStateNotFoundError = function (missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\n  };\n  /**\r\n   * Creates an error thrown when the nonce does not match.\r\n   */\n\n\n  ClientAuthError.createNonceMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\r\n   * @param missingNonce\r\n   */\n\n\n  ClientAuthError.createAuthTimeNotFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);\n  };\n  /**\r\n   * Creates an error thrown when too much time has elapsed since the last end-user authentication\r\n   */\n\n\n  ClientAuthError.createMaxAgeTranspiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the mnonce is not present\r\n   * @param missingNonce\r\n   */\n\n\n  ClientAuthError.createNonceNotFoundError = function (missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\n  };\n  /**\r\n   * Throws error when multiple tokens are in cache.\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\n  };\n  /**\r\n   * Throws error when multiple accounts are in cache for the given params\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  };\n  /**\r\n   * Throws error when multiple appMetada are in cache for the given clientId.\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  };\n  /**\r\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n   */\n\n\n  ClientAuthError.createTokenRequestCannotBeMadeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n\n\n  ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n\n\n  ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append null or empty ScopeSet.\r\n   * @param appendError\r\n   */\n\n\n  ClientAuthError.createAppendScopeSetError = function (appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\n  };\n  /**\r\n   * Throws error if ScopeSet is null or undefined.\r\n   * @param givenScopeSet\r\n   */\n\n\n  ClientAuthError.createEmptyInputScopeSetError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\n  };\n  /**\r\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n   */\n\n\n  ClientAuthError.createDeviceCodeCancelledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n\n\n  ClientAuthError.createDeviceCodeExpiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n\n\n  ClientAuthError.createDeviceCodeUnknownError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\n  };\n  /**\r\n   * Throws error when silent requests are made without an account object\r\n   */\n\n\n  ClientAuthError.createNoAccountInSilentRequestError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\n  };\n  /**\r\n   * Throws error when cache record is null or undefined.\r\n   */\n\n\n  ClientAuthError.createNullOrUndefinedCacheRecord = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  };\n  /**\r\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n   */\n\n\n  ClientAuthError.createInvalidCacheEnvironmentError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  };\n  /**\r\n   * Throws error when account is not found in cache.\r\n   */\n\n\n  ClientAuthError.createNoAccountFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  };\n  /**\r\n   * Throws error if ICachePlugin not set on CacheManager.\r\n   */\n\n\n  ClientAuthError.createCachePluginError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\n  };\n  /**\r\n   * Throws error if crypto object not found.\r\n   * @param operationName\r\n   */\n\n\n  ClientAuthError.createNoCryptoObjectError = function (operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\n  };\n  /**\r\n   * Throws error if cache type is invalid.\r\n   */\n\n\n  ClientAuthError.createInvalidCacheTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Throws error if unexpected account type.\r\n   */\n\n\n  ClientAuthError.createUnexpectedAccountTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\n  };\n  /**\r\n   * Throws error if unexpected credential type.\r\n   */\n\n\n  ClientAuthError.createUnexpectedCredentialTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n\n\n  ClientAuthError.createInvalidAssertionError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n\n\n  ClientAuthError.createInvalidCredentialError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\n  };\n  /**\r\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n   */\n\n\n  ClientAuthError.createRefreshRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  };\n  /**\r\n   * Throws error if the user defined timeout is reached.\r\n   */\n\n\n  ClientAuthError.createUserTimeoutReachedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  };\n  /*\r\n   * Throws error if token claims are not populated for a signed jwt generation\r\n   */\n\n\n  ClientAuthError.createTokenClaimsRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  };\n  /**\r\n   * Throws error when the authorization code is missing from the server response\r\n   */\n\n\n  ClientAuthError.createNoAuthCodeInServerResponseError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  };\n\n  ClientAuthError.createBindingKeyNotRemovedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n  };\n  /**\r\n   * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\r\n   */\n\n\n  ClientAuthError.createLogoutNotSupportedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n  };\n  /**\r\n   * Create an error when kid attribute is missing from a PoP token's cache record\r\n   */\n\n\n  ClientAuthError.createKeyIdMissingError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n  };\n\n  return ClientAuthError;\n}(AuthError);\n\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"mappings":"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","names":["clientInfoDecodingError","code","desc","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","unableToGetOpenidConfigError","hashNotDeserialized","blankGuidGenerated","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","nonceNotFoundError","authTimeNotFoundError","maxAgeTranspiredError","noTokensFoundError","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","tokenRequestCannotBeMade","appendEmptyScopeError","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","CachePluginError","noCryptoObj","invalidCacheType","unexpectedAccountType","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsRequired","noAuthorizationCodeFromServer","noAzureRegionDetected","accessTokenEntityNullError","bindingKeyNotRemovedError","logoutNotSupported","keyIdMissing","__extends","ClientAuthError","errorCode","errorMessage","_super","_this","name","Object","setPrototypeOf","prototype","caughtError","ClientAuthErrorMessage","caughtExtractionError","invalidRawTokenString","errDetail","endpoint","split","hashParamObj","invalidState","errorString","missingState","missingNonce","givenScope","appendError","operationName","AuthError"],"sources":["../../src/error/ClientAuthError.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"./AuthError\";\n\n/**\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const ClientAuthErrorMessage = {\n    clientInfoDecodingError: {\n        code: \"client_info_decoding_error\",\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n    },\n    clientInfoEmptyError: {\n        code: \"client_info_empty_error\",\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n    },\n    tokenParsingError: {\n        code: \"token_parsing_error\",\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n    },\n    nullOrEmptyToken: {\n        code: \"null_or_empty_token\",\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n    },\n    endpointResolutionError: {\n        code: \"endpoints_resolution_error\",\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n    },\n    networkError: {\n        code: \"network_error\",\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\n    },\n    unableToGetOpenidConfigError: {\n        code: \"openid_config_error\",\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n    },\n    hashNotDeserialized: {\n        code: \"hash_not_deserialized\",\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n    },\n    blankGuidGenerated: {\n        code: \"blank_guid_generated\",\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n    },\n    invalidStateError: {\n        code: \"invalid_state\",\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n    },\n    stateMismatchError: {\n        code: \"state_mismatch\",\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n    },\n    stateNotFoundError: {\n        code: \"state_not_found\",\n        desc: \"State not found\"\n    },\n    nonceMismatchError: {\n        code: \"nonce_mismatch\",\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n    },\n    nonceNotFoundError: {\n        code: \"nonce_not_found\",\n        desc: \"nonce not found\"\n    },\n    authTimeNotFoundError: {\n        code: \"auth_time_not_found\",\n        desc: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\n            \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\n            \" See https://aka.ms/msaljs/optional-claims for more information.\"\n    },\n    maxAgeTranspiredError: {\n        code: \"max_age_transpired\",\n        desc: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\"\n    },\n    noTokensFoundError: {\n        code: \"no_tokens_found\",\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n    },\n    multipleMatchingTokens: {\n        code: \"multiple_matching_tokens\",\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\n    },\n    multipleMatchingAccounts: {\n        code: \"multiple_matching_accounts\",\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n    },\n    multipleMatchingAppMetadata: {\n        code: \"multiple_matching_appMetadata\",\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n    },\n    tokenRequestCannotBeMade: {\n        code: \"request_cannot_be_made\",\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\n    },\n    appendEmptyScopeError: {\n        code: \"cannot_append_empty_scope\",\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n    },\n    removeEmptyScopeError: {\n        code: \"cannot_remove_empty_scope\",\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n    },\n    appendScopeSetError: {\n        code: \"cannot_append_scopeset\",\n        desc: \"Cannot append ScopeSet due to error.\"\n    },\n    emptyInputScopeSetError: {\n        code: \"empty_input_scopeset\",\n        desc: \"Empty input ScopeSet cannot be processed.\"\n    },\n    DeviceCodePollingCancelled: {\n        code: \"device_code_polling_cancelled\",\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n    },\n    DeviceCodeExpired: {\n        code: \"device_code_expired\",\n        desc: \"Device code is expired.\"\n    },\n    DeviceCodeUnknownError: {\n        code: \"device_code_unknown_error\",\n        desc: \"Device code stopped polling for unknown reasons.\"\n    },\n    NoAccountInSilentRequest: {\n        code: \"no_account_in_silent_request\",\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\n    },\n    invalidCacheRecord: {\n        code: \"invalid_cache_record\",\n        desc: \"Cache record object was null or undefined.\"\n    },\n    invalidCacheEnvironment: {\n        code: \"invalid_cache_environment\",\n        desc: \"Invalid environment when attempting to create cache entry\"\n    },\n    noAccountFound: {\n        code: \"no_account_found\",\n        desc: \"No account found in cache for given key.\"\n    },\n    CachePluginError: {\n        code: \"no cache plugin set on CacheManager\",\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n    },\n    noCryptoObj: {\n        code: \"no_crypto_object\",\n        desc: \"No crypto object detected. This is required for the following operation: \"\n    },\n    invalidCacheType: {\n        code: \"invalid_cache_type\",\n        desc: \"Invalid cache type\"\n    },\n    unexpectedAccountType: {\n        code: \"unexpected_account_type\",\n        desc: \"Unexpected account type.\"\n    },\n    unexpectedCredentialType: {\n        code: \"unexpected_credential_type\",\n        desc: \"Unexpected credential type.\"\n    },\n    invalidAssertion: {\n        code: \"invalid_assertion\",\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n    },\n    invalidClientCredential: {\n        code: \"invalid_client_credential\",\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n    },\n    tokenRefreshRequired: {\n        code: \"token_refresh_required\",\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n    },\n    userTimeoutReached: {\n        code: \"user_timeout_reached\",\n        desc: \"User defined timeout for device code polling reached\",\n    },\n    tokenClaimsRequired: {\n        code: \"token_claims_cnf_required_for_signedjwt\",\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n    },\n    noAuthorizationCodeFromServer: {\n        code: \"authorization_code_missing_from_server_response\",\n        desc: \"Server response does not contain an authorization code to proceed\"\n    },\n    noAzureRegionDetected: {\n        code: \"no_azure_region_detected\",\n        desc: \"No azure region was detected and no fallback was made available\"\n    },\n    accessTokenEntityNullError: {\n        code: \"access_token_entity_null\",\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n    },\n    bindingKeyNotRemovedError: {\n        code: \"binding_key_not_removed\",\n        desc: \"Could not remove the credential's binding key from storage.\"\n    },\n    logoutNotSupported: {\n        code: \"end_session_endpoint_not_supported\",\n        desc: \"Provided authority does not support logout.\"\n    },\n    keyIdMissing: {\n        code: \"key_id_missing\",\n        desc: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\"\n    }\n};\n\n/**\n * Error thrown when there is an error in the client code running on the browser.\n */\nexport class ClientAuthError extends AuthError {\n\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n        this.name = \"ClientAuthError\";\n\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\n    }\n\n    /**\n     * Creates an error thrown when client info object doesn't decode correctly.\n     * @param caughtError\n     */\n    static createClientInfoDecodingError(caughtError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\n    }\n\n    /**\n     * Creates an error thrown if the client info is empty.\n     * @param rawClientInfo\n     */\n    static createClientInfoEmptyError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code,\n            `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token extraction errors out.\n     * @param err\n     */\n    static createTokenParsingError(caughtExtractionError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code,\n            `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\n    }\n\n    /**\n     * Creates an error thrown when the id token string is null or empty.\n     * @param invalidRawTokenString\n     */\n    static createTokenNullOrEmptyError(invalidRawTokenString: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code,\n            `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\n    }\n\n    /**\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\n     */\n    static createEndpointDiscoveryIncompleteError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code,\n            `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the fetch client throws\n     */\n    static createNetworkError(endpoint: string, errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code,\n            `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\n    }\n\n    /**\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\n     */\n    static createUnableToGetOpenidConfigError(errDetail: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code,\n            `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\n    }\n\n    /**\n     * Creates an error thrown when the hash cannot be deserialized.\n     * @param hashParamObj\n     */\n    static createHashNotDeserializedError(hashParamObj: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code,\n            `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\n    }\n\n    /**\n     * Creates an error thrown when the state cannot be parsed.\n     * @param invalidState\n     */\n    static createInvalidStateError(invalidState: string, errorString?: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\n            `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\n    }\n\n    /**\n     * Creates an error thrown when two states do not match.\n     */\n    static createStateMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code,\n            ClientAuthErrorMessage.stateMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the state is not present\n     * @param missingState\n     */\n    static createStateNotFoundError(missingState: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code,\n            `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\n    }\n\n    /**\n     * Creates an error thrown when the nonce does not match.\n     */\n    static createNonceMismatchError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\n            ClientAuthErrorMessage.nonceMismatchError.desc);\n    }\n\n    /**\n     * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims\n     * @param missingNonce\n     */\n    static createAuthTimeNotFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code,\n            ClientAuthErrorMessage.authTimeNotFoundError.desc);\n    }\n\n    /**\n     * Creates an error thrown when too much time has elapsed since the last end-user authentication\n     */\n    static createMaxAgeTranspiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code,\n            ClientAuthErrorMessage.maxAgeTranspiredError.desc);\n    }\n\n    /**\n     * Creates an error thrown when the mnonce is not present\n     * @param missingNonce\n     */\n    static createNonceNotFoundError(missingNonce: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code,\n            `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\n    }\n\n    /**\n     * Throws error when multiple tokens are in cache.\n     */\n    static createMultipleMatchingTokensInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\n            `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\n    }\n\n    /**\n     * Throws error when multiple accounts are in cache for the given params\n     */\n    static createMultipleMatchingAccountsInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code,\n            ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n    }\n\n    /**\n     * Throws error when multiple appMetada are in cache for the given clientId.\n     */\n    static createMultipleMatchingAppMetadataInCacheError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code,\n            ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n    }\n\n    /**\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\n     */\n    static createTokenRequestCannotBeMadeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createAppendEmptyScopeToSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append a null, undefined or empty scope to a set\n     * @param givenScope\n     */\n    static createRemoveEmptyScopeFromSetError(givenScope: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\n    }\n\n    /**\n     * Throws error when attempting to append null or empty ScopeSet.\n     * @param appendError\n     */\n    static createAppendScopeSetError(appendError: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\n    }\n\n    /**\n     * Throws error if ScopeSet is null or undefined.\n     * @param givenScopeSet\n     */\n    static createEmptyInputScopeSetError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\n    }\n\n    /**\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\n     */\n    static createDeviceCodeCancelledError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeExpiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\n    }\n\n    /**\n     * Throws error if device code is expired\n     */\n    static createDeviceCodeUnknownError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\n    }\n\n    /**\n     * Throws error when silent requests are made without an account object\n     */\n    static createNoAccountInSilentRequestError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\n    }\n\n    /**\n     * Throws error when cache record is null or undefined.\n     */\n    static createNullOrUndefinedCacheRecord(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n    }\n\n    /**\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\n     */\n    static createInvalidCacheEnvironmentError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n    }\n\n    /**\n     * Throws error when account is not found in cache.\n     */\n    static createNoAccountFoundError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n    }\n\n    /**\n     * Throws error if ICachePlugin not set on CacheManager.\n     */\n    static createCachePluginError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\n    }\n\n    /**\n     * Throws error if crypto object not found.\n     * @param operationName\n     */\n    static createNoCryptoObjectError(operationName: string): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\n    }\n\n    /**\n     * Throws error if cache type is invalid.\n     */\n    static createInvalidCacheTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected account type.\n     */\n    static createUnexpectedAccountTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\n    }\n\n    /**\n     * Throws error if unexpected credential type.\n     */\n    static createUnexpectedCredentialTypeError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidAssertionError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\n    }\n\n    /**\n     * Throws error if client assertion is not valid.\n     */\n    static createInvalidCredentialError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\n    }\n\n    /**\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\n     */\n    static createRefreshRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n    }\n\n    /**\n     * Throws error if the user defined timeout is reached.\n     */\n    static createUserTimeoutReachedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n    }\n\n    /*\n     * Throws error if token claims are not populated for a signed jwt generation\n     */\n    static createTokenClaimsRequiredError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n    }\n\n    /**\n     * Throws error when the authorization code is missing from the server response\n     */\n    static createNoAuthCodeInServerResponseError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n    }\n\n    static createBindingKeyNotRemovedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);\n    }\n\n    /**\n     * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint\n     */\n    static createLogoutNotSupportedError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);\n    }\n\n    /**\n     * Create an error when kid attribute is missing from a PoP token's cache record\n     */\n    static createKeyIdMissingError(): ClientAuthError {\n        return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}