{"ast":null,"code":"/*! @azure/msal-browser v2.29.0 2022-10-03 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, JoseHeader } from '@azure/msal-common';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { CryptoKeyStore } from '../cache/CryptoKeyStore.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps =\n/** @class */\nfunction () {\n  function CryptoOps(logger, performanceClient, cryptoConfig) {\n    this.logger = logger; // Browser crypto needs to be validated first before any other classes can be set.\n\n    this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new CryptoKeyStore(this.logger);\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.hashString(publicJwkString)];\n\n          case 3:\n            publicJwkHash = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _b.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _b.sent(); // Store Keypair data in keystore\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.setItem(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            })];\n\n          case 6:\n            // Store Keypair data in keystore\n            _b.sent();\n\n            if (publicKeyThumbMeasurement) {\n              publicKeyThumbMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes cryptographic keypair from key store matching the keyId passed in\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.removeTokenBindingKey = function (kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyFound;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.removeItem(kid)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.containsKey(kid)];\n\n          case 2:\n            keyFound = _a.sent();\n            return [2\n            /*return*/\n            , !keyFound];\n        }\n      });\n    });\n  };\n  /**\r\n   * Removes all cryptographic keys from IndexedDB storage\r\n   */\n\n\n  CryptoOps.prototype.clearKeystore = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.clear()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n            return [4\n            /*yield*/\n            , this.cache.asymmetricKeys.getItem(kid)];\n\n          case 1:\n            cachedKeyPair = _b.sent();\n\n            if (!cachedKeyPair) {\n              throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n            }\n\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _b.sent();\n            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({\n              kid: kid\n            }));\n            shrHeader = JoseHeader.getShrHeaderString({\n              kid: encodedKeyIdThumbprint,\n              alg: publicKeyJwk.alg\n            });\n            encodedShrHeader = this.b64Encode.urlEncode(shrHeader); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedShrHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _b.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            signedJwt = tokenString + \".\" + encodedSignature;\n\n            if (signJwtMeasurement) {\n              signJwtMeasurement.endMeasurement({\n                success: true\n              });\n            }\n\n            return [2\n            /*return*/\n            , signedJwt];\n        }\n      });\n    });\n  };\n  /**\r\n   * Returns the SHA-256 hash of an input string\r\n   * @param plainText\r\n   */\n\n\n  CryptoOps.prototype.hashString = function (plainText) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hashBuffer, hashBytes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(plainText)];\n\n          case 1:\n            hashBuffer = _a.sent();\n            hashBytes = new Uint8Array(hashBuffer);\n            return [2\n            /*return*/\n            , this.b64Encode.urlEncodeArr(hashBytes)];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"mappings":"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","names":["logger","performanceClient","cryptoConfig","browserCrypto","BrowserCrypto","b64Encode","Base64Encode","b64Decode","Base64Decode","guidGenerator","GuidGenerator","pkceGenerator","PkceGenerator","cache","CryptoKeyStore","CryptoOps","generateGuid","input","encode","decode","generateCodes","request","publicKeyThumbMeasurement","_a","startMeasurement","PerformanceEvents","CryptoOptsGetPublicKeyThumbprint","correlationId","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","keyPair","_b","exportJwk","publicKey","publicKeyJwk","pubKeyThumprintObj","e","kty","n","publicJwkString","BrowserStringUtils","getSortedObjectString","hashString","publicJwkHash","privateKey","privateKeyJwk","importJwk","unextractablePrivateKey","asymmetricKeys","setItem","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","endMeasurement","success","kid","removeItem","containsKey","keyFound","clear","payload","signJwtMeasurement","CryptoOptsSignJwt","getItem","cachedKeyPair","BrowserAuthError","createSigningKeyNotFoundInStorageError","publicKeyJwkString","encodedKeyIdThumbprint","urlEncode","JSON","stringify","shrHeader","JoseHeader","getShrHeaderString","alg","encodedShrHeader","cnf","jwk","parse","encodedPayload","tokenString","tokenBuffer","stringToArrayBuffer","sign","signatureBuffer","encodedSignature","urlEncodeArr","Uint8Array","signedJwt","plainText","sha256Digest","hashBuffer","hashBytes"],"sources":["../../src/crypto/CryptoOps.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ICrypto, IPerformanceClient, JoseHeader, Logger, PerformanceEvents, PkceCodes, SignedHttpRequest, SignedHttpRequestParameters } from \"@azure/msal-common\";\nimport { GuidGenerator } from \"./GuidGenerator\";\nimport { Base64Encode } from \"../encode/Base64Encode\";\nimport { Base64Decode } from \"../encode/Base64Decode\";\nimport { PkceGenerator } from \"./PkceGenerator\";\nimport { BrowserCrypto } from \"./BrowserCrypto\";\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\nimport { CryptoKeyStore } from \"../cache/CryptoKeyStore\";\nimport { CryptoOptions } from \"../config/Configuration\";\n\nexport type CachedKeyPair = {\n    publicKey: CryptoKey,\n    privateKey: CryptoKey,\n    requestMethod?: string,\n    requestUri?: string\n};\n\n/**\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\n */\nexport class CryptoOps implements ICrypto {\n\n    private browserCrypto: BrowserCrypto;\n    private guidGenerator: GuidGenerator;\n    private b64Encode: Base64Encode;\n    private b64Decode: Base64Decode;\n    private pkceGenerator: PkceGenerator;\n    private logger: Logger;\n\n    /**\n     * CryptoOps can be used in contexts outside a PCA instance,\n     * meaning there won't be a performance manager available.\n     */\n    private performanceClient: IPerformanceClient | undefined;\n\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\n    private static EXTRACTABLE: boolean = true;\n    private cache: CryptoKeyStore;\n\n    constructor(logger: Logger, performanceClient?: IPerformanceClient, cryptoConfig?: CryptoOptions) {\n        this.logger = logger;\n        // Browser crypto needs to be validated first before any other classes can be set.\n        this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);\n        this.b64Encode = new Base64Encode();\n        this.b64Decode = new Base64Decode();\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n        this.cache = new CryptoKeyStore(this.logger);\n        this.performanceClient = performanceClient;\n    }\n\n    /**\n     * Creates a new random GUID - used to populate state and nonce.\n     * @returns string (GUID)\n     */\n    createNewGuid(): string {\n        return this.guidGenerator.generateGuid();\n    }\n\n    /**\n     * Encodes input string to base64.\n     * @param input \n     */\n    base64Encode(input: string): string {\n        return this.b64Encode.encode(input);\n    }    \n    \n    /**\n     * Decodes input string from base64.\n     * @param input \n     */\n    base64Decode(input: string): string {\n        return this.b64Decode.decode(input);\n    }\n\n    /**\n     * Generates PKCE codes used in Authorization Code Flow.\n     */\n    async generatePkceCodes(): Promise<PkceCodes> {\n        return this.pkceGenerator.generateCodes();\n    }\n\n    /**\n     * Generates a keypair, stores it and returns a thumbprint\n     * @param request\n     */\n    async getPublicKeyThumbprint(request: SignedHttpRequestParameters): Promise<string> {\n        const publicKeyThumbMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);\n\n        // Generate Keypair\n        const keyPair: CryptoKeyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\n\n        // Generate Thumbprint for Public Key\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\n        \n        const pubKeyThumprintObj: JsonWebKey = {\n            e: publicKeyJwk.e,\n            kty: publicKeyJwk.kty,\n            n: publicKeyJwk.n\n        };\n        \n        const publicJwkString: string = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);\n        const publicJwkHash = await this.hashString(publicJwkString);\n\n        // Generate Thumbprint for Private Key\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\n        // Re-import private key to make it unextractable\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\n\n        // Store Keypair data in keystore\n        await this.cache.asymmetricKeys.setItem(\n            publicJwkHash, \n            {\n                privateKey: unextractablePrivateKey,\n                publicKey: keyPair.publicKey,\n                requestMethod: request.resourceRequestMethod,\n                requestUri: request.resourceRequestUri\n            }\n        );\n\n        if (publicKeyThumbMeasurement) {\n            publicKeyThumbMeasurement.endMeasurement({\n                success: true\n            });\n        }\n\n        return publicJwkHash;\n    }\n\n    /**\n     * Removes cryptographic keypair from key store matching the keyId passed in\n     * @param kid \n     */\n    async removeTokenBindingKey(kid: string): Promise<boolean> {\n        await this.cache.asymmetricKeys.removeItem(kid);\n        const keyFound = await this.cache.asymmetricKeys.containsKey(kid);\n        return !keyFound;\n    }\n\n    /**\n     * Removes all cryptographic keys from IndexedDB storage\n     */\n    async clearKeystore(): Promise<boolean> {\n        return await this.cache.clear();\n    }\n\n    /**\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\n     * @param payload \n     * @param kid \n     */\n    async signJwt(payload: SignedHttpRequest, kid: string, correlationId?: string): Promise<string> {\n        const signJwtMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);\n        const cachedKeyPair = await this.cache.asymmetricKeys.getItem(kid);\n        \n        if (!cachedKeyPair) {\n            throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);\n        }\n\n        // Get public key as JWK\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\n        const publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);\n\n        // Base64URL encode public key thumbprint with keyId only: BASE64URL({ kid: \"FULL_PUBLIC_KEY_HASH\" })\n        const encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));\n        \n        // Generate header\n        const shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });\n        const encodedShrHeader = this.b64Encode.urlEncode(shrHeader);\n\n        // Generate payload\n        payload.cnf = {\n            jwk: JSON.parse(publicKeyJwkString)\n        };\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n\n        // Form token string\n        const tokenString = `${encodedShrHeader}.${encodedPayload}`;\n\n        // Sign token\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n\n        const signedJwt = `${tokenString}.${encodedSignature}`;\n\n        if (signJwtMeasurement) {\n            signJwtMeasurement.endMeasurement({\n                success: true\n            });\n        }\n\n        return signedJwt;\n    }\n\n    /**\n     * Returns the SHA-256 hash of an input string\n     * @param plainText\n     */\n    async hashString(plainText: string): Promise<string> {\n        const hashBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(plainText);\n        const hashBytes = new Uint8Array(hashBuffer);\n        return this.b64Encode.urlEncodeArr(hashBytes);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}